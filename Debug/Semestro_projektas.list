
Semestro_projektas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f54  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08008014  08008014  00018014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008168  08008168  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  08008168  08008168  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008168  08008168  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008168  08008168  00018168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800816c  0800816c  0001816c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08008170  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000121c  20000180  080082f0  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000139c  080082f0  0002139c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145c0  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002eed  00000000  00000000  00034768  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ea0  00000000  00000000  00037658  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d38  00000000  00000000  000384f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000164d0  00000000  00000000  00039230  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e7be  00000000  00000000  0004f700  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007ca45  00000000  00000000  0005debe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000da903  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032d8  00000000  00000000  000da980  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000180 	.word	0x20000180
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007ffc 	.word	0x08007ffc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000184 	.word	0x20000184
 8000104:	08007ffc 	.word	0x08007ffc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <CDC_ReceiveCallBack>:
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM22_Init(void);
/* USER CODE BEGIN PFP */

void CDC_ReceiveCallBack(uint8_t *buf, uint32_t len) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
	CDC_Transmit_FS(buf, len);
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	b29a      	uxth	r2, r3
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	0011      	movs	r1, r2
 8000232:	0018      	movs	r0, r3
 8000234:	f007 f9fe 	bl	8007634 <CDC_Transmit_FS>
}
 8000238:	46c0      	nop			; (mov r8, r8)
 800023a:	46bd      	mov	sp, r7
 800023c:	b002      	add	sp, #8
 800023e:	bd80      	pop	{r7, pc}

08000240 <Motors_Control>:

void Motors_Control(uint8_t DutyCycleA, uint8_t DutyCycleB) {
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	0002      	movs	r2, r0
 8000248:	1dfb      	adds	r3, r7, #7
 800024a:	701a      	strb	r2, [r3, #0]
 800024c:	1dbb      	adds	r3, r7, #6
 800024e:	1c0a      	adds	r2, r1, #0
 8000250:	701a      	strb	r2, [r3, #0]
	htim2.Instance->CCR1 = DutyCycleA;  // Motor A speed control
 8000252:	4b1b      	ldr	r3, [pc, #108]	; (80002c0 <Motors_Control+0x80>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	1dfa      	adds	r2, r7, #7
 8000258:	7812      	ldrb	r2, [r2, #0]
 800025a:	635a      	str	r2, [r3, #52]	; 0x34
	htim22.Instance->CCR1 = DutyCycleB;  // Motor B speed control
 800025c:	4b19      	ldr	r3, [pc, #100]	; (80002c4 <Motors_Control+0x84>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	1dba      	adds	r2, r7, #6
 8000262:	7812      	ldrb	r2, [r2, #0]
 8000264:	635a      	str	r2, [r3, #52]	; 0x34

	// moving forward
	if (DutyCycleA > 0 && DutyCycleB > 0) {
 8000266:	1dfb      	adds	r3, r7, #7
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d00f      	beq.n	800028e <Motors_Control+0x4e>
 800026e:	1dbb      	adds	r3, r7, #6
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d00b      	beq.n	800028e <Motors_Control+0x4e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_2, GPIO_PIN_RESET);  // in1 and in3
 8000276:	4b14      	ldr	r3, [pc, #80]	; (80002c8 <Motors_Control+0x88>)
 8000278:	2200      	movs	r2, #0
 800027a:	2105      	movs	r1, #5
 800027c:	0018      	movs	r0, r3
 800027e:	f000 fdb3 	bl	8000de8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1 | GPIO_PIN_10, GPIO_PIN_SET);  //in2 and in4
 8000282:	4912      	ldr	r1, [pc, #72]	; (80002cc <Motors_Control+0x8c>)
 8000284:	4b10      	ldr	r3, [pc, #64]	; (80002c8 <Motors_Control+0x88>)
 8000286:	2201      	movs	r2, #1
 8000288:	0018      	movs	r0, r3
 800028a:	f000 fdad 	bl	8000de8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_2, GPIO_PIN_SET);  // in1 and in3
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1 | GPIO_PIN_10, GPIO_PIN_RESET);  //in2 and in4
	}

	// stop
	if (DutyCycleA == 0 && DutyCycleB == 0) {
 800028e:	1dfb      	adds	r3, r7, #7
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d10f      	bne.n	80002b6 <Motors_Control+0x76>
 8000296:	1dbb      	adds	r3, r7, #6
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d10b      	bne.n	80002b6 <Motors_Control+0x76>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_2, GPIO_PIN_RESET);  // in1 and in3
 800029e:	4b0a      	ldr	r3, [pc, #40]	; (80002c8 <Motors_Control+0x88>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	2105      	movs	r1, #5
 80002a4:	0018      	movs	r0, r3
 80002a6:	f000 fd9f 	bl	8000de8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1 | GPIO_PIN_10, GPIO_PIN_RESET);  //in2 and in4
 80002aa:	4908      	ldr	r1, [pc, #32]	; (80002cc <Motors_Control+0x8c>)
 80002ac:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <Motors_Control+0x88>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	0018      	movs	r0, r3
 80002b2:	f000 fd99 	bl	8000de8 <HAL_GPIO_WritePin>
	}
}
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	46bd      	mov	sp, r7
 80002ba:	b002      	add	sp, #8
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	46c0      	nop			; (mov r8, r8)
 80002c0:	200003fc 	.word	0x200003fc
 80002c4:	200003c0 	.word	0x200003c0
 80002c8:	50000400 	.word	0x50000400
 80002cc:	00000402 	.word	0x00000402

080002d0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002d4:	f000 fac8 	bl	8000868 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80002d8:	f000 f822 	bl	8000320 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002dc:	f000 f954 	bl	8000588 <MX_GPIO_Init>
	MX_TIM2_Init();
 80002e0:	f000 f894 	bl	800040c <MX_TIM2_Init>
	MX_USB_DEVICE_Init();
 80002e4:	f007 f91a 	bl	800751c <MX_USB_DEVICE_Init>
	MX_TIM22_Init();
 80002e8:	f000 f8ee 	bl	80004c8 <MX_TIM22_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80002ec:	4b09      	ldr	r3, [pc, #36]	; (8000314 <main+0x44>)
 80002ee:	2100      	movs	r1, #0
 80002f0:	0018      	movs	r0, r3
 80002f2:	f003 f937 	bl	8003564 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim22, TIM_CHANNEL_1);
 80002f6:	4b08      	ldr	r3, [pc, #32]	; (8000318 <main+0x48>)
 80002f8:	2100      	movs	r1, #0
 80002fa:	0018      	movs	r0, r3
 80002fc:	f003 f932 	bl	8003564 <HAL_TIM_PWM_Start>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		Motors_Control(buf[0], buf[2]);
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <main+0x4c>)
 8000302:	781a      	ldrb	r2, [r3, #0]
 8000304:	4b05      	ldr	r3, [pc, #20]	; (800031c <main+0x4c>)
 8000306:	789b      	ldrb	r3, [r3, #2]
 8000308:	0019      	movs	r1, r3
 800030a:	0010      	movs	r0, r2
 800030c:	f7ff ff98 	bl	8000240 <Motors_Control>
 8000310:	e7f6      	b.n	8000300 <main+0x30>
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	200003fc 	.word	0x200003fc
 8000318:	200003c0 	.word	0x200003c0
 800031c:	20000000 	.word	0x20000000

08000320 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000320:	b590      	push	{r4, r7, lr}
 8000322:	b09d      	sub	sp, #116	; 0x74
 8000324:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000326:	2438      	movs	r4, #56	; 0x38
 8000328:	193b      	adds	r3, r7, r4
 800032a:	0018      	movs	r0, r3
 800032c:	2338      	movs	r3, #56	; 0x38
 800032e:	001a      	movs	r2, r3
 8000330:	2100      	movs	r1, #0
 8000332:	f007 fe5b 	bl	8007fec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000336:	2324      	movs	r3, #36	; 0x24
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	0018      	movs	r0, r3
 800033c:	2314      	movs	r3, #20
 800033e:	001a      	movs	r2, r3
 8000340:	2100      	movs	r1, #0
 8000342:	f007 fe53 	bl	8007fec <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000346:	003b      	movs	r3, r7
 8000348:	0018      	movs	r0, r3
 800034a:	2324      	movs	r3, #36	; 0x24
 800034c:	001a      	movs	r2, r3
 800034e:	2100      	movs	r1, #0
 8000350:	f007 fe4c 	bl	8007fec <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000354:	4b2b      	ldr	r3, [pc, #172]	; (8000404 <SystemClock_Config+0xe4>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a2b      	ldr	r2, [pc, #172]	; (8000408 <SystemClock_Config+0xe8>)
 800035a:	401a      	ands	r2, r3
 800035c:	4b29      	ldr	r3, [pc, #164]	; (8000404 <SystemClock_Config+0xe4>)
 800035e:	2180      	movs	r1, #128	; 0x80
 8000360:	0109      	lsls	r1, r1, #4
 8000362:	430a      	orrs	r2, r1
 8000364:	601a      	str	r2, [r3, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSI48;
 8000366:	0021      	movs	r1, r4
 8000368:	187b      	adds	r3, r7, r1
 800036a:	2222      	movs	r2, #34	; 0x22
 800036c:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800036e:	187b      	adds	r3, r7, r1
 8000370:	2201      	movs	r2, #1
 8000372:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000374:	187b      	adds	r3, r7, r1
 8000376:	2210      	movs	r2, #16
 8000378:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800037a:	187b      	adds	r3, r7, r1
 800037c:	2201      	movs	r2, #1
 800037e:	619a      	str	r2, [r3, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000380:	187b      	adds	r3, r7, r1
 8000382:	2202      	movs	r2, #2
 8000384:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000386:	187b      	adds	r3, r7, r1
 8000388:	2200      	movs	r2, #0
 800038a:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800038c:	187b      	adds	r3, r7, r1
 800038e:	2280      	movs	r2, #128	; 0x80
 8000390:	02d2      	lsls	r2, r2, #11
 8000392:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000394:	187b      	adds	r3, r7, r1
 8000396:	2280      	movs	r2, #128	; 0x80
 8000398:	03d2      	lsls	r2, r2, #15
 800039a:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800039c:	187b      	adds	r3, r7, r1
 800039e:	0018      	movs	r0, r3
 80003a0:	f002 f9e2 	bl	8002768 <HAL_RCC_OscConfig>
 80003a4:	1e03      	subs	r3, r0, #0
 80003a6:	d001      	beq.n	80003ac <SystemClock_Config+0x8c>
		Error_Handler();
 80003a8:	f000 f92a 	bl	8000600 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80003ac:	2124      	movs	r1, #36	; 0x24
 80003ae:	187b      	adds	r3, r7, r1
 80003b0:	220f      	movs	r2, #15
 80003b2:	601a      	str	r2, [r3, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003b4:	187b      	adds	r3, r7, r1
 80003b6:	2203      	movs	r2, #3
 80003b8:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ba:	187b      	adds	r3, r7, r1
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003c0:	187b      	adds	r3, r7, r1
 80003c2:	2200      	movs	r2, #0
 80003c4:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003c6:	187b      	adds	r3, r7, r1
 80003c8:	2200      	movs	r2, #0
 80003ca:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80003cc:	187b      	adds	r3, r7, r1
 80003ce:	2101      	movs	r1, #1
 80003d0:	0018      	movs	r0, r3
 80003d2:	f002 fd89 	bl	8002ee8 <HAL_RCC_ClockConfig>
 80003d6:	1e03      	subs	r3, r0, #0
 80003d8:	d001      	beq.n	80003de <SystemClock_Config+0xbe>
		Error_Handler();
 80003da:	f000 f911 	bl	8000600 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80003de:	003b      	movs	r3, r7
 80003e0:	2240      	movs	r2, #64	; 0x40
 80003e2:	601a      	str	r2, [r3, #0]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80003e4:	003b      	movs	r3, r7
 80003e6:	2280      	movs	r2, #128	; 0x80
 80003e8:	04d2      	lsls	r2, r2, #19
 80003ea:	621a      	str	r2, [r3, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80003ec:	003b      	movs	r3, r7
 80003ee:	0018      	movs	r0, r3
 80003f0:	f002 ff28 	bl	8003244 <HAL_RCCEx_PeriphCLKConfig>
 80003f4:	1e03      	subs	r3, r0, #0
 80003f6:	d001      	beq.n	80003fc <SystemClock_Config+0xdc>
		Error_Handler();
 80003f8:	f000 f902 	bl	8000600 <Error_Handler>
	}
}
 80003fc:	46c0      	nop			; (mov r8, r8)
 80003fe:	46bd      	mov	sp, r7
 8000400:	b01d      	add	sp, #116	; 0x74
 8000402:	bd90      	pop	{r4, r7, pc}
 8000404:	40007000 	.word	0x40007000
 8000408:	ffffe7ff 	.word	0xffffe7ff

0800040c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800040c:	b580      	push	{r7, lr}
 800040e:	b086      	sub	sp, #24
 8000410:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000412:	2310      	movs	r3, #16
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	0018      	movs	r0, r3
 8000418:	2308      	movs	r3, #8
 800041a:	001a      	movs	r2, r3
 800041c:	2100      	movs	r1, #0
 800041e:	f007 fde5 	bl	8007fec <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000422:	003b      	movs	r3, r7
 8000424:	0018      	movs	r0, r3
 8000426:	2310      	movs	r3, #16
 8000428:	001a      	movs	r2, r3
 800042a:	2100      	movs	r1, #0
 800042c:	f007 fdde 	bl	8007fec <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000430:	4b24      	ldr	r3, [pc, #144]	; (80004c4 <MX_TIM2_Init+0xb8>)
 8000432:	2280      	movs	r2, #128	; 0x80
 8000434:	05d2      	lsls	r2, r2, #23
 8000436:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 32;
 8000438:	4b22      	ldr	r3, [pc, #136]	; (80004c4 <MX_TIM2_Init+0xb8>)
 800043a:	2220      	movs	r2, #32
 800043c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800043e:	4b21      	ldr	r3, [pc, #132]	; (80004c4 <MX_TIM2_Init+0xb8>)
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 100;
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <MX_TIM2_Init+0xb8>)
 8000446:	2264      	movs	r2, #100	; 0x64
 8000448:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800044a:	4b1e      	ldr	r3, [pc, #120]	; (80004c4 <MX_TIM2_Init+0xb8>)
 800044c:	2200      	movs	r2, #0
 800044e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000450:	4b1c      	ldr	r3, [pc, #112]	; (80004c4 <MX_TIM2_Init+0xb8>)
 8000452:	2200      	movs	r2, #0
 8000454:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000456:	4b1b      	ldr	r3, [pc, #108]	; (80004c4 <MX_TIM2_Init+0xb8>)
 8000458:	0018      	movs	r0, r3
 800045a:	f003 f857 	bl	800350c <HAL_TIM_PWM_Init>
 800045e:	1e03      	subs	r3, r0, #0
 8000460:	d001      	beq.n	8000466 <MX_TIM2_Init+0x5a>
		Error_Handler();
 8000462:	f000 f8cd 	bl	8000600 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000466:	2110      	movs	r1, #16
 8000468:	187b      	adds	r3, r7, r1
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800046e:	187b      	adds	r3, r7, r1
 8000470:	2200      	movs	r2, #0
 8000472:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8000474:	187a      	adds	r2, r7, r1
 8000476:	4b13      	ldr	r3, [pc, #76]	; (80004c4 <MX_TIM2_Init+0xb8>)
 8000478:	0011      	movs	r1, r2
 800047a:	0018      	movs	r0, r3
 800047c:	f003 fac7 	bl	8003a0e <HAL_TIMEx_MasterConfigSynchronization>
 8000480:	1e03      	subs	r3, r0, #0
 8000482:	d001      	beq.n	8000488 <MX_TIM2_Init+0x7c>
		Error_Handler();
 8000484:	f000 f8bc 	bl	8000600 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000488:	003b      	movs	r3, r7
 800048a:	2260      	movs	r2, #96	; 0x60
 800048c:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 10;
 800048e:	003b      	movs	r3, r7
 8000490:	220a      	movs	r2, #10
 8000492:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000494:	003b      	movs	r3, r7
 8000496:	2200      	movs	r2, #0
 8000498:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800049a:	003b      	movs	r3, r7
 800049c:	2200      	movs	r2, #0
 800049e:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80004a0:	0039      	movs	r1, r7
 80004a2:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <MX_TIM2_Init+0xb8>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	0018      	movs	r0, r3
 80004a8:	f003 f87e 	bl	80035a8 <HAL_TIM_PWM_ConfigChannel>
 80004ac:	1e03      	subs	r3, r0, #0
 80004ae:	d001      	beq.n	80004b4 <MX_TIM2_Init+0xa8>
		Error_Handler();
 80004b0:	f000 f8a6 	bl	8000600 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80004b4:	4b03      	ldr	r3, [pc, #12]	; (80004c4 <MX_TIM2_Init+0xb8>)
 80004b6:	0018      	movs	r0, r3
 80004b8:	f000 f8e0 	bl	800067c <HAL_TIM_MspPostInit>

}
 80004bc:	46c0      	nop			; (mov r8, r8)
 80004be:	46bd      	mov	sp, r7
 80004c0:	b006      	add	sp, #24
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	200003fc 	.word	0x200003fc

080004c8 <MX_TIM22_Init>:
/**
 * @brief TIM22 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM22_Init(void) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM22_Init 0 */

	/* USER CODE END TIM22_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80004ce:	2310      	movs	r3, #16
 80004d0:	18fb      	adds	r3, r7, r3
 80004d2:	0018      	movs	r0, r3
 80004d4:	2308      	movs	r3, #8
 80004d6:	001a      	movs	r2, r3
 80004d8:	2100      	movs	r1, #0
 80004da:	f007 fd87 	bl	8007fec <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80004de:	003b      	movs	r3, r7
 80004e0:	0018      	movs	r0, r3
 80004e2:	2310      	movs	r3, #16
 80004e4:	001a      	movs	r2, r3
 80004e6:	2100      	movs	r1, #0
 80004e8:	f007 fd80 	bl	8007fec <memset>

	/* USER CODE BEGIN TIM22_Init 1 */

	/* USER CODE END TIM22_Init 1 */
	htim22.Instance = TIM22;
 80004ec:	4b24      	ldr	r3, [pc, #144]	; (8000580 <MX_TIM22_Init+0xb8>)
 80004ee:	4a25      	ldr	r2, [pc, #148]	; (8000584 <MX_TIM22_Init+0xbc>)
 80004f0:	601a      	str	r2, [r3, #0]
	htim22.Init.Prescaler = 32;
 80004f2:	4b23      	ldr	r3, [pc, #140]	; (8000580 <MX_TIM22_Init+0xb8>)
 80004f4:	2220      	movs	r2, #32
 80004f6:	605a      	str	r2, [r3, #4]
	htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f8:	4b21      	ldr	r3, [pc, #132]	; (8000580 <MX_TIM22_Init+0xb8>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
	htim22.Init.Period = 100;
 80004fe:	4b20      	ldr	r3, [pc, #128]	; (8000580 <MX_TIM22_Init+0xb8>)
 8000500:	2264      	movs	r2, #100	; 0x64
 8000502:	60da      	str	r2, [r3, #12]
	htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000504:	4b1e      	ldr	r3, [pc, #120]	; (8000580 <MX_TIM22_Init+0xb8>)
 8000506:	2200      	movs	r2, #0
 8000508:	611a      	str	r2, [r3, #16]
	htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800050a:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <MX_TIM22_Init+0xb8>)
 800050c:	2200      	movs	r2, #0
 800050e:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_PWM_Init(&htim22) != HAL_OK) {
 8000510:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <MX_TIM22_Init+0xb8>)
 8000512:	0018      	movs	r0, r3
 8000514:	f002 fffa 	bl	800350c <HAL_TIM_PWM_Init>
 8000518:	1e03      	subs	r3, r0, #0
 800051a:	d001      	beq.n	8000520 <MX_TIM22_Init+0x58>
		Error_Handler();
 800051c:	f000 f870 	bl	8000600 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000520:	2110      	movs	r1, #16
 8000522:	187b      	adds	r3, r7, r1
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000528:	187b      	adds	r3, r7, r1
 800052a:	2200      	movs	r2, #0
 800052c:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK) {
 800052e:	187a      	adds	r2, r7, r1
 8000530:	4b13      	ldr	r3, [pc, #76]	; (8000580 <MX_TIM22_Init+0xb8>)
 8000532:	0011      	movs	r1, r2
 8000534:	0018      	movs	r0, r3
 8000536:	f003 fa6a 	bl	8003a0e <HAL_TIMEx_MasterConfigSynchronization>
 800053a:	1e03      	subs	r3, r0, #0
 800053c:	d001      	beq.n	8000542 <MX_TIM22_Init+0x7a>
		Error_Handler();
 800053e:	f000 f85f 	bl	8000600 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000542:	003b      	movs	r3, r7
 8000544:	2260      	movs	r2, #96	; 0x60
 8000546:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 10;
 8000548:	003b      	movs	r3, r7
 800054a:	220a      	movs	r2, #10
 800054c:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800054e:	003b      	movs	r3, r7
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000554:	003b      	movs	r3, r7
 8000556:	2200      	movs	r2, #0
 8000558:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 800055a:	0039      	movs	r1, r7
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <MX_TIM22_Init+0xb8>)
 800055e:	2200      	movs	r2, #0
 8000560:	0018      	movs	r0, r3
 8000562:	f003 f821 	bl	80035a8 <HAL_TIM_PWM_ConfigChannel>
 8000566:	1e03      	subs	r3, r0, #0
 8000568:	d001      	beq.n	800056e <MX_TIM22_Init+0xa6>
		Error_Handler();
 800056a:	f000 f849 	bl	8000600 <Error_Handler>
	}
	/* USER CODE BEGIN TIM22_Init 2 */

	/* USER CODE END TIM22_Init 2 */
	HAL_TIM_MspPostInit(&htim22);
 800056e:	4b04      	ldr	r3, [pc, #16]	; (8000580 <MX_TIM22_Init+0xb8>)
 8000570:	0018      	movs	r0, r3
 8000572:	f000 f883 	bl	800067c <HAL_TIM_MspPostInit>

}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	46bd      	mov	sp, r7
 800057a:	b006      	add	sp, #24
 800057c:	bd80      	pop	{r7, pc}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	200003c0 	.word	0x200003c0
 8000584:	40011400 	.word	0x40011400

08000588 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000588:	b590      	push	{r4, r7, lr}
 800058a:	b089      	sub	sp, #36	; 0x24
 800058c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800058e:	240c      	movs	r4, #12
 8000590:	193b      	adds	r3, r7, r4
 8000592:	0018      	movs	r0, r3
 8000594:	2314      	movs	r3, #20
 8000596:	001a      	movs	r2, r3
 8000598:	2100      	movs	r1, #0
 800059a:	f007 fd27 	bl	8007fec <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800059e:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <MX_GPIO_Init+0x6c>)
 80005a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005a2:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <MX_GPIO_Init+0x6c>)
 80005a4:	2101      	movs	r1, #1
 80005a6:	430a      	orrs	r2, r1
 80005a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80005aa:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <MX_GPIO_Init+0x6c>)
 80005ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005ae:	2201      	movs	r2, #1
 80005b0:	4013      	ands	r3, r2
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <MX_GPIO_Init+0x6c>)
 80005b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <MX_GPIO_Init+0x6c>)
 80005bc:	2102      	movs	r1, #2
 80005be:	430a      	orrs	r2, r1
 80005c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <MX_GPIO_Init+0x6c>)
 80005c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005c6:	2202      	movs	r2, #2
 80005c8:	4013      	ands	r3, r2
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pins : IN1_Pin IN2_Pin IN3_Pin IN4_Pin */
	GPIO_InitStruct.Pin = IN1_Pin | IN2_Pin | IN3_Pin | IN4_Pin;
 80005ce:	193b      	adds	r3, r7, r4
 80005d0:	4a09      	ldr	r2, [pc, #36]	; (80005f8 <MX_GPIO_Init+0x70>)
 80005d2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d4:	193b      	adds	r3, r7, r4
 80005d6:	2200      	movs	r2, #0
 80005d8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	193b      	adds	r3, r7, r4
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e0:	193b      	adds	r3, r7, r4
 80005e2:	4a06      	ldr	r2, [pc, #24]	; (80005fc <MX_GPIO_Init+0x74>)
 80005e4:	0019      	movs	r1, r3
 80005e6:	0010      	movs	r0, r2
 80005e8:	f000 fa88 	bl	8000afc <HAL_GPIO_Init>

}
 80005ec:	46c0      	nop			; (mov r8, r8)
 80005ee:	46bd      	mov	sp, r7
 80005f0:	b009      	add	sp, #36	; 0x24
 80005f2:	bd90      	pop	{r4, r7, pc}
 80005f4:	40021000 	.word	0x40021000
 80005f8:	00000407 	.word	0x00000407
 80005fc:	50000400 	.word	0x50000400

08000600 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000604:	46c0      	nop			; (mov r8, r8)
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000610:	4b07      	ldr	r3, [pc, #28]	; (8000630 <HAL_MspInit+0x24>)
 8000612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <HAL_MspInit+0x24>)
 8000616:	2101      	movs	r1, #1
 8000618:	430a      	orrs	r2, r1
 800061a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	4b04      	ldr	r3, [pc, #16]	; (8000630 <HAL_MspInit+0x24>)
 800061e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000620:	4b03      	ldr	r3, [pc, #12]	; (8000630 <HAL_MspInit+0x24>)
 8000622:	2180      	movs	r1, #128	; 0x80
 8000624:	0549      	lsls	r1, r1, #21
 8000626:	430a      	orrs	r2, r1
 8000628:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40021000 	.word	0x40021000

08000634 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	2380      	movs	r3, #128	; 0x80
 8000642:	05db      	lsls	r3, r3, #23
 8000644:	429a      	cmp	r2, r3
 8000646:	d106      	bne.n	8000656 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000648:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <HAL_TIM_PWM_MspInit+0x40>)
 800064a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800064c:	4b09      	ldr	r3, [pc, #36]	; (8000674 <HAL_TIM_PWM_MspInit+0x40>)
 800064e:	2101      	movs	r1, #1
 8000650:	430a      	orrs	r2, r1
 8000652:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 8000654:	e00a      	b.n	800066c <HAL_TIM_PWM_MspInit+0x38>
  else if(htim_pwm->Instance==TIM22)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a07      	ldr	r2, [pc, #28]	; (8000678 <HAL_TIM_PWM_MspInit+0x44>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d105      	bne.n	800066c <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <HAL_TIM_PWM_MspInit+0x40>)
 8000662:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000664:	4b03      	ldr	r3, [pc, #12]	; (8000674 <HAL_TIM_PWM_MspInit+0x40>)
 8000666:	2120      	movs	r1, #32
 8000668:	430a      	orrs	r2, r1
 800066a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800066c:	46c0      	nop			; (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	b002      	add	sp, #8
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40021000 	.word	0x40021000
 8000678:	40011400 	.word	0x40011400

0800067c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	2314      	movs	r3, #20
 8000686:	18fb      	adds	r3, r7, r3
 8000688:	0018      	movs	r0, r3
 800068a:	2314      	movs	r3, #20
 800068c:	001a      	movs	r2, r3
 800068e:	2100      	movs	r1, #0
 8000690:	f007 fcac 	bl	8007fec <memset>
  if(htim->Instance==TIM2)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	05db      	lsls	r3, r3, #23
 800069c:	429a      	cmp	r2, r3
 800069e:	d123      	bne.n	80006e8 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a0:	4b27      	ldr	r3, [pc, #156]	; (8000740 <HAL_TIM_MspPostInit+0xc4>)
 80006a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006a4:	4b26      	ldr	r3, [pc, #152]	; (8000740 <HAL_TIM_MspPostInit+0xc4>)
 80006a6:	2101      	movs	r1, #1
 80006a8:	430a      	orrs	r2, r1
 80006aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80006ac:	4b24      	ldr	r3, [pc, #144]	; (8000740 <HAL_TIM_MspPostInit+0xc4>)
 80006ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b0:	2201      	movs	r2, #1
 80006b2:	4013      	ands	r3, r2
 80006b4:	613b      	str	r3, [r7, #16]
 80006b6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006b8:	2114      	movs	r1, #20
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2220      	movs	r2, #32
 80006be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2202      	movs	r2, #2
 80006c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2205      	movs	r2, #5
 80006d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d8:	187a      	adds	r2, r7, r1
 80006da:	23a0      	movs	r3, #160	; 0xa0
 80006dc:	05db      	lsls	r3, r3, #23
 80006de:	0011      	movs	r1, r2
 80006e0:	0018      	movs	r0, r3
 80006e2:	f000 fa0b 	bl	8000afc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM22_MspPostInit 1 */

  /* USER CODE END TIM22_MspPostInit 1 */
  }

}
 80006e6:	e026      	b.n	8000736 <HAL_TIM_MspPostInit+0xba>
  else if(htim->Instance==TIM22)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a15      	ldr	r2, [pc, #84]	; (8000744 <HAL_TIM_MspPostInit+0xc8>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d121      	bne.n	8000736 <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	4b13      	ldr	r3, [pc, #76]	; (8000740 <HAL_TIM_MspPostInit+0xc4>)
 80006f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006f6:	4b12      	ldr	r3, [pc, #72]	; (8000740 <HAL_TIM_MspPostInit+0xc4>)
 80006f8:	2102      	movs	r1, #2
 80006fa:	430a      	orrs	r2, r1
 80006fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80006fe:	4b10      	ldr	r3, [pc, #64]	; (8000740 <HAL_TIM_MspPostInit+0xc4>)
 8000700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000702:	2202      	movs	r2, #2
 8000704:	4013      	ands	r3, r2
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800070a:	2114      	movs	r1, #20
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2210      	movs	r2, #16
 8000710:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2202      	movs	r2, #2
 8000716:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2200      	movs	r2, #0
 8000722:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM22;
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2204      	movs	r2, #4
 8000728:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072a:	187b      	adds	r3, r7, r1
 800072c:	4a06      	ldr	r2, [pc, #24]	; (8000748 <HAL_TIM_MspPostInit+0xcc>)
 800072e:	0019      	movs	r1, r3
 8000730:	0010      	movs	r0, r2
 8000732:	f000 f9e3 	bl	8000afc <HAL_GPIO_Init>
}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	46bd      	mov	sp, r7
 800073a:	b00a      	add	sp, #40	; 0x28
 800073c:	bd80      	pop	{r7, pc}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	40021000 	.word	0x40021000
 8000744:	40011400 	.word	0x40011400
 8000748:	50000400 	.word	0x50000400

0800074c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800075a:	e7fe      	b.n	800075a <HardFault_Handler+0x4>

0800075c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000774:	f000 f8cc 	bl	8000910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000784:	4b03      	ldr	r3, [pc, #12]	; (8000794 <USB_IRQHandler+0x14>)
 8000786:	0018      	movs	r0, r3
 8000788:	f000 fc82 	bl	8001090 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	200010a8 	.word	0x200010a8

08000798 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800079c:	4b17      	ldr	r3, [pc, #92]	; (80007fc <SystemInit+0x64>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4b16      	ldr	r3, [pc, #88]	; (80007fc <SystemInit+0x64>)
 80007a2:	2180      	movs	r1, #128	; 0x80
 80007a4:	0049      	lsls	r1, r1, #1
 80007a6:	430a      	orrs	r2, r1
 80007a8:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <SystemInit+0x64>)
 80007ac:	68da      	ldr	r2, [r3, #12]
 80007ae:	4b13      	ldr	r3, [pc, #76]	; (80007fc <SystemInit+0x64>)
 80007b0:	4913      	ldr	r1, [pc, #76]	; (8000800 <SystemInit+0x68>)
 80007b2:	400a      	ands	r2, r1
 80007b4:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <SystemInit+0x64>)
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <SystemInit+0x64>)
 80007bc:	4911      	ldr	r1, [pc, #68]	; (8000804 <SystemInit+0x6c>)
 80007be:	400a      	ands	r2, r1
 80007c0:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <SystemInit+0x64>)
 80007c4:	689a      	ldr	r2, [r3, #8]
 80007c6:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <SystemInit+0x64>)
 80007c8:	2101      	movs	r1, #1
 80007ca:	438a      	bics	r2, r1
 80007cc:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <SystemInit+0x64>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <SystemInit+0x64>)
 80007d4:	490c      	ldr	r1, [pc, #48]	; (8000808 <SystemInit+0x70>)
 80007d6:	400a      	ands	r2, r1
 80007d8:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <SystemInit+0x64>)
 80007dc:	68da      	ldr	r2, [r3, #12]
 80007de:	4b07      	ldr	r3, [pc, #28]	; (80007fc <SystemInit+0x64>)
 80007e0:	490a      	ldr	r1, [pc, #40]	; (800080c <SystemInit+0x74>)
 80007e2:	400a      	ands	r2, r1
 80007e4:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80007e6:	4b05      	ldr	r3, [pc, #20]	; (80007fc <SystemInit+0x64>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <SystemInit+0x78>)
 80007ee:	2280      	movs	r2, #128	; 0x80
 80007f0:	0512      	lsls	r2, r2, #20
 80007f2:	609a      	str	r2, [r3, #8]
#endif
}
 80007f4:	46c0      	nop			; (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	40021000 	.word	0x40021000
 8000800:	88ff400c 	.word	0x88ff400c
 8000804:	fef6fff6 	.word	0xfef6fff6
 8000808:	fffbffff 	.word	0xfffbffff
 800080c:	ff02ffff 	.word	0xff02ffff
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000814:	480d      	ldr	r0, [pc, #52]	; (800084c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000816:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000818:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800081a:	e003      	b.n	8000824 <LoopCopyDataInit>

0800081c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800081e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000820:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000822:	3104      	adds	r1, #4

08000824 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000824:	480b      	ldr	r0, [pc, #44]	; (8000854 <LoopForever+0xa>)
  ldr  r3, =_edata
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <LoopForever+0xe>)
  adds  r2, r0, r1
 8000828:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800082a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800082c:	d3f6      	bcc.n	800081c <CopyDataInit>
  ldr  r2, =_sbss
 800082e:	4a0b      	ldr	r2, [pc, #44]	; (800085c <LoopForever+0x12>)
  b  LoopFillZerobss
 8000830:	e002      	b.n	8000838 <LoopFillZerobss>

08000832 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000832:	2300      	movs	r3, #0
  str  r3, [r2]
 8000834:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000836:	3204      	adds	r2, #4

08000838 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <LoopForever+0x16>)
  cmp  r2, r3
 800083a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800083c:	d3f9      	bcc.n	8000832 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800083e:	f7ff ffab 	bl	8000798 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000842:	f007 fbaf 	bl	8007fa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000846:	f7ff fd43 	bl	80002d0 <main>

0800084a <LoopForever>:

LoopForever:
    b LoopForever
 800084a:	e7fe      	b.n	800084a <LoopForever>
  ldr   r0, =_estack
 800084c:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8000850:	08008170 	.word	0x08008170
  ldr  r0, =_sdata
 8000854:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000858:	20000180 	.word	0x20000180
  ldr  r2, =_sbss
 800085c:	20000180 	.word	0x20000180
  ldr  r3, = _ebss
 8000860:	2000139c 	.word	0x2000139c

08000864 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000864:	e7fe      	b.n	8000864 <ADC1_COMP_IRQHandler>
	...

08000868 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800086e:	1dfb      	adds	r3, r7, #7
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000874:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <HAL_Init+0x3c>)
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <HAL_Init+0x3c>)
 800087a:	2140      	movs	r1, #64	; 0x40
 800087c:	430a      	orrs	r2, r1
 800087e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000880:	2000      	movs	r0, #0
 8000882:	f000 f811 	bl	80008a8 <HAL_InitTick>
 8000886:	1e03      	subs	r3, r0, #0
 8000888:	d003      	beq.n	8000892 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800088a:	1dfb      	adds	r3, r7, #7
 800088c:	2201      	movs	r2, #1
 800088e:	701a      	strb	r2, [r3, #0]
 8000890:	e001      	b.n	8000896 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000892:	f7ff febb 	bl	800060c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000896:	1dfb      	adds	r3, r7, #7
 8000898:	781b      	ldrb	r3, [r3, #0]
}
 800089a:	0018      	movs	r0, r3
 800089c:	46bd      	mov	sp, r7
 800089e:	b002      	add	sp, #8
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	40022000 	.word	0x40022000

080008a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <HAL_InitTick+0x5c>)
 80008b2:	681c      	ldr	r4, [r3, #0]
 80008b4:	4b14      	ldr	r3, [pc, #80]	; (8000908 <HAL_InitTick+0x60>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	0019      	movs	r1, r3
 80008ba:	23fa      	movs	r3, #250	; 0xfa
 80008bc:	0098      	lsls	r0, r3, #2
 80008be:	f7ff fc23 	bl	8000108 <__udivsi3>
 80008c2:	0003      	movs	r3, r0
 80008c4:	0019      	movs	r1, r3
 80008c6:	0020      	movs	r0, r4
 80008c8:	f7ff fc1e 	bl	8000108 <__udivsi3>
 80008cc:	0003      	movs	r3, r0
 80008ce:	0018      	movs	r0, r3
 80008d0:	f000 f907 	bl	8000ae2 <HAL_SYSTICK_Config>
 80008d4:	1e03      	subs	r3, r0, #0
 80008d6:	d001      	beq.n	80008dc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008d8:	2301      	movs	r3, #1
 80008da:	e00f      	b.n	80008fc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2b03      	cmp	r3, #3
 80008e0:	d80b      	bhi.n	80008fa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e2:	6879      	ldr	r1, [r7, #4]
 80008e4:	2301      	movs	r3, #1
 80008e6:	425b      	negs	r3, r3
 80008e8:	2200      	movs	r2, #0
 80008ea:	0018      	movs	r0, r3
 80008ec:	f000 f8d4 	bl	8000a98 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_InitTick+0x64>)
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008f6:	2300      	movs	r3, #0
 80008f8:	e000      	b.n	80008fc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
}
 80008fc:	0018      	movs	r0, r3
 80008fe:	46bd      	mov	sp, r7
 8000900:	b003      	add	sp, #12
 8000902:	bd90      	pop	{r4, r7, pc}
 8000904:	20000004 	.word	0x20000004
 8000908:	2000000c 	.word	0x2000000c
 800090c:	20000008 	.word	0x20000008

08000910 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <HAL_IncTick+0x1c>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	001a      	movs	r2, r3
 800091a:	4b05      	ldr	r3, [pc, #20]	; (8000930 <HAL_IncTick+0x20>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	18d2      	adds	r2, r2, r3
 8000920:	4b03      	ldr	r3, [pc, #12]	; (8000930 <HAL_IncTick+0x20>)
 8000922:	601a      	str	r2, [r3, #0]
}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	2000000c 	.word	0x2000000c
 8000930:	20000438 	.word	0x20000438

08000934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  return uwTick;
 8000938:	4b02      	ldr	r3, [pc, #8]	; (8000944 <HAL_GetTick+0x10>)
 800093a:	681b      	ldr	r3, [r3, #0]
}
 800093c:	0018      	movs	r0, r3
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	20000438 	.word	0x20000438

08000948 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	0002      	movs	r2, r0
 8000950:	1dfb      	adds	r3, r7, #7
 8000952:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000954:	1dfb      	adds	r3, r7, #7
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	001a      	movs	r2, r3
 800095a:	231f      	movs	r3, #31
 800095c:	401a      	ands	r2, r3
 800095e:	4b04      	ldr	r3, [pc, #16]	; (8000970 <NVIC_EnableIRQ+0x28>)
 8000960:	2101      	movs	r1, #1
 8000962:	4091      	lsls	r1, r2
 8000964:	000a      	movs	r2, r1
 8000966:	601a      	str	r2, [r3, #0]
}
 8000968:	46c0      	nop			; (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	b002      	add	sp, #8
 800096e:	bd80      	pop	{r7, pc}
 8000970:	e000e100 	.word	0xe000e100

08000974 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000974:	b590      	push	{r4, r7, lr}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	0002      	movs	r2, r0
 800097c:	6039      	str	r1, [r7, #0]
 800097e:	1dfb      	adds	r3, r7, #7
 8000980:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000982:	1dfb      	adds	r3, r7, #7
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b7f      	cmp	r3, #127	; 0x7f
 8000988:	d932      	bls.n	80009f0 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800098a:	4a2f      	ldr	r2, [pc, #188]	; (8000a48 <NVIC_SetPriority+0xd4>)
 800098c:	1dfb      	adds	r3, r7, #7
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	0019      	movs	r1, r3
 8000992:	230f      	movs	r3, #15
 8000994:	400b      	ands	r3, r1
 8000996:	3b08      	subs	r3, #8
 8000998:	089b      	lsrs	r3, r3, #2
 800099a:	3306      	adds	r3, #6
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	18d3      	adds	r3, r2, r3
 80009a0:	3304      	adds	r3, #4
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	1dfa      	adds	r2, r7, #7
 80009a6:	7812      	ldrb	r2, [r2, #0]
 80009a8:	0011      	movs	r1, r2
 80009aa:	2203      	movs	r2, #3
 80009ac:	400a      	ands	r2, r1
 80009ae:	00d2      	lsls	r2, r2, #3
 80009b0:	21ff      	movs	r1, #255	; 0xff
 80009b2:	4091      	lsls	r1, r2
 80009b4:	000a      	movs	r2, r1
 80009b6:	43d2      	mvns	r2, r2
 80009b8:	401a      	ands	r2, r3
 80009ba:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	019b      	lsls	r3, r3, #6
 80009c0:	22ff      	movs	r2, #255	; 0xff
 80009c2:	401a      	ands	r2, r3
 80009c4:	1dfb      	adds	r3, r7, #7
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	0018      	movs	r0, r3
 80009ca:	2303      	movs	r3, #3
 80009cc:	4003      	ands	r3, r0
 80009ce:	00db      	lsls	r3, r3, #3
 80009d0:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009d2:	481d      	ldr	r0, [pc, #116]	; (8000a48 <NVIC_SetPriority+0xd4>)
 80009d4:	1dfb      	adds	r3, r7, #7
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	001c      	movs	r4, r3
 80009da:	230f      	movs	r3, #15
 80009dc:	4023      	ands	r3, r4
 80009de:	3b08      	subs	r3, #8
 80009e0:	089b      	lsrs	r3, r3, #2
 80009e2:	430a      	orrs	r2, r1
 80009e4:	3306      	adds	r3, #6
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	18c3      	adds	r3, r0, r3
 80009ea:	3304      	adds	r3, #4
 80009ec:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009ee:	e027      	b.n	8000a40 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009f0:	4a16      	ldr	r2, [pc, #88]	; (8000a4c <NVIC_SetPriority+0xd8>)
 80009f2:	1dfb      	adds	r3, r7, #7
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	b25b      	sxtb	r3, r3
 80009f8:	089b      	lsrs	r3, r3, #2
 80009fa:	33c0      	adds	r3, #192	; 0xc0
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	589b      	ldr	r3, [r3, r2]
 8000a00:	1dfa      	adds	r2, r7, #7
 8000a02:	7812      	ldrb	r2, [r2, #0]
 8000a04:	0011      	movs	r1, r2
 8000a06:	2203      	movs	r2, #3
 8000a08:	400a      	ands	r2, r1
 8000a0a:	00d2      	lsls	r2, r2, #3
 8000a0c:	21ff      	movs	r1, #255	; 0xff
 8000a0e:	4091      	lsls	r1, r2
 8000a10:	000a      	movs	r2, r1
 8000a12:	43d2      	mvns	r2, r2
 8000a14:	401a      	ands	r2, r3
 8000a16:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	019b      	lsls	r3, r3, #6
 8000a1c:	22ff      	movs	r2, #255	; 0xff
 8000a1e:	401a      	ands	r2, r3
 8000a20:	1dfb      	adds	r3, r7, #7
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	0018      	movs	r0, r3
 8000a26:	2303      	movs	r3, #3
 8000a28:	4003      	ands	r3, r0
 8000a2a:	00db      	lsls	r3, r3, #3
 8000a2c:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a2e:	4807      	ldr	r0, [pc, #28]	; (8000a4c <NVIC_SetPriority+0xd8>)
 8000a30:	1dfb      	adds	r3, r7, #7
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	b25b      	sxtb	r3, r3
 8000a36:	089b      	lsrs	r3, r3, #2
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	33c0      	adds	r3, #192	; 0xc0
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	501a      	str	r2, [r3, r0]
}
 8000a40:	46c0      	nop			; (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	b003      	add	sp, #12
 8000a46:	bd90      	pop	{r4, r7, pc}
 8000a48:	e000ed00 	.word	0xe000ed00
 8000a4c:	e000e100 	.word	0xe000e100

08000a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	4a0c      	ldr	r2, [pc, #48]	; (8000a90 <SysTick_Config+0x40>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d901      	bls.n	8000a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a62:	2301      	movs	r3, #1
 8000a64:	e010      	b.n	8000a88 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <SysTick_Config+0x44>)
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	3a01      	subs	r2, #1
 8000a6c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a6e:	2301      	movs	r3, #1
 8000a70:	425b      	negs	r3, r3
 8000a72:	2103      	movs	r1, #3
 8000a74:	0018      	movs	r0, r3
 8000a76:	f7ff ff7d 	bl	8000974 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <SysTick_Config+0x44>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a80:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <SysTick_Config+0x44>)
 8000a82:	2207      	movs	r2, #7
 8000a84:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a86:	2300      	movs	r3, #0
}
 8000a88:	0018      	movs	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	b002      	add	sp, #8
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	00ffffff 	.word	0x00ffffff
 8000a94:	e000e010 	.word	0xe000e010

08000a98 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60b9      	str	r1, [r7, #8]
 8000aa0:	607a      	str	r2, [r7, #4]
 8000aa2:	210f      	movs	r1, #15
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	1c02      	adds	r2, r0, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	b25b      	sxtb	r3, r3
 8000ab2:	0011      	movs	r1, r2
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f7ff ff5d 	bl	8000974 <NVIC_SetPriority>
}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	46bd      	mov	sp, r7
 8000abe:	b004      	add	sp, #16
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b082      	sub	sp, #8
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	0002      	movs	r2, r0
 8000aca:	1dfb      	adds	r3, r7, #7
 8000acc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ace:	1dfb      	adds	r3, r7, #7
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	b25b      	sxtb	r3, r3
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f7ff ff37 	bl	8000948 <NVIC_EnableIRQ>
}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b002      	add	sp, #8
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b082      	sub	sp, #8
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	0018      	movs	r0, r3
 8000aee:	f7ff ffaf 	bl	8000a50 <SysTick_Config>
 8000af2:	0003      	movs	r3, r0
}
 8000af4:	0018      	movs	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	b002      	add	sp, #8
 8000afa:	bd80      	pop	{r7, pc}

08000afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000b12:	e14f      	b.n	8000db4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2101      	movs	r1, #1
 8000b1a:	697a      	ldr	r2, [r7, #20]
 8000b1c:	4091      	lsls	r1, r2
 8000b1e:	000a      	movs	r2, r1
 8000b20:	4013      	ands	r3, r2
 8000b22:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d100      	bne.n	8000b2c <HAL_GPIO_Init+0x30>
 8000b2a:	e140      	b.n	8000dae <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d00b      	beq.n	8000b4c <HAL_GPIO_Init+0x50>
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d007      	beq.n	8000b4c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b40:	2b11      	cmp	r3, #17
 8000b42:	d003      	beq.n	8000b4c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	2b12      	cmp	r3, #18
 8000b4a:	d130      	bne.n	8000bae <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	2203      	movs	r2, #3
 8000b58:	409a      	lsls	r2, r3
 8000b5a:	0013      	movs	r3, r2
 8000b5c:	43da      	mvns	r2, r3
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	4013      	ands	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	68da      	ldr	r2, [r3, #12]
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	409a      	lsls	r2, r3
 8000b6e:	0013      	movs	r3, r2
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b82:	2201      	movs	r2, #1
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	409a      	lsls	r2, r3
 8000b88:	0013      	movs	r3, r2
 8000b8a:	43da      	mvns	r2, r3
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	091b      	lsrs	r3, r3, #4
 8000b98:	2201      	movs	r2, #1
 8000b9a:	401a      	ands	r2, r3
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	409a      	lsls	r2, r3
 8000ba0:	0013      	movs	r3, r2
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	68db      	ldr	r3, [r3, #12]
 8000bb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	2203      	movs	r2, #3
 8000bba:	409a      	lsls	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	43da      	mvns	r2, r3
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	689a      	ldr	r2, [r3, #8]
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	409a      	lsls	r2, r3
 8000bd0:	0013      	movs	r3, r2
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	d003      	beq.n	8000bee <HAL_GPIO_Init+0xf2>
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	2b12      	cmp	r3, #18
 8000bec:	d123      	bne.n	8000c36 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	08da      	lsrs	r2, r3, #3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	3208      	adds	r2, #8
 8000bf6:	0092      	lsls	r2, r2, #2
 8000bf8:	58d3      	ldr	r3, [r2, r3]
 8000bfa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	2207      	movs	r2, #7
 8000c00:	4013      	ands	r3, r2
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	220f      	movs	r2, #15
 8000c06:	409a      	lsls	r2, r3
 8000c08:	0013      	movs	r3, r2
 8000c0a:	43da      	mvns	r2, r3
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	691a      	ldr	r2, [r3, #16]
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	2107      	movs	r1, #7
 8000c1a:	400b      	ands	r3, r1
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	409a      	lsls	r2, r3
 8000c20:	0013      	movs	r3, r2
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	08da      	lsrs	r2, r3, #3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3208      	adds	r2, #8
 8000c30:	0092      	lsls	r2, r2, #2
 8000c32:	6939      	ldr	r1, [r7, #16]
 8000c34:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	2203      	movs	r2, #3
 8000c42:	409a      	lsls	r2, r3
 8000c44:	0013      	movs	r3, r2
 8000c46:	43da      	mvns	r2, r3
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	2203      	movs	r2, #3
 8000c54:	401a      	ands	r2, r3
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	409a      	lsls	r2, r3
 8000c5c:	0013      	movs	r3, r2
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685a      	ldr	r2, [r3, #4]
 8000c6e:	2380      	movs	r3, #128	; 0x80
 8000c70:	055b      	lsls	r3, r3, #21
 8000c72:	4013      	ands	r3, r2
 8000c74:	d100      	bne.n	8000c78 <HAL_GPIO_Init+0x17c>
 8000c76:	e09a      	b.n	8000dae <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c78:	4b54      	ldr	r3, [pc, #336]	; (8000dcc <HAL_GPIO_Init+0x2d0>)
 8000c7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c7c:	4b53      	ldr	r3, [pc, #332]	; (8000dcc <HAL_GPIO_Init+0x2d0>)
 8000c7e:	2101      	movs	r1, #1
 8000c80:	430a      	orrs	r2, r1
 8000c82:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c84:	4a52      	ldr	r2, [pc, #328]	; (8000dd0 <HAL_GPIO_Init+0x2d4>)
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	089b      	lsrs	r3, r3, #2
 8000c8a:	3302      	adds	r3, #2
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	589b      	ldr	r3, [r3, r2]
 8000c90:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	2203      	movs	r2, #3
 8000c96:	4013      	ands	r3, r2
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	220f      	movs	r2, #15
 8000c9c:	409a      	lsls	r2, r3
 8000c9e:	0013      	movs	r3, r2
 8000ca0:	43da      	mvns	r2, r3
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	23a0      	movs	r3, #160	; 0xa0
 8000cac:	05db      	lsls	r3, r3, #23
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d019      	beq.n	8000ce6 <HAL_GPIO_Init+0x1ea>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a47      	ldr	r2, [pc, #284]	; (8000dd4 <HAL_GPIO_Init+0x2d8>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d013      	beq.n	8000ce2 <HAL_GPIO_Init+0x1e6>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a46      	ldr	r2, [pc, #280]	; (8000dd8 <HAL_GPIO_Init+0x2dc>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d00d      	beq.n	8000cde <HAL_GPIO_Init+0x1e2>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a45      	ldr	r2, [pc, #276]	; (8000ddc <HAL_GPIO_Init+0x2e0>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d007      	beq.n	8000cda <HAL_GPIO_Init+0x1de>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a44      	ldr	r2, [pc, #272]	; (8000de0 <HAL_GPIO_Init+0x2e4>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d101      	bne.n	8000cd6 <HAL_GPIO_Init+0x1da>
 8000cd2:	2305      	movs	r3, #5
 8000cd4:	e008      	b.n	8000ce8 <HAL_GPIO_Init+0x1ec>
 8000cd6:	2306      	movs	r3, #6
 8000cd8:	e006      	b.n	8000ce8 <HAL_GPIO_Init+0x1ec>
 8000cda:	2303      	movs	r3, #3
 8000cdc:	e004      	b.n	8000ce8 <HAL_GPIO_Init+0x1ec>
 8000cde:	2302      	movs	r3, #2
 8000ce0:	e002      	b.n	8000ce8 <HAL_GPIO_Init+0x1ec>
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e000      	b.n	8000ce8 <HAL_GPIO_Init+0x1ec>
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	697a      	ldr	r2, [r7, #20]
 8000cea:	2103      	movs	r1, #3
 8000cec:	400a      	ands	r2, r1
 8000cee:	0092      	lsls	r2, r2, #2
 8000cf0:	4093      	lsls	r3, r2
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cf8:	4935      	ldr	r1, [pc, #212]	; (8000dd0 <HAL_GPIO_Init+0x2d4>)
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	089b      	lsrs	r3, r3, #2
 8000cfe:	3302      	adds	r3, #2
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d06:	4b37      	ldr	r3, [pc, #220]	; (8000de4 <HAL_GPIO_Init+0x2e8>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	4013      	ands	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	2380      	movs	r3, #128	; 0x80
 8000d1c:	025b      	lsls	r3, r3, #9
 8000d1e:	4013      	ands	r3, r2
 8000d20:	d003      	beq.n	8000d2a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d2a:	4b2e      	ldr	r3, [pc, #184]	; (8000de4 <HAL_GPIO_Init+0x2e8>)
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000d30:	4b2c      	ldr	r3, [pc, #176]	; (8000de4 <HAL_GPIO_Init+0x2e8>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	43da      	mvns	r2, r3
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685a      	ldr	r2, [r3, #4]
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	029b      	lsls	r3, r3, #10
 8000d48:	4013      	ands	r3, r2
 8000d4a:	d003      	beq.n	8000d54 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d54:	4b23      	ldr	r3, [pc, #140]	; (8000de4 <HAL_GPIO_Init+0x2e8>)
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d5a:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <HAL_GPIO_Init+0x2e8>)
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	43da      	mvns	r2, r3
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685a      	ldr	r2, [r3, #4]
 8000d6e:	2380      	movs	r3, #128	; 0x80
 8000d70:	035b      	lsls	r3, r3, #13
 8000d72:	4013      	ands	r3, r2
 8000d74:	d003      	beq.n	8000d7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d7e:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <HAL_GPIO_Init+0x2e8>)
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d84:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <HAL_GPIO_Init+0x2e8>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	43da      	mvns	r2, r3
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685a      	ldr	r2, [r3, #4]
 8000d98:	2380      	movs	r3, #128	; 0x80
 8000d9a:	039b      	lsls	r3, r3, #14
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	d003      	beq.n	8000da8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000da8:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <HAL_GPIO_Init+0x2e8>)
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	3301      	adds	r3, #1
 8000db2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	40da      	lsrs	r2, r3
 8000dbc:	1e13      	subs	r3, r2, #0
 8000dbe:	d000      	beq.n	8000dc2 <HAL_GPIO_Init+0x2c6>
 8000dc0:	e6a8      	b.n	8000b14 <HAL_GPIO_Init+0x18>
  }
}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	b006      	add	sp, #24
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40010000 	.word	0x40010000
 8000dd4:	50000400 	.word	0x50000400
 8000dd8:	50000800 	.word	0x50000800
 8000ddc:	50000c00 	.word	0x50000c00
 8000de0:	50001c00 	.word	0x50001c00
 8000de4:	40010400 	.word	0x40010400

08000de8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	0008      	movs	r0, r1
 8000df2:	0011      	movs	r1, r2
 8000df4:	1cbb      	adds	r3, r7, #2
 8000df6:	1c02      	adds	r2, r0, #0
 8000df8:	801a      	strh	r2, [r3, #0]
 8000dfa:	1c7b      	adds	r3, r7, #1
 8000dfc:	1c0a      	adds	r2, r1, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e00:	1c7b      	adds	r3, r7, #1
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d004      	beq.n	8000e12 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e08:	1cbb      	adds	r3, r7, #2
 8000e0a:	881a      	ldrh	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000e10:	e003      	b.n	8000e1a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000e12:	1cbb      	adds	r3, r7, #2
 8000e14:	881a      	ldrh	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	b002      	add	sp, #8
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e26:	b08b      	sub	sp, #44	; 0x2c
 8000e28:	af06      	add	r7, sp, #24
 8000e2a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d101      	bne.n	8000e36 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e100      	b.n	8001038 <HAL_PCD_Init+0x214>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a81      	ldr	r2, [pc, #516]	; (8001040 <HAL_PCD_Init+0x21c>)
 8000e3a:	5c9b      	ldrb	r3, [r3, r2]
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d108      	bne.n	8000e54 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	23aa      	movs	r3, #170	; 0xaa
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	2100      	movs	r1, #0
 8000e4a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f006 fd4c 	bl	80078ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a7a      	ldr	r2, [pc, #488]	; (8001040 <HAL_PCD_Init+0x21c>)
 8000e58:	2103      	movs	r1, #3
 8000e5a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	0018      	movs	r0, r3
 8000e62:	f002 fe2d 	bl	8003ac0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e66:	230f      	movs	r3, #15
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
 8000e6e:	e058      	b.n	8000f22 <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e70:	200f      	movs	r0, #15
 8000e72:	183b      	adds	r3, r7, r0
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	1c5a      	adds	r2, r3, #1
 8000e7a:	0013      	movs	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	189b      	adds	r3, r3, r2
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	18cb      	adds	r3, r1, r3
 8000e84:	3301      	adds	r3, #1
 8000e86:	2201      	movs	r2, #1
 8000e88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e8a:	183b      	adds	r3, r7, r0
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	1c5a      	adds	r2, r3, #1
 8000e92:	0013      	movs	r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	189b      	adds	r3, r3, r2
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	183a      	adds	r2, r7, r0
 8000e9c:	7812      	ldrb	r2, [r2, #0]
 8000e9e:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000ea0:	183b      	adds	r3, r7, r0
 8000ea2:	781a      	ldrb	r2, [r3, #0]
 8000ea4:	0004      	movs	r4, r0
 8000ea6:	183b      	adds	r3, r7, r0
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	b298      	uxth	r0, r3
 8000eac:	6879      	ldr	r1, [r7, #4]
 8000eae:	0013      	movs	r3, r2
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	189b      	adds	r3, r3, r2
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	18cb      	adds	r3, r1, r3
 8000eb8:	3336      	adds	r3, #54	; 0x36
 8000eba:	1c02      	adds	r2, r0, #0
 8000ebc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ebe:	193b      	adds	r3, r7, r4
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	1c5a      	adds	r2, r3, #1
 8000ec6:	0013      	movs	r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	189b      	adds	r3, r3, r2
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	18cb      	adds	r3, r1, r3
 8000ed0:	3303      	adds	r3, #3
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ed6:	193b      	adds	r3, r7, r4
 8000ed8:	781a      	ldrb	r2, [r3, #0]
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	0013      	movs	r3, r2
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	189b      	adds	r3, r3, r2
 8000ee2:	00db      	lsls	r3, r3, #3
 8000ee4:	18cb      	adds	r3, r1, r3
 8000ee6:	3338      	adds	r3, #56	; 0x38
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000eec:	193b      	adds	r3, r7, r4
 8000eee:	781a      	ldrb	r2, [r3, #0]
 8000ef0:	6879      	ldr	r1, [r7, #4]
 8000ef2:	0013      	movs	r3, r2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	189b      	adds	r3, r3, r2
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	18cb      	adds	r3, r1, r3
 8000efc:	333c      	adds	r3, #60	; 0x3c
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f02:	193b      	adds	r3, r7, r4
 8000f04:	781a      	ldrb	r2, [r3, #0]
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	0013      	movs	r3, r2
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	189b      	adds	r3, r3, r2
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	18cb      	adds	r3, r1, r3
 8000f12:	3340      	adds	r3, #64	; 0x40
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f18:	193b      	adds	r3, r7, r4
 8000f1a:	781a      	ldrb	r2, [r3, #0]
 8000f1c:	193b      	adds	r3, r7, r4
 8000f1e:	3201      	adds	r2, #1
 8000f20:	701a      	strb	r2, [r3, #0]
 8000f22:	230f      	movs	r3, #15
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	781a      	ldrb	r2, [r3, #0]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d39f      	bcc.n	8000e70 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f30:	230f      	movs	r3, #15
 8000f32:	18fb      	adds	r3, r7, r3
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]
 8000f38:	e056      	b.n	8000fe8 <HAL_PCD_Init+0x1c4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f3a:	240f      	movs	r4, #15
 8000f3c:	193b      	adds	r3, r7, r4
 8000f3e:	781a      	ldrb	r2, [r3, #0]
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	236a      	movs	r3, #106	; 0x6a
 8000f44:	33ff      	adds	r3, #255	; 0xff
 8000f46:	0019      	movs	r1, r3
 8000f48:	0013      	movs	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	189b      	adds	r3, r3, r2
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	18c3      	adds	r3, r0, r3
 8000f52:	185b      	adds	r3, r3, r1
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f58:	193b      	adds	r3, r7, r4
 8000f5a:	781a      	ldrb	r2, [r3, #0]
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	23b4      	movs	r3, #180	; 0xb4
 8000f60:	0059      	lsls	r1, r3, #1
 8000f62:	0013      	movs	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	189b      	adds	r3, r3, r2
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	18c3      	adds	r3, r0, r3
 8000f6c:	185b      	adds	r3, r3, r1
 8000f6e:	193a      	adds	r2, r7, r4
 8000f70:	7812      	ldrb	r2, [r2, #0]
 8000f72:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f74:	193b      	adds	r3, r7, r4
 8000f76:	781a      	ldrb	r2, [r3, #0]
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	236c      	movs	r3, #108	; 0x6c
 8000f7c:	33ff      	adds	r3, #255	; 0xff
 8000f7e:	0019      	movs	r1, r3
 8000f80:	0013      	movs	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	189b      	adds	r3, r3, r2
 8000f86:	00db      	lsls	r3, r3, #3
 8000f88:	18c3      	adds	r3, r0, r3
 8000f8a:	185b      	adds	r3, r3, r1
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f90:	193b      	adds	r3, r7, r4
 8000f92:	781a      	ldrb	r2, [r3, #0]
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	23bc      	movs	r3, #188	; 0xbc
 8000f98:	0059      	lsls	r1, r3, #1
 8000f9a:	0013      	movs	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	189b      	adds	r3, r3, r2
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	18c3      	adds	r3, r0, r3
 8000fa4:	185b      	adds	r3, r3, r1
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000faa:	193b      	adds	r3, r7, r4
 8000fac:	781a      	ldrb	r2, [r3, #0]
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	23be      	movs	r3, #190	; 0xbe
 8000fb2:	0059      	lsls	r1, r3, #1
 8000fb4:	0013      	movs	r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	189b      	adds	r3, r3, r2
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	18c3      	adds	r3, r0, r3
 8000fbe:	185b      	adds	r3, r3, r1
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000fc4:	193b      	adds	r3, r7, r4
 8000fc6:	781a      	ldrb	r2, [r3, #0]
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	23c0      	movs	r3, #192	; 0xc0
 8000fcc:	0059      	lsls	r1, r3, #1
 8000fce:	0013      	movs	r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	189b      	adds	r3, r3, r2
 8000fd4:	00db      	lsls	r3, r3, #3
 8000fd6:	18c3      	adds	r3, r0, r3
 8000fd8:	185b      	adds	r3, r3, r1
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fde:	193b      	adds	r3, r7, r4
 8000fe0:	781a      	ldrb	r2, [r3, #0]
 8000fe2:	193b      	adds	r3, r7, r4
 8000fe4:	3201      	adds	r2, #1
 8000fe6:	701a      	strb	r2, [r3, #0]
 8000fe8:	230f      	movs	r3, #15
 8000fea:	18fb      	adds	r3, r7, r3
 8000fec:	781a      	ldrb	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d3a1      	bcc.n	8000f3a <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6818      	ldr	r0, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	466a      	mov	r2, sp
 8000ffe:	0011      	movs	r1, r2
 8001000:	001a      	movs	r2, r3
 8001002:	3210      	adds	r2, #16
 8001004:	ca70      	ldmia	r2!, {r4, r5, r6}
 8001006:	c170      	stmia	r1!, {r4, r5, r6}
 8001008:	ca30      	ldmia	r2!, {r4, r5}
 800100a:	c130      	stmia	r1!, {r4, r5}
 800100c:	6859      	ldr	r1, [r3, #4]
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	f002 fd6f 	bl	8003af4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2224      	movs	r2, #36	; 0x24
 800101a:	2100      	movs	r1, #0
 800101c:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a07      	ldr	r2, [pc, #28]	; (8001040 <HAL_PCD_Init+0x21c>)
 8001022:	2101      	movs	r1, #1
 8001024:	5499      	strb	r1, [r3, r2]
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d103      	bne.n	8001036 <HAL_PCD_Init+0x212>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	0018      	movs	r0, r3
 8001032:	f001 fb63 	bl	80026fc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001036:	2300      	movs	r3, #0
}
 8001038:	0018      	movs	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	b005      	add	sp, #20
 800103e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001040:	000002a9 	.word	0x000002a9

08001044 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	23aa      	movs	r3, #170	; 0xaa
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	5cd3      	ldrb	r3, [r2, r3]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d101      	bne.n	800105c <HAL_PCD_Start+0x18>
 8001058:	2302      	movs	r3, #2
 800105a:	e014      	b.n	8001086 <HAL_PCD_Start+0x42>
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	23aa      	movs	r3, #170	; 0xaa
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	2101      	movs	r1, #1
 8001064:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	0018      	movs	r0, r3
 800106c:	f002 fd12 	bl	8003a94 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	0018      	movs	r0, r3
 8001076:	f004 fceb 	bl	8005a50 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	23aa      	movs	r3, #170	; 0xaa
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	2100      	movs	r1, #0
 8001082:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	0018      	movs	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	b002      	add	sp, #8
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	0018      	movs	r0, r3
 800109e:	f004 fced 	bl	8005a7c <USB_ReadInterrupts>
 80010a2:	0002      	movs	r2, r0
 80010a4:	2380      	movs	r3, #128	; 0x80
 80010a6:	021b      	lsls	r3, r3, #8
 80010a8:	401a      	ands	r2, r3
 80010aa:	2380      	movs	r3, #128	; 0x80
 80010ac:	021b      	lsls	r3, r3, #8
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d103      	bne.n	80010ba <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	0018      	movs	r0, r3
 80010b6:	f000 fbbb 	bl	8001830 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	0018      	movs	r0, r3
 80010c0:	f004 fcdc 	bl	8005a7c <USB_ReadInterrupts>
 80010c4:	0002      	movs	r2, r0
 80010c6:	2380      	movs	r3, #128	; 0x80
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	401a      	ands	r2, r3
 80010cc:	2380      	movs	r3, #128	; 0x80
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d114      	bne.n	80010fe <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2244      	movs	r2, #68	; 0x44
 80010da:	5a9b      	ldrh	r3, [r3, r2]
 80010dc:	b29a      	uxth	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	49a2      	ldr	r1, [pc, #648]	; (800136c <HAL_PCD_IRQHandler+0x2dc>)
 80010e4:	400a      	ands	r2, r1
 80010e6:	b291      	uxth	r1, r2
 80010e8:	2244      	movs	r2, #68	; 0x44
 80010ea:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	0018      	movs	r0, r3
 80010f0:	f006 fc7f 	bl	80079f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2100      	movs	r1, #0
 80010f8:	0018      	movs	r0, r3
 80010fa:	f000 f945 	bl	8001388 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	0018      	movs	r0, r3
 8001104:	f004 fcba 	bl	8005a7c <USB_ReadInterrupts>
 8001108:	0002      	movs	r2, r0
 800110a:	2380      	movs	r3, #128	; 0x80
 800110c:	01db      	lsls	r3, r3, #7
 800110e:	401a      	ands	r2, r3
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	01db      	lsls	r3, r3, #7
 8001114:	429a      	cmp	r2, r3
 8001116:	d10b      	bne.n	8001130 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2244      	movs	r2, #68	; 0x44
 800111e:	5a9b      	ldrh	r3, [r3, r2]
 8001120:	b29a      	uxth	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4992      	ldr	r1, [pc, #584]	; (8001370 <HAL_PCD_IRQHandler+0x2e0>)
 8001128:	400a      	ands	r2, r1
 800112a:	b291      	uxth	r1, r2
 800112c:	2244      	movs	r2, #68	; 0x44
 800112e:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	0018      	movs	r0, r3
 8001136:	f004 fca1 	bl	8005a7c <USB_ReadInterrupts>
 800113a:	0002      	movs	r2, r0
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	019b      	lsls	r3, r3, #6
 8001140:	401a      	ands	r2, r3
 8001142:	2380      	movs	r3, #128	; 0x80
 8001144:	019b      	lsls	r3, r3, #6
 8001146:	429a      	cmp	r2, r3
 8001148:	d10b      	bne.n	8001162 <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2244      	movs	r2, #68	; 0x44
 8001150:	5a9b      	ldrh	r3, [r3, r2]
 8001152:	b29a      	uxth	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4986      	ldr	r1, [pc, #536]	; (8001374 <HAL_PCD_IRQHandler+0x2e4>)
 800115a:	400a      	ands	r2, r1
 800115c:	b291      	uxth	r1, r2
 800115e:	2244      	movs	r2, #68	; 0x44
 8001160:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	0018      	movs	r0, r3
 8001168:	f004 fc88 	bl	8005a7c <USB_ReadInterrupts>
 800116c:	0002      	movs	r2, r0
 800116e:	2380      	movs	r3, #128	; 0x80
 8001170:	015b      	lsls	r3, r3, #5
 8001172:	401a      	ands	r2, r3
 8001174:	2380      	movs	r3, #128	; 0x80
 8001176:	015b      	lsls	r3, r3, #5
 8001178:	429a      	cmp	r2, r3
 800117a:	d137      	bne.n	80011ec <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2240      	movs	r2, #64	; 0x40
 8001182:	5a9b      	ldrh	r3, [r3, r2]
 8001184:	b29a      	uxth	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2104      	movs	r1, #4
 800118c:	438a      	bics	r2, r1
 800118e:	b291      	uxth	r1, r2
 8001190:	2240      	movs	r2, #64	; 0x40
 8001192:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2240      	movs	r2, #64	; 0x40
 800119a:	5a9b      	ldrh	r3, [r3, r2]
 800119c:	b29a      	uxth	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2108      	movs	r1, #8
 80011a4:	438a      	bics	r2, r1
 80011a6:	b291      	uxth	r1, r2
 80011a8:	2240      	movs	r2, #64	; 0x40
 80011aa:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	23b8      	movs	r3, #184	; 0xb8
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	5cd3      	ldrb	r3, [r2, r3]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d109      	bne.n	80011cc <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	23b8      	movs	r3, #184	; 0xb8
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	2100      	movs	r1, #0
 80011c0:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2100      	movs	r1, #0
 80011c6:	0018      	movs	r0, r3
 80011c8:	f001 fac2 	bl	8002750 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	0018      	movs	r0, r3
 80011d0:	f006 fc50 	bl	8007a74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2244      	movs	r2, #68	; 0x44
 80011da:	5a9b      	ldrh	r3, [r3, r2]
 80011dc:	b29a      	uxth	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4965      	ldr	r1, [pc, #404]	; (8001378 <HAL_PCD_IRQHandler+0x2e8>)
 80011e4:	400a      	ands	r2, r1
 80011e6:	b291      	uxth	r1, r2
 80011e8:	2244      	movs	r2, #68	; 0x44
 80011ea:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	0018      	movs	r0, r3
 80011f2:	f004 fc43 	bl	8005a7c <USB_ReadInterrupts>
 80011f6:	0002      	movs	r2, r0
 80011f8:	2380      	movs	r3, #128	; 0x80
 80011fa:	011b      	lsls	r3, r3, #4
 80011fc:	401a      	ands	r2, r3
 80011fe:	2380      	movs	r3, #128	; 0x80
 8001200:	011b      	lsls	r3, r3, #4
 8001202:	429a      	cmp	r2, r3
 8001204:	d127      	bne.n	8001256 <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2240      	movs	r2, #64	; 0x40
 800120c:	5a9b      	ldrh	r3, [r3, r2]
 800120e:	b29a      	uxth	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2108      	movs	r1, #8
 8001216:	430a      	orrs	r2, r1
 8001218:	b291      	uxth	r1, r2
 800121a:	2240      	movs	r2, #64	; 0x40
 800121c:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2244      	movs	r2, #68	; 0x44
 8001224:	5a9b      	ldrh	r3, [r3, r2]
 8001226:	b29a      	uxth	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4953      	ldr	r1, [pc, #332]	; (800137c <HAL_PCD_IRQHandler+0x2ec>)
 800122e:	400a      	ands	r2, r1
 8001230:	b291      	uxth	r1, r2
 8001232:	2244      	movs	r2, #68	; 0x44
 8001234:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2240      	movs	r2, #64	; 0x40
 800123c:	5a9b      	ldrh	r3, [r3, r2]
 800123e:	b29a      	uxth	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2104      	movs	r1, #4
 8001246:	430a      	orrs	r2, r1
 8001248:	b291      	uxth	r1, r2
 800124a:	2240      	movs	r2, #64	; 0x40
 800124c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	0018      	movs	r0, r3
 8001252:	f006 fbf3 	bl	8007a3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	0018      	movs	r0, r3
 800125c:	f004 fc0e 	bl	8005a7c <USB_ReadInterrupts>
 8001260:	0002      	movs	r2, r0
 8001262:	2380      	movs	r3, #128	; 0x80
 8001264:	4013      	ands	r3, r2
 8001266:	2b80      	cmp	r3, #128	; 0x80
 8001268:	d145      	bne.n	80012f6 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2244      	movs	r2, #68	; 0x44
 8001270:	5a9b      	ldrh	r3, [r3, r2]
 8001272:	b29a      	uxth	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2180      	movs	r1, #128	; 0x80
 800127a:	438a      	bics	r2, r1
 800127c:	b291      	uxth	r1, r2
 800127e:	2244      	movs	r2, #68	; 0x44
 8001280:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	23b8      	movs	r3, #184	; 0xb8
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	5cd3      	ldrb	r3, [r2, r3]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d12f      	bne.n	80012ee <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2240      	movs	r2, #64	; 0x40
 8001294:	5a9b      	ldrh	r3, [r3, r2]
 8001296:	b29a      	uxth	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2104      	movs	r1, #4
 800129e:	430a      	orrs	r2, r1
 80012a0:	b291      	uxth	r1, r2
 80012a2:	2240      	movs	r2, #64	; 0x40
 80012a4:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2240      	movs	r2, #64	; 0x40
 80012ac:	5a9b      	ldrh	r3, [r3, r2]
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2108      	movs	r1, #8
 80012b6:	430a      	orrs	r2, r1
 80012b8:	b291      	uxth	r1, r2
 80012ba:	2240      	movs	r2, #64	; 0x40
 80012bc:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	23b8      	movs	r3, #184	; 0xb8
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	2101      	movs	r1, #1
 80012c6:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2254      	movs	r2, #84	; 0x54
 80012ce:	5a9b      	ldrh	r3, [r3, r2]
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	089b      	lsrs	r3, r3, #2
 80012d4:	223c      	movs	r2, #60	; 0x3c
 80012d6:	4013      	ands	r3, r2
 80012d8:	0019      	movs	r1, r3
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	23b9      	movs	r3, #185	; 0xb9
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2101      	movs	r1, #1
 80012e6:	0018      	movs	r0, r3
 80012e8:	f001 fa32 	bl	8002750 <HAL_PCDEx_LPM_Callback>
 80012ec:	e003      	b.n	80012f6 <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	0018      	movs	r0, r3
 80012f2:	f006 fba3 	bl	8007a3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	0018      	movs	r0, r3
 80012fc:	f004 fbbe 	bl	8005a7c <USB_ReadInterrupts>
 8001300:	0002      	movs	r2, r0
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	401a      	ands	r2, r3
 8001308:	2380      	movs	r3, #128	; 0x80
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	429a      	cmp	r2, r3
 800130e:	d10f      	bne.n	8001330 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2244      	movs	r2, #68	; 0x44
 8001316:	5a9b      	ldrh	r3, [r3, r2]
 8001318:	b29a      	uxth	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4918      	ldr	r1, [pc, #96]	; (8001380 <HAL_PCD_IRQHandler+0x2f0>)
 8001320:	400a      	ands	r2, r1
 8001322:	b291      	uxth	r1, r2
 8001324:	2244      	movs	r2, #68	; 0x44
 8001326:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	0018      	movs	r0, r3
 800132c:	f006 fb52 	bl	80079d4 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	0018      	movs	r0, r3
 8001336:	f004 fba1 	bl	8005a7c <USB_ReadInterrupts>
 800133a:	0002      	movs	r2, r0
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	401a      	ands	r2, r3
 8001342:	2380      	movs	r3, #128	; 0x80
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	429a      	cmp	r2, r3
 8001348:	d10b      	bne.n	8001362 <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2244      	movs	r2, #68	; 0x44
 8001350:	5a9b      	ldrh	r3, [r3, r2]
 8001352:	b29a      	uxth	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	490a      	ldr	r1, [pc, #40]	; (8001384 <HAL_PCD_IRQHandler+0x2f4>)
 800135a:	400a      	ands	r2, r1
 800135c:	b291      	uxth	r1, r2
 800135e:	2244      	movs	r2, #68	; 0x44
 8001360:	5299      	strh	r1, [r3, r2]
  }
}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	46bd      	mov	sp, r7
 8001366:	b002      	add	sp, #8
 8001368:	bd80      	pop	{r7, pc}
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	fffffbff 	.word	0xfffffbff
 8001370:	ffffbfff 	.word	0xffffbfff
 8001374:	ffffdfff 	.word	0xffffdfff
 8001378:	ffffefff 	.word	0xffffefff
 800137c:	fffff7ff 	.word	0xfffff7ff
 8001380:	fffffdff 	.word	0xfffffdff
 8001384:	fffffeff 	.word	0xfffffeff

08001388 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	000a      	movs	r2, r1
 8001392:	1cfb      	adds	r3, r7, #3
 8001394:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	23aa      	movs	r3, #170	; 0xaa
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	5cd3      	ldrb	r3, [r2, r3]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d101      	bne.n	80013a6 <HAL_PCD_SetAddress+0x1e>
 80013a2:	2302      	movs	r3, #2
 80013a4:	e017      	b.n	80013d6 <HAL_PCD_SetAddress+0x4e>
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	23aa      	movs	r3, #170	; 0xaa
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	2101      	movs	r1, #1
 80013ae:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	1cfa      	adds	r2, r7, #3
 80013b4:	2124      	movs	r1, #36	; 0x24
 80013b6:	7812      	ldrb	r2, [r2, #0]
 80013b8:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	1cfb      	adds	r3, r7, #3
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	0019      	movs	r1, r3
 80013c4:	0010      	movs	r0, r2
 80013c6:	f004 fb2f 	bl	8005a28 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	23aa      	movs	r3, #170	; 0xaa
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	2100      	movs	r1, #0
 80013d2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	0018      	movs	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	b002      	add	sp, #8
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80013de:	b590      	push	{r4, r7, lr}
 80013e0:	b085      	sub	sp, #20
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	000c      	movs	r4, r1
 80013e8:	0010      	movs	r0, r2
 80013ea:	0019      	movs	r1, r3
 80013ec:	1cfb      	adds	r3, r7, #3
 80013ee:	1c22      	adds	r2, r4, #0
 80013f0:	701a      	strb	r2, [r3, #0]
 80013f2:	003b      	movs	r3, r7
 80013f4:	1c02      	adds	r2, r0, #0
 80013f6:	801a      	strh	r2, [r3, #0]
 80013f8:	1cbb      	adds	r3, r7, #2
 80013fa:	1c0a      	adds	r2, r1, #0
 80013fc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 80013fe:	230b      	movs	r3, #11
 8001400:	18fb      	adds	r3, r7, r3
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001406:	1cfb      	adds	r3, r7, #3
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	b25b      	sxtb	r3, r3
 800140c:	2b00      	cmp	r3, #0
 800140e:	da0f      	bge.n	8001430 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001410:	1cfb      	adds	r3, r7, #3
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2207      	movs	r2, #7
 8001416:	4013      	ands	r3, r2
 8001418:	1c5a      	adds	r2, r3, #1
 800141a:	0013      	movs	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	189b      	adds	r3, r3, r2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	18d3      	adds	r3, r2, r3
 8001426:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2201      	movs	r2, #1
 800142c:	705a      	strb	r2, [r3, #1]
 800142e:	e00f      	b.n	8001450 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001430:	1cfb      	adds	r3, r7, #3
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2207      	movs	r2, #7
 8001436:	401a      	ands	r2, r3
 8001438:	0013      	movs	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	189b      	adds	r3, r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	3369      	adds	r3, #105	; 0x69
 8001442:	33ff      	adds	r3, #255	; 0xff
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	18d3      	adds	r3, r2, r3
 8001448:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2200      	movs	r2, #0
 800144e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001450:	1cfb      	adds	r3, r7, #3
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2207      	movs	r2, #7
 8001456:	4013      	ands	r3, r2
 8001458:	b2da      	uxtb	r2, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800145e:	003b      	movs	r3, r7
 8001460:	881a      	ldrh	r2, [r3, #0]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	1cba      	adds	r2, r7, #2
 800146a:	7812      	ldrb	r2, [r2, #0]
 800146c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	785b      	ldrb	r3, [r3, #1]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d004      	beq.n	8001480 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	b29a      	uxth	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001480:	1cbb      	adds	r3, r7, #2
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b02      	cmp	r3, #2
 8001486:	d102      	bne.n	800148e <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2200      	movs	r2, #0
 800148c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	23aa      	movs	r3, #170	; 0xaa
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	5cd3      	ldrb	r3, [r2, r3]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d101      	bne.n	800149e <HAL_PCD_EP_Open+0xc0>
 800149a:	2302      	movs	r3, #2
 800149c:	e013      	b.n	80014c6 <HAL_PCD_EP_Open+0xe8>
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	23aa      	movs	r3, #170	; 0xaa
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	2101      	movs	r1, #1
 80014a6:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	0011      	movs	r1, r2
 80014b0:	0018      	movs	r0, r3
 80014b2:	f002 fb4b 	bl	8003b4c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	23aa      	movs	r3, #170	; 0xaa
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	2100      	movs	r1, #0
 80014be:	54d1      	strb	r1, [r2, r3]

  return ret;
 80014c0:	230b      	movs	r3, #11
 80014c2:	18fb      	adds	r3, r7, r3
 80014c4:	781b      	ldrb	r3, [r3, #0]
}
 80014c6:	0018      	movs	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	b005      	add	sp, #20
 80014cc:	bd90      	pop	{r4, r7, pc}

080014ce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b084      	sub	sp, #16
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
 80014d6:	000a      	movs	r2, r1
 80014d8:	1cfb      	adds	r3, r7, #3
 80014da:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80014dc:	1cfb      	adds	r3, r7, #3
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	b25b      	sxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	da0f      	bge.n	8001506 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014e6:	1cfb      	adds	r3, r7, #3
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2207      	movs	r2, #7
 80014ec:	4013      	ands	r3, r2
 80014ee:	1c5a      	adds	r2, r3, #1
 80014f0:	0013      	movs	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	189b      	adds	r3, r3, r2
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	18d3      	adds	r3, r2, r3
 80014fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2201      	movs	r2, #1
 8001502:	705a      	strb	r2, [r3, #1]
 8001504:	e00f      	b.n	8001526 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001506:	1cfb      	adds	r3, r7, #3
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2207      	movs	r2, #7
 800150c:	401a      	ands	r2, r3
 800150e:	0013      	movs	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	189b      	adds	r3, r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	3369      	adds	r3, #105	; 0x69
 8001518:	33ff      	adds	r3, #255	; 0xff
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	18d3      	adds	r3, r2, r3
 800151e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001526:	1cfb      	adds	r3, r7, #3
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2207      	movs	r2, #7
 800152c:	4013      	ands	r3, r2
 800152e:	b2da      	uxtb	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	23aa      	movs	r3, #170	; 0xaa
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	5cd3      	ldrb	r3, [r2, r3]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d101      	bne.n	8001544 <HAL_PCD_EP_Close+0x76>
 8001540:	2302      	movs	r3, #2
 8001542:	e011      	b.n	8001568 <HAL_PCD_EP_Close+0x9a>
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	23aa      	movs	r3, #170	; 0xaa
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	2101      	movs	r1, #1
 800154c:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	0011      	movs	r1, r2
 8001556:	0018      	movs	r0, r3
 8001558:	f002 fe4e 	bl	80041f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	23aa      	movs	r3, #170	; 0xaa
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	2100      	movs	r1, #0
 8001564:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001566:	2300      	movs	r3, #0
}
 8001568:	0018      	movs	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	b004      	add	sp, #16
 800156e:	bd80      	pop	{r7, pc}

08001570 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	200b      	movs	r0, #11
 800157e:	183b      	adds	r3, r7, r0
 8001580:	1c0a      	adds	r2, r1, #0
 8001582:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001584:	0001      	movs	r1, r0
 8001586:	187b      	adds	r3, r7, r1
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2207      	movs	r2, #7
 800158c:	401a      	ands	r2, r3
 800158e:	0013      	movs	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	189b      	adds	r3, r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	3369      	adds	r3, #105	; 0x69
 8001598:	33ff      	adds	r3, #255	; 0xff
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	18d3      	adds	r3, r2, r3
 800159e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	2200      	movs	r2, #0
 80015b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015b8:	187b      	adds	r3, r7, r1
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2207      	movs	r2, #7
 80015be:	4013      	ands	r3, r2
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80015c6:	187b      	adds	r3, r7, r1
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2207      	movs	r2, #7
 80015cc:	4013      	ands	r3, r2
 80015ce:	d107      	bne.n	80015e0 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	0011      	movs	r1, r2
 80015d8:	0018      	movs	r0, r3
 80015da:	f002 ffcd 	bl	8004578 <USB_EPStartXfer>
 80015de:	e006      	b.n	80015ee <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	0011      	movs	r1, r2
 80015e8:	0018      	movs	r0, r3
 80015ea:	f002 ffc5 	bl	8004578 <USB_EPStartXfer>
  }

  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	0018      	movs	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	b006      	add	sp, #24
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	000a      	movs	r2, r1
 8001602:	1cfb      	adds	r3, r7, #3
 8001604:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001606:	1cfb      	adds	r3, r7, #3
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2207      	movs	r2, #7
 800160c:	401a      	ands	r2, r3
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	23c2      	movs	r3, #194	; 0xc2
 8001612:	0059      	lsls	r1, r3, #1
 8001614:	0013      	movs	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	189b      	adds	r3, r3, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	18c3      	adds	r3, r0, r3
 800161e:	185b      	adds	r3, r3, r1
 8001620:	681b      	ldr	r3, [r3, #0]
}
 8001622:	0018      	movs	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	b002      	add	sp, #8
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	60f8      	str	r0, [r7, #12]
 8001632:	607a      	str	r2, [r7, #4]
 8001634:	603b      	str	r3, [r7, #0]
 8001636:	200b      	movs	r0, #11
 8001638:	183b      	adds	r3, r7, r0
 800163a:	1c0a      	adds	r2, r1, #0
 800163c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800163e:	183b      	adds	r3, r7, r0
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2207      	movs	r2, #7
 8001644:	4013      	ands	r3, r2
 8001646:	1c5a      	adds	r2, r3, #1
 8001648:	0013      	movs	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	189b      	adds	r3, r3, r2
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	18d3      	adds	r3, r2, r3
 8001654:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	2224      	movs	r2, #36	; 0x24
 8001666:	2101      	movs	r1, #1
 8001668:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	2200      	movs	r2, #0
 8001674:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	2201      	movs	r2, #1
 800167a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800167c:	183b      	adds	r3, r7, r0
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2207      	movs	r2, #7
 8001682:	4013      	ands	r3, r2
 8001684:	b2da      	uxtb	r2, r3
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800168a:	183b      	adds	r3, r7, r0
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2207      	movs	r2, #7
 8001690:	4013      	ands	r3, r2
 8001692:	d107      	bne.n	80016a4 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	0011      	movs	r1, r2
 800169c:	0018      	movs	r0, r3
 800169e:	f002 ff6b 	bl	8004578 <USB_EPStartXfer>
 80016a2:	e006      	b.n	80016b2 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	0011      	movs	r1, r2
 80016ac:	0018      	movs	r0, r3
 80016ae:	f002 ff63 	bl	8004578 <USB_EPStartXfer>
  }

  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	0018      	movs	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	b006      	add	sp, #24
 80016ba:	bd80      	pop	{r7, pc}

080016bc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	000a      	movs	r2, r1
 80016c6:	1cfb      	adds	r3, r7, #3
 80016c8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80016ca:	1cfb      	adds	r3, r7, #3
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2207      	movs	r2, #7
 80016d0:	401a      	ands	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d901      	bls.n	80016de <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e046      	b.n	800176c <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80016de:	1cfb      	adds	r3, r7, #3
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	b25b      	sxtb	r3, r3
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	da0f      	bge.n	8001708 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016e8:	1cfb      	adds	r3, r7, #3
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2207      	movs	r2, #7
 80016ee:	4013      	ands	r3, r2
 80016f0:	1c5a      	adds	r2, r3, #1
 80016f2:	0013      	movs	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	189b      	adds	r3, r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	18d3      	adds	r3, r2, r3
 80016fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2201      	movs	r2, #1
 8001704:	705a      	strb	r2, [r3, #1]
 8001706:	e00d      	b.n	8001724 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001708:	1cfb      	adds	r3, r7, #3
 800170a:	781a      	ldrb	r2, [r3, #0]
 800170c:	0013      	movs	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	189b      	adds	r3, r3, r2
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	3369      	adds	r3, #105	; 0x69
 8001716:	33ff      	adds	r3, #255	; 0xff
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	18d3      	adds	r3, r2, r3
 800171c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2200      	movs	r2, #0
 8001722:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2201      	movs	r2, #1
 8001728:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800172a:	1cfb      	adds	r3, r7, #3
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2207      	movs	r2, #7
 8001730:	4013      	ands	r3, r2
 8001732:	b2da      	uxtb	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	23aa      	movs	r3, #170	; 0xaa
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	5cd3      	ldrb	r3, [r2, r3]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d101      	bne.n	8001748 <HAL_PCD_EP_SetStall+0x8c>
 8001744:	2302      	movs	r3, #2
 8001746:	e011      	b.n	800176c <HAL_PCD_EP_SetStall+0xb0>
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	23aa      	movs	r3, #170	; 0xaa
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	2101      	movs	r1, #1
 8001750:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	0011      	movs	r1, r2
 800175a:	0018      	movs	r0, r3
 800175c:	f004 f862 	bl	8005824 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	23aa      	movs	r3, #170	; 0xaa
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	2100      	movs	r1, #0
 8001768:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	0018      	movs	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	b004      	add	sp, #16
 8001772:	bd80      	pop	{r7, pc}

08001774 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	000a      	movs	r2, r1
 800177e:	1cfb      	adds	r3, r7, #3
 8001780:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001782:	1cfb      	adds	r3, r7, #3
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	220f      	movs	r2, #15
 8001788:	401a      	ands	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	429a      	cmp	r2, r3
 8001790:	d901      	bls.n	8001796 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e048      	b.n	8001828 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001796:	1cfb      	adds	r3, r7, #3
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	b25b      	sxtb	r3, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	da0f      	bge.n	80017c0 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017a0:	1cfb      	adds	r3, r7, #3
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2207      	movs	r2, #7
 80017a6:	4013      	ands	r3, r2
 80017a8:	1c5a      	adds	r2, r3, #1
 80017aa:	0013      	movs	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	189b      	adds	r3, r3, r2
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	18d3      	adds	r3, r2, r3
 80017b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2201      	movs	r2, #1
 80017bc:	705a      	strb	r2, [r3, #1]
 80017be:	e00f      	b.n	80017e0 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017c0:	1cfb      	adds	r3, r7, #3
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2207      	movs	r2, #7
 80017c6:	401a      	ands	r2, r3
 80017c8:	0013      	movs	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	189b      	adds	r3, r3, r2
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	3369      	adds	r3, #105	; 0x69
 80017d2:	33ff      	adds	r3, #255	; 0xff
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	18d3      	adds	r3, r2, r3
 80017d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2200      	movs	r2, #0
 80017de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2200      	movs	r2, #0
 80017e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017e6:	1cfb      	adds	r3, r7, #3
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2207      	movs	r2, #7
 80017ec:	4013      	ands	r3, r2
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	23aa      	movs	r3, #170	; 0xaa
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	5cd3      	ldrb	r3, [r2, r3]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d101      	bne.n	8001804 <HAL_PCD_EP_ClrStall+0x90>
 8001800:	2302      	movs	r3, #2
 8001802:	e011      	b.n	8001828 <HAL_PCD_EP_ClrStall+0xb4>
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	23aa      	movs	r3, #170	; 0xaa
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	2101      	movs	r1, #1
 800180c:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	0011      	movs	r1, r2
 8001816:	0018      	movs	r0, r3
 8001818:	f004 f854 	bl	80058c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	23aa      	movs	r3, #170	; 0xaa
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	2100      	movs	r1, #0
 8001824:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	0018      	movs	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	b004      	add	sp, #16
 800182e:	bd80      	pop	{r7, pc}

08001830 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b08f      	sub	sp, #60	; 0x3c
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001838:	e323      	b.n	8001e82 <PCD_EP_ISR_Handler+0x652>
  {
    wIstr = hpcd->Instance->ISTR;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	202e      	movs	r0, #46	; 0x2e
 8001840:	183b      	adds	r3, r7, r0
 8001842:	2144      	movs	r1, #68	; 0x44
 8001844:	5a52      	ldrh	r2, [r2, r1]
 8001846:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001848:	183b      	adds	r3, r7, r0
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	b2da      	uxtb	r2, r3
 800184e:	202d      	movs	r0, #45	; 0x2d
 8001850:	183b      	adds	r3, r7, r0
 8001852:	210f      	movs	r1, #15
 8001854:	400a      	ands	r2, r1
 8001856:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8001858:	183b      	adds	r3, r7, r0
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d000      	beq.n	8001862 <PCD_EP_ISR_Handler+0x32>
 8001860:	e15e      	b.n	8001b20 <PCD_EP_ISR_Handler+0x2f0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001862:	232e      	movs	r3, #46	; 0x2e
 8001864:	18fb      	adds	r3, r7, r3
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	2210      	movs	r2, #16
 800186a:	4013      	ands	r3, r2
 800186c:	d152      	bne.n	8001914 <PCD_EP_ISR_Handler+0xe4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	b29a      	uxth	r2, r3
 8001876:	200e      	movs	r0, #14
 8001878:	183b      	adds	r3, r7, r0
 800187a:	49db      	ldr	r1, [pc, #876]	; (8001be8 <PCD_EP_ISR_Handler+0x3b8>)
 800187c:	400a      	ands	r2, r1
 800187e:	801a      	strh	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	183a      	adds	r2, r7, r0
 8001886:	8812      	ldrh	r2, [r2, #0]
 8001888:	49d8      	ldr	r1, [pc, #864]	; (8001bec <PCD_EP_ISR_Handler+0x3bc>)
 800188a:	430a      	orrs	r2, r1
 800188c:	b292      	uxth	r2, r2
 800188e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3328      	adds	r3, #40	; 0x28
 8001894:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2250      	movs	r2, #80	; 0x50
 800189c:	5a9b      	ldrh	r3, [r3, r2]
 800189e:	b29b      	uxth	r3, r3
 80018a0:	001a      	movs	r2, r3
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	18d2      	adds	r2, r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	18d3      	adds	r3, r2, r3
 80018b0:	4acf      	ldr	r2, [pc, #828]	; (8001bf0 <PCD_EP_ISR_Handler+0x3c0>)
 80018b2:	4694      	mov	ip, r2
 80018b4:	4463      	add	r3, ip
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	059b      	lsls	r3, r3, #22
 80018ba:	0d9a      	lsrs	r2, r3, #22
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c2:	695a      	ldr	r2, [r3, #20]
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	69db      	ldr	r3, [r3, #28]
 80018c8:	18d2      	adds	r2, r2, r3
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2100      	movs	r1, #0
 80018d2:	0018      	movs	r0, r3
 80018d4:	f006 f860 	bl	8007998 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2224      	movs	r2, #36	; 0x24
 80018dc:	5c9b      	ldrb	r3, [r3, r2]
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d100      	bne.n	80018e6 <PCD_EP_ISR_Handler+0xb6>
 80018e4:	e2cd      	b.n	8001e82 <PCD_EP_ISR_Handler+0x652>
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d000      	beq.n	80018f0 <PCD_EP_ISR_Handler+0xc0>
 80018ee:	e2c8      	b.n	8001e82 <PCD_EP_ISR_Handler+0x652>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2224      	movs	r2, #36	; 0x24
 80018f4:	5c9b      	ldrb	r3, [r3, r2]
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2280      	movs	r2, #128	; 0x80
 80018fa:	4252      	negs	r2, r2
 80018fc:	4313      	orrs	r3, r2
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	b291      	uxth	r1, r2
 8001906:	224c      	movs	r2, #76	; 0x4c
 8001908:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2224      	movs	r2, #36	; 0x24
 800190e:	2100      	movs	r1, #0
 8001910:	5499      	strb	r1, [r3, r2]
 8001912:	e2b6      	b.n	8001e82 <PCD_EP_ISR_Handler+0x652>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3369      	adds	r3, #105	; 0x69
 8001918:	33ff      	adds	r3, #255	; 0xff
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	212a      	movs	r1, #42	; 0x2a
 8001922:	187b      	adds	r3, r7, r1
 8001924:	8812      	ldrh	r2, [r2, #0]
 8001926:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001928:	187b      	adds	r3, r7, r1
 800192a:	881a      	ldrh	r2, [r3, #0]
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	011b      	lsls	r3, r3, #4
 8001930:	4013      	ands	r3, r2
 8001932:	d037      	beq.n	80019a4 <PCD_EP_ISR_Handler+0x174>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2250      	movs	r2, #80	; 0x50
 800193a:	5a9b      	ldrh	r3, [r3, r2]
 800193c:	b29b      	uxth	r3, r3
 800193e:	001a      	movs	r2, r3
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	18d2      	adds	r2, r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	18d3      	adds	r3, r2, r3
 800194e:	4aa9      	ldr	r2, [pc, #676]	; (8001bf4 <PCD_EP_ISR_Handler+0x3c4>)
 8001950:	4694      	mov	ip, r2
 8001952:	4463      	add	r3, ip
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	059b      	lsls	r3, r3, #22
 8001958:	0d9a      	lsrs	r2, r3, #22
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6818      	ldr	r0, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	22ac      	movs	r2, #172	; 0xac
 8001966:	0092      	lsls	r2, r2, #2
 8001968:	1899      	adds	r1, r3, r2
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001972:	b29b      	uxth	r3, r3
 8001974:	f004 f8d3 	bl	8005b1e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	b29a      	uxth	r2, r3
 8001980:	2010      	movs	r0, #16
 8001982:	183b      	adds	r3, r7, r0
 8001984:	499c      	ldr	r1, [pc, #624]	; (8001bf8 <PCD_EP_ISR_Handler+0x3c8>)
 8001986:	400a      	ands	r2, r1
 8001988:	801a      	strh	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	183a      	adds	r2, r7, r0
 8001990:	8812      	ldrh	r2, [r2, #0]
 8001992:	2180      	movs	r1, #128	; 0x80
 8001994:	430a      	orrs	r2, r1
 8001996:	b292      	uxth	r2, r2
 8001998:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	0018      	movs	r0, r3
 800199e:	f005 ffc5 	bl	800792c <HAL_PCD_SetupStageCallback>
 80019a2:	e26e      	b.n	8001e82 <PCD_EP_ISR_Handler+0x652>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019a4:	232a      	movs	r3, #42	; 0x2a
 80019a6:	18fb      	adds	r3, r7, r3
 80019a8:	2200      	movs	r2, #0
 80019aa:	5e9b      	ldrsh	r3, [r3, r2]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	db00      	blt.n	80019b2 <PCD_EP_ISR_Handler+0x182>
 80019b0:	e267      	b.n	8001e82 <PCD_EP_ISR_Handler+0x652>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	881b      	ldrh	r3, [r3, #0]
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	201c      	movs	r0, #28
 80019bc:	183b      	adds	r3, r7, r0
 80019be:	498e      	ldr	r1, [pc, #568]	; (8001bf8 <PCD_EP_ISR_Handler+0x3c8>)
 80019c0:	400a      	ands	r2, r1
 80019c2:	801a      	strh	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	183a      	adds	r2, r7, r0
 80019ca:	8812      	ldrh	r2, [r2, #0]
 80019cc:	2180      	movs	r1, #128	; 0x80
 80019ce:	430a      	orrs	r2, r1
 80019d0:	b292      	uxth	r2, r2
 80019d2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2250      	movs	r2, #80	; 0x50
 80019da:	5a9b      	ldrh	r3, [r3, r2]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	001a      	movs	r2, r3
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	18d2      	adds	r2, r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	18d3      	adds	r3, r2, r3
 80019ee:	4a81      	ldr	r2, [pc, #516]	; (8001bf4 <PCD_EP_ISR_Handler+0x3c4>)
 80019f0:	4694      	mov	ip, r2
 80019f2:	4463      	add	r3, ip
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	059b      	lsls	r3, r3, #22
 80019f8:	0d9a      	lsrs	r2, r3, #22
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d01a      	beq.n	8001a3c <PCD_EP_ISR_Handler+0x20c>
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d016      	beq.n	8001a3c <PCD_EP_ISR_Handler+0x20c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6818      	ldr	r0, [r3, #0]
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	6959      	ldr	r1, [r3, #20]
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	f004 f87d 	bl	8005b1e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	695a      	ldr	r2, [r3, #20]
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	69db      	ldr	r3, [r3, #28]
 8001a2c:	18d2      	adds	r2, r2, r3
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2100      	movs	r1, #0
 8001a36:	0018      	movs	r0, r3
 8001a38:	f005 ff8d 	bl	8007956 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	61bb      	str	r3, [r7, #24]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2250      	movs	r2, #80	; 0x50
 8001a48:	5a9b      	ldrh	r3, [r3, r2]
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	001a      	movs	r2, r3
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	189b      	adds	r3, r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	4a67      	ldr	r2, [pc, #412]	; (8001bf4 <PCD_EP_ISR_Handler+0x3c4>)
 8001a58:	4694      	mov	ip, r2
 8001a5a:	4463      	add	r3, ip
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d110      	bne.n	8001a88 <PCD_EP_ISR_Handler+0x258>
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	4a63      	ldr	r2, [pc, #396]	; (8001bfc <PCD_EP_ISR_Handler+0x3cc>)
 8001a6e:	4013      	ands	r3, r2
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	801a      	strh	r2, [r3, #0]
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	4a5b      	ldr	r2, [pc, #364]	; (8001bec <PCD_EP_ISR_Handler+0x3bc>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	801a      	strh	r2, [r3, #0]
 8001a86:	e02b      	b.n	8001ae0 <PCD_EP_ISR_Handler+0x2b0>
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	2b3e      	cmp	r3, #62	; 0x3e
 8001a8e:	d812      	bhi.n	8001ab6 <PCD_EP_ISR_Handler+0x286>
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	085b      	lsrs	r3, r3, #1
 8001a96:	633b      	str	r3, [r7, #48]	; 0x30
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d002      	beq.n	8001aa8 <PCD_EP_ISR_Handler+0x278>
 8001aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	633b      	str	r3, [r7, #48]	; 0x30
 8001aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	029b      	lsls	r3, r3, #10
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	801a      	strh	r2, [r3, #0]
 8001ab4:	e014      	b.n	8001ae0 <PCD_EP_ISR_Handler+0x2b0>
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	095b      	lsrs	r3, r3, #5
 8001abc:	633b      	str	r3, [r7, #48]	; 0x30
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	221f      	movs	r2, #31
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d102      	bne.n	8001ace <PCD_EP_ISR_Handler+0x29e>
 8001ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aca:	3b01      	subs	r3, #1
 8001acc:	633b      	str	r3, [r7, #48]	; 0x30
 8001ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	029b      	lsls	r3, r3, #10
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	4a45      	ldr	r2, [pc, #276]	; (8001bec <PCD_EP_ISR_Handler+0x3bc>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	2012      	movs	r0, #18
 8001aea:	183b      	adds	r3, r7, r0
 8001aec:	4944      	ldr	r1, [pc, #272]	; (8001c00 <PCD_EP_ISR_Handler+0x3d0>)
 8001aee:	400a      	ands	r2, r1
 8001af0:	801a      	strh	r2, [r3, #0]
 8001af2:	183b      	adds	r3, r7, r0
 8001af4:	183a      	adds	r2, r7, r0
 8001af6:	8812      	ldrh	r2, [r2, #0]
 8001af8:	2180      	movs	r1, #128	; 0x80
 8001afa:	0149      	lsls	r1, r1, #5
 8001afc:	404a      	eors	r2, r1
 8001afe:	801a      	strh	r2, [r3, #0]
 8001b00:	183b      	adds	r3, r7, r0
 8001b02:	183a      	adds	r2, r7, r0
 8001b04:	8812      	ldrh	r2, [r2, #0]
 8001b06:	2180      	movs	r1, #128	; 0x80
 8001b08:	0189      	lsls	r1, r1, #6
 8001b0a:	404a      	eors	r2, r1
 8001b0c:	801a      	strh	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	183a      	adds	r2, r7, r0
 8001b14:	8812      	ldrh	r2, [r2, #0]
 8001b16:	493b      	ldr	r1, [pc, #236]	; (8001c04 <PCD_EP_ISR_Handler+0x3d4>)
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	b292      	uxth	r2, r2
 8001b1c:	801a      	strh	r2, [r3, #0]
 8001b1e:	e1b0      	b.n	8001e82 <PCD_EP_ISR_Handler+0x652>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	001a      	movs	r2, r3
 8001b26:	232d      	movs	r3, #45	; 0x2d
 8001b28:	18fb      	adds	r3, r7, r3
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	18d2      	adds	r2, r2, r3
 8001b30:	212a      	movs	r1, #42	; 0x2a
 8001b32:	187b      	adds	r3, r7, r1
 8001b34:	8812      	ldrh	r2, [r2, #0]
 8001b36:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b38:	187b      	adds	r3, r7, r1
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	5e9b      	ldrsh	r3, [r3, r2]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	db00      	blt.n	8001b44 <PCD_EP_ISR_Handler+0x314>
 8001b42:	e10f      	b.n	8001d64 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	001a      	movs	r2, r3
 8001b4a:	202d      	movs	r0, #45	; 0x2d
 8001b4c:	183b      	adds	r3, r7, r0
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	18d3      	adds	r3, r2, r3
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	2428      	movs	r4, #40	; 0x28
 8001b5a:	193b      	adds	r3, r7, r4
 8001b5c:	4926      	ldr	r1, [pc, #152]	; (8001bf8 <PCD_EP_ISR_Handler+0x3c8>)
 8001b5e:	400a      	ands	r2, r1
 8001b60:	801a      	strh	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	001a      	movs	r2, r3
 8001b68:	183b      	adds	r3, r7, r0
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	18d3      	adds	r3, r2, r3
 8001b70:	193a      	adds	r2, r7, r4
 8001b72:	8812      	ldrh	r2, [r2, #0]
 8001b74:	2180      	movs	r1, #128	; 0x80
 8001b76:	430a      	orrs	r2, r1
 8001b78:	b292      	uxth	r2, r2
 8001b7a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001b7c:	183b      	adds	r3, r7, r0
 8001b7e:	781a      	ldrb	r2, [r3, #0]
 8001b80:	0013      	movs	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	189b      	adds	r3, r3, r2
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	3369      	adds	r3, #105	; 0x69
 8001b8a:	33ff      	adds	r3, #255	; 0xff
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	18d3      	adds	r3, r2, r3
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	7b1b      	ldrb	r3, [r3, #12]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d136      	bne.n	8001c08 <PCD_EP_ISR_Handler+0x3d8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2250      	movs	r2, #80	; 0x50
 8001ba0:	5a9b      	ldrh	r3, [r3, r2]
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	001a      	movs	r2, r3
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	18d2      	adds	r2, r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	18d3      	adds	r3, r2, r3
 8001bb4:	4a0f      	ldr	r2, [pc, #60]	; (8001bf4 <PCD_EP_ISR_Handler+0x3c4>)
 8001bb6:	4694      	mov	ip, r2
 8001bb8:	4463      	add	r3, ip
 8001bba:	881a      	ldrh	r2, [r3, #0]
 8001bbc:	2136      	movs	r1, #54	; 0x36
 8001bbe:	187b      	adds	r3, r7, r1
 8001bc0:	0592      	lsls	r2, r2, #22
 8001bc2:	0d92      	lsrs	r2, r2, #22
 8001bc4:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8001bc6:	187b      	adds	r3, r7, r1
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d100      	bne.n	8001bd0 <PCD_EP_ISR_Handler+0x3a0>
 8001bce:	e0a0      	b.n	8001d12 <PCD_EP_ISR_Handler+0x4e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6818      	ldr	r0, [r3, #0]
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	6959      	ldr	r1, [r3, #20]
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	88da      	ldrh	r2, [r3, #6]
 8001bdc:	2336      	movs	r3, #54	; 0x36
 8001bde:	18fb      	adds	r3, r7, r3
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	f003 ff9c 	bl	8005b1e <USB_ReadPMA>
 8001be6:	e094      	b.n	8001d12 <PCD_EP_ISR_Handler+0x4e2>
 8001be8:	ffff8f0f 	.word	0xffff8f0f
 8001bec:	ffff8000 	.word	0xffff8000
 8001bf0:	00000402 	.word	0x00000402
 8001bf4:	00000406 	.word	0x00000406
 8001bf8:	00000f8f 	.word	0x00000f8f
 8001bfc:	ffff83ff 	.word	0xffff83ff
 8001c00:	ffffbf8f 	.word	0xffffbf8f
 8001c04:	ffff8080 	.word	0xffff8080
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	78db      	ldrb	r3, [r3, #3]
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d10c      	bne.n	8001c2a <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001c10:	2336      	movs	r3, #54	; 0x36
 8001c12:	18fc      	adds	r4, r7, r3
 8001c14:	232a      	movs	r3, #42	; 0x2a
 8001c16:	18fb      	adds	r3, r7, r3
 8001c18:	881a      	ldrh	r2, [r3, #0]
 8001c1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f000 f94a 	bl	8001eb8 <HAL_PCD_EP_DB_Receive>
 8001c24:	0003      	movs	r3, r0
 8001c26:	8023      	strh	r3, [r4, #0]
 8001c28:	e073      	b.n	8001d12 <PCD_EP_ISR_Handler+0x4e2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	001a      	movs	r2, r3
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	18d3      	adds	r3, r2, r3
 8001c38:	881b      	ldrh	r3, [r3, #0]
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	2022      	movs	r0, #34	; 0x22
 8001c3e:	183b      	adds	r3, r7, r0
 8001c40:	4997      	ldr	r1, [pc, #604]	; (8001ea0 <PCD_EP_ISR_Handler+0x670>)
 8001c42:	400a      	ands	r2, r1
 8001c44:	801a      	strh	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	001a      	movs	r2, r3
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	18d3      	adds	r3, r2, r3
 8001c54:	183a      	adds	r2, r7, r0
 8001c56:	8812      	ldrh	r2, [r2, #0]
 8001c58:	4992      	ldr	r1, [pc, #584]	; (8001ea4 <PCD_EP_ISR_Handler+0x674>)
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	b292      	uxth	r2, r2
 8001c5e:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	001a      	movs	r2, r3
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	18d3      	adds	r3, r2, r3
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	001a      	movs	r2, r3
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	01db      	lsls	r3, r3, #7
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d025      	beq.n	8001cc8 <PCD_EP_ISR_Handler+0x498>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2250      	movs	r2, #80	; 0x50
 8001c82:	5a9b      	ldrh	r3, [r3, r2]
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	001a      	movs	r2, r3
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	18d2      	adds	r2, r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	18d3      	adds	r3, r2, r3
 8001c96:	4a84      	ldr	r2, [pc, #528]	; (8001ea8 <PCD_EP_ISR_Handler+0x678>)
 8001c98:	4694      	mov	ip, r2
 8001c9a:	4463      	add	r3, ip
 8001c9c:	881a      	ldrh	r2, [r3, #0]
 8001c9e:	2136      	movs	r1, #54	; 0x36
 8001ca0:	187b      	adds	r3, r7, r1
 8001ca2:	0592      	lsls	r2, r2, #22
 8001ca4:	0d92      	lsrs	r2, r2, #22
 8001ca6:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001ca8:	187b      	adds	r3, r7, r1
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d030      	beq.n	8001d12 <PCD_EP_ISR_Handler+0x4e2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6818      	ldr	r0, [r3, #0]
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	6959      	ldr	r1, [r3, #20]
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	891a      	ldrh	r2, [r3, #8]
 8001cbc:	2336      	movs	r3, #54	; 0x36
 8001cbe:	18fb      	adds	r3, r7, r3
 8001cc0:	881b      	ldrh	r3, [r3, #0]
 8001cc2:	f003 ff2c 	bl	8005b1e <USB_ReadPMA>
 8001cc6:	e024      	b.n	8001d12 <PCD_EP_ISR_Handler+0x4e2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2250      	movs	r2, #80	; 0x50
 8001cce:	5a9b      	ldrh	r3, [r3, r2]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	001a      	movs	r2, r3
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	18d2      	adds	r2, r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	18d3      	adds	r3, r2, r3
 8001ce2:	4a72      	ldr	r2, [pc, #456]	; (8001eac <PCD_EP_ISR_Handler+0x67c>)
 8001ce4:	4694      	mov	ip, r2
 8001ce6:	4463      	add	r3, ip
 8001ce8:	881a      	ldrh	r2, [r3, #0]
 8001cea:	2136      	movs	r1, #54	; 0x36
 8001cec:	187b      	adds	r3, r7, r1
 8001cee:	0592      	lsls	r2, r2, #22
 8001cf0:	0d92      	lsrs	r2, r2, #22
 8001cf2:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001cf4:	187b      	adds	r3, r7, r1
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d00a      	beq.n	8001d12 <PCD_EP_ISR_Handler+0x4e2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	6959      	ldr	r1, [r3, #20]
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	895a      	ldrh	r2, [r3, #10]
 8001d08:	2336      	movs	r3, #54	; 0x36
 8001d0a:	18fb      	adds	r3, r7, r3
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	f003 ff06 	bl	8005b1e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	69da      	ldr	r2, [r3, #28]
 8001d16:	2136      	movs	r1, #54	; 0x36
 8001d18:	187b      	adds	r3, r7, r1
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	18d2      	adds	r2, r2, r3
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	695a      	ldr	r2, [r3, #20]
 8001d26:	187b      	adds	r3, r7, r1
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	18d2      	adds	r2, r2, r3
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d006      	beq.n	8001d46 <PCD_EP_ISR_Handler+0x516>
 8001d38:	2336      	movs	r3, #54	; 0x36
 8001d3a:	18fb      	adds	r3, r7, r3
 8001d3c:	881a      	ldrh	r2, [r3, #0]
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d207      	bcs.n	8001d56 <PCD_EP_ISR_Handler+0x526>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	781a      	ldrb	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	0011      	movs	r1, r2
 8001d4e:	0018      	movs	r0, r3
 8001d50:	f005 fe01 	bl	8007956 <HAL_PCD_DataOutStageCallback>
 8001d54:	e006      	b.n	8001d64 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d5c:	0011      	movs	r1, r2
 8001d5e:	0018      	movs	r0, r3
 8001d60:	f002 fc0a 	bl	8004578 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001d64:	232a      	movs	r3, #42	; 0x2a
 8001d66:	18fb      	adds	r3, r7, r3
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	2280      	movs	r2, #128	; 0x80
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d100      	bne.n	8001d72 <PCD_EP_ISR_Handler+0x542>
 8001d70:	e087      	b.n	8001e82 <PCD_EP_ISR_Handler+0x652>
      {
        ep = &hpcd->IN_ep[epindex];
 8001d72:	202d      	movs	r0, #45	; 0x2d
 8001d74:	183b      	adds	r3, r7, r0
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	1c5a      	adds	r2, r3, #1
 8001d7a:	0013      	movs	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	189b      	adds	r3, r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	18d3      	adds	r3, r2, r3
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	001a      	movs	r2, r3
 8001d8e:	183b      	adds	r3, r7, r0
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	18d3      	adds	r3, r2, r3
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	2420      	movs	r4, #32
 8001d9c:	193b      	adds	r3, r7, r4
 8001d9e:	4944      	ldr	r1, [pc, #272]	; (8001eb0 <PCD_EP_ISR_Handler+0x680>)
 8001da0:	400a      	ands	r2, r1
 8001da2:	801a      	strh	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	001a      	movs	r2, r3
 8001daa:	183b      	adds	r3, r7, r0
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	18d3      	adds	r3, r2, r3
 8001db2:	193a      	adds	r2, r7, r4
 8001db4:	8812      	ldrh	r2, [r2, #0]
 8001db6:	493f      	ldr	r1, [pc, #252]	; (8001eb4 <PCD_EP_ISR_Handler+0x684>)
 8001db8:	430a      	orrs	r2, r1
 8001dba:	b292      	uxth	r2, r2
 8001dbc:	801a      	strh	r2, [r3, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	78db      	ldrb	r3, [r3, #3]
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d10a      	bne.n	8001ddc <PCD_EP_ISR_Handler+0x5ac>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d151      	bne.n	8001e72 <PCD_EP_ISR_Handler+0x642>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001dce:	232a      	movs	r3, #42	; 0x2a
 8001dd0:	18fb      	adds	r3, r7, r3
 8001dd2:	881a      	ldrh	r2, [r3, #0]
 8001dd4:	2380      	movs	r3, #128	; 0x80
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d14a      	bne.n	8001e72 <PCD_EP_ISR_Handler+0x642>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2250      	movs	r2, #80	; 0x50
 8001de2:	5a9b      	ldrh	r3, [r3, r2]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	001a      	movs	r2, r3
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	18d2      	adds	r2, r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	18d3      	adds	r3, r2, r3
 8001df6:	4a2c      	ldr	r2, [pc, #176]	; (8001ea8 <PCD_EP_ISR_Handler+0x678>)
 8001df8:	4694      	mov	ip, r2
 8001dfa:	4463      	add	r3, ip
 8001dfc:	881a      	ldrh	r2, [r3, #0]
 8001dfe:	211e      	movs	r1, #30
 8001e00:	187b      	adds	r3, r7, r1
 8001e02:	0592      	lsls	r2, r2, #22
 8001e04:	0d92      	lsrs	r2, r2, #22
 8001e06:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	699a      	ldr	r2, [r3, #24]
 8001e0c:	187b      	adds	r3, r7, r1
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d908      	bls.n	8001e26 <PCD_EP_ISR_Handler+0x5f6>
          {
            ep->xfer_len -= TxByteNbre;
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	699a      	ldr	r2, [r3, #24]
 8001e18:	231e      	movs	r3, #30
 8001e1a:	18fb      	adds	r3, r7, r3
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	1ad2      	subs	r2, r2, r3
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e22:	619a      	str	r2, [r3, #24]
 8001e24:	e002      	b.n	8001e2c <PCD_EP_ISR_Handler+0x5fc>
          }
          else
          {
            ep->xfer_len = 0U;
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	2200      	movs	r2, #0
 8001e2a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d107      	bne.n	8001e44 <PCD_EP_ISR_Handler+0x614>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	781a      	ldrb	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	0011      	movs	r1, r2
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f005 fdab 	bl	8007998 <HAL_PCD_DataInStageCallback>
 8001e42:	e01e      	b.n	8001e82 <PCD_EP_ISR_Handler+0x652>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	695a      	ldr	r2, [r3, #20]
 8001e48:	211e      	movs	r1, #30
 8001e4a:	187b      	adds	r3, r7, r1
 8001e4c:	881b      	ldrh	r3, [r3, #0]
 8001e4e:	18d2      	adds	r2, r2, r3
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	69da      	ldr	r2, [r3, #28]
 8001e58:	187b      	adds	r3, r7, r1
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	18d2      	adds	r2, r2, r3
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e68:	0011      	movs	r1, r2
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	f002 fb84 	bl	8004578 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001e70:	e007      	b.n	8001e82 <PCD_EP_ISR_Handler+0x652>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001e72:	232a      	movs	r3, #42	; 0x2a
 8001e74:	18fb      	adds	r3, r7, r3
 8001e76:	881a      	ldrh	r2, [r3, #0]
 8001e78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f000 f93b 	bl	80020f8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2244      	movs	r2, #68	; 0x44
 8001e88:	5a9b      	ldrh	r3, [r3, r2]
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	b21b      	sxth	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	da00      	bge.n	8001e94 <PCD_EP_ISR_Handler+0x664>
 8001e92:	e4d2      	b.n	800183a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	0018      	movs	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	b00f      	add	sp, #60	; 0x3c
 8001e9c:	bd90      	pop	{r4, r7, pc}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	ffff8f8f 	.word	0xffff8f8f
 8001ea4:	ffff80c0 	.word	0xffff80c0
 8001ea8:	00000402 	.word	0x00000402
 8001eac:	00000406 	.word	0x00000406
 8001eb0:	ffff8f0f 	.word	0xffff8f0f
 8001eb4:	ffff8000 	.word	0xffff8000

08001eb8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	1dbb      	adds	r3, r7, #6
 8001ec4:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ec6:	1dbb      	adds	r3, r7, #6
 8001ec8:	881a      	ldrh	r2, [r3, #0]
 8001eca:	2380      	movs	r3, #128	; 0x80
 8001ecc:	01db      	lsls	r3, r3, #7
 8001ece:	4013      	ands	r3, r2
 8001ed0:	d100      	bne.n	8001ed4 <HAL_PCD_EP_DB_Receive+0x1c>
 8001ed2:	e07f      	b.n	8001fd4 <HAL_PCD_EP_DB_Receive+0x11c>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2250      	movs	r2, #80	; 0x50
 8001eda:	5a9b      	ldrh	r3, [r3, r2]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	001a      	movs	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	18d2      	adds	r2, r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	18d3      	adds	r3, r2, r3
 8001eee:	4a7c      	ldr	r2, [pc, #496]	; (80020e0 <HAL_PCD_EP_DB_Receive+0x228>)
 8001ef0:	4694      	mov	ip, r2
 8001ef2:	4463      	add	r3, ip
 8001ef4:	881a      	ldrh	r2, [r3, #0]
 8001ef6:	211a      	movs	r1, #26
 8001ef8:	187b      	adds	r3, r7, r1
 8001efa:	0592      	lsls	r2, r2, #22
 8001efc:	0d92      	lsrs	r2, r2, #22
 8001efe:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	699a      	ldr	r2, [r3, #24]
 8001f04:	187b      	adds	r3, r7, r1
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d308      	bcc.n	8001f1e <HAL_PCD_EP_DB_Receive+0x66>
    {
      ep->xfer_len -= count;
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	699a      	ldr	r2, [r3, #24]
 8001f10:	231a      	movs	r3, #26
 8001f12:	18fb      	adds	r3, r7, r3
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	1ad2      	subs	r2, r2, r3
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	619a      	str	r2, [r3, #24]
 8001f1c:	e002      	b.n	8001f24 <HAL_PCD_EP_DB_Receive+0x6c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	2200      	movs	r2, #0
 8001f22:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d121      	bne.n	8001f70 <HAL_PCD_EP_DB_Receive+0xb8>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	001a      	movs	r2, r3
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	18d3      	adds	r3, r2, r3
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	2018      	movs	r0, #24
 8001f40:	183b      	adds	r3, r7, r0
 8001f42:	4968      	ldr	r1, [pc, #416]	; (80020e4 <HAL_PCD_EP_DB_Receive+0x22c>)
 8001f44:	400a      	ands	r2, r1
 8001f46:	801a      	strh	r2, [r3, #0]
 8001f48:	183b      	adds	r3, r7, r0
 8001f4a:	183a      	adds	r2, r7, r0
 8001f4c:	8812      	ldrh	r2, [r2, #0]
 8001f4e:	2180      	movs	r1, #128	; 0x80
 8001f50:	0189      	lsls	r1, r1, #6
 8001f52:	404a      	eors	r2, r1
 8001f54:	801a      	strh	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	001a      	movs	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	18d3      	adds	r3, r2, r3
 8001f64:	183a      	adds	r2, r7, r0
 8001f66:	8812      	ldrh	r2, [r2, #0]
 8001f68:	495f      	ldr	r1, [pc, #380]	; (80020e8 <HAL_PCD_EP_DB_Receive+0x230>)
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	b292      	uxth	r2, r2
 8001f6e:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f70:	1dbb      	adds	r3, r7, #6
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	2240      	movs	r2, #64	; 0x40
 8001f76:	4013      	ands	r3, r2
 8001f78:	d01a      	beq.n	8001fb0 <HAL_PCD_EP_DB_Receive+0xf8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	001a      	movs	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	18d3      	adds	r3, r2, r3
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	2016      	movs	r0, #22
 8001f8e:	183b      	adds	r3, r7, r0
 8001f90:	4956      	ldr	r1, [pc, #344]	; (80020ec <HAL_PCD_EP_DB_Receive+0x234>)
 8001f92:	400a      	ands	r2, r1
 8001f94:	801a      	strh	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	001a      	movs	r2, r3
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	18d3      	adds	r3, r2, r3
 8001fa4:	183a      	adds	r2, r7, r0
 8001fa6:	8812      	ldrh	r2, [r2, #0]
 8001fa8:	4951      	ldr	r1, [pc, #324]	; (80020f0 <HAL_PCD_EP_DB_Receive+0x238>)
 8001faa:	430a      	orrs	r2, r1
 8001fac:	b292      	uxth	r2, r2
 8001fae:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001fb0:	231a      	movs	r3, #26
 8001fb2:	18fb      	adds	r3, r7, r3
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d100      	bne.n	8001fbc <HAL_PCD_EP_DB_Receive+0x104>
 8001fba:	e089      	b.n	80020d0 <HAL_PCD_EP_DB_Receive+0x218>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6818      	ldr	r0, [r3, #0]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	6959      	ldr	r1, [r3, #20]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	891a      	ldrh	r2, [r3, #8]
 8001fc8:	231a      	movs	r3, #26
 8001fca:	18fb      	adds	r3, r7, r3
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	f003 fda6 	bl	8005b1e <USB_ReadPMA>
 8001fd2:	e07d      	b.n	80020d0 <HAL_PCD_EP_DB_Receive+0x218>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2250      	movs	r2, #80	; 0x50
 8001fda:	5a9b      	ldrh	r3, [r3, r2]
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	001a      	movs	r2, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	18d2      	adds	r2, r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	18d3      	adds	r3, r2, r3
 8001fee:	4a41      	ldr	r2, [pc, #260]	; (80020f4 <HAL_PCD_EP_DB_Receive+0x23c>)
 8001ff0:	4694      	mov	ip, r2
 8001ff2:	4463      	add	r3, ip
 8001ff4:	881a      	ldrh	r2, [r3, #0]
 8001ff6:	211a      	movs	r1, #26
 8001ff8:	187b      	adds	r3, r7, r1
 8001ffa:	0592      	lsls	r2, r2, #22
 8001ffc:	0d92      	lsrs	r2, r2, #22
 8001ffe:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	699a      	ldr	r2, [r3, #24]
 8002004:	187b      	adds	r3, r7, r1
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d308      	bcc.n	800201e <HAL_PCD_EP_DB_Receive+0x166>
    {
      ep->xfer_len -= count;
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	699a      	ldr	r2, [r3, #24]
 8002010:	231a      	movs	r3, #26
 8002012:	18fb      	adds	r3, r7, r3
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	1ad2      	subs	r2, r2, r3
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	619a      	str	r2, [r3, #24]
 800201c:	e002      	b.n	8002024 <HAL_PCD_EP_DB_Receive+0x16c>
    }
    else
    {
      ep->xfer_len = 0U;
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	2200      	movs	r2, #0
 8002022:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d121      	bne.n	8002070 <HAL_PCD_EP_DB_Receive+0x1b8>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	001a      	movs	r2, r3
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	18d3      	adds	r3, r2, r3
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	b29a      	uxth	r2, r3
 800203e:	201e      	movs	r0, #30
 8002040:	183b      	adds	r3, r7, r0
 8002042:	4928      	ldr	r1, [pc, #160]	; (80020e4 <HAL_PCD_EP_DB_Receive+0x22c>)
 8002044:	400a      	ands	r2, r1
 8002046:	801a      	strh	r2, [r3, #0]
 8002048:	183b      	adds	r3, r7, r0
 800204a:	183a      	adds	r2, r7, r0
 800204c:	8812      	ldrh	r2, [r2, #0]
 800204e:	2180      	movs	r1, #128	; 0x80
 8002050:	0189      	lsls	r1, r1, #6
 8002052:	404a      	eors	r2, r1
 8002054:	801a      	strh	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	001a      	movs	r2, r3
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	18d3      	adds	r3, r2, r3
 8002064:	183a      	adds	r2, r7, r0
 8002066:	8812      	ldrh	r2, [r2, #0]
 8002068:	491f      	ldr	r1, [pc, #124]	; (80020e8 <HAL_PCD_EP_DB_Receive+0x230>)
 800206a:	430a      	orrs	r2, r1
 800206c:	b292      	uxth	r2, r2
 800206e:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002070:	1dbb      	adds	r3, r7, #6
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	2240      	movs	r2, #64	; 0x40
 8002076:	4013      	ands	r3, r2
 8002078:	d11a      	bne.n	80020b0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	001a      	movs	r2, r3
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	18d3      	adds	r3, r2, r3
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	b29a      	uxth	r2, r3
 800208c:	201c      	movs	r0, #28
 800208e:	183b      	adds	r3, r7, r0
 8002090:	4916      	ldr	r1, [pc, #88]	; (80020ec <HAL_PCD_EP_DB_Receive+0x234>)
 8002092:	400a      	ands	r2, r1
 8002094:	801a      	strh	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	001a      	movs	r2, r3
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	18d3      	adds	r3, r2, r3
 80020a4:	183a      	adds	r2, r7, r0
 80020a6:	8812      	ldrh	r2, [r2, #0]
 80020a8:	4911      	ldr	r1, [pc, #68]	; (80020f0 <HAL_PCD_EP_DB_Receive+0x238>)
 80020aa:	430a      	orrs	r2, r1
 80020ac:	b292      	uxth	r2, r2
 80020ae:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80020b0:	231a      	movs	r3, #26
 80020b2:	18fb      	adds	r3, r7, r3
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00a      	beq.n	80020d0 <HAL_PCD_EP_DB_Receive+0x218>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6818      	ldr	r0, [r3, #0]
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	6959      	ldr	r1, [r3, #20]
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	895a      	ldrh	r2, [r3, #10]
 80020c6:	231a      	movs	r3, #26
 80020c8:	18fb      	adds	r3, r7, r3
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	f003 fd27 	bl	8005b1e <USB_ReadPMA>
    }
  }

  return count;
 80020d0:	231a      	movs	r3, #26
 80020d2:	18fb      	adds	r3, r7, r3
 80020d4:	881b      	ldrh	r3, [r3, #0]
}
 80020d6:	0018      	movs	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	b008      	add	sp, #32
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	00000402 	.word	0x00000402
 80020e4:	ffffbf8f 	.word	0xffffbf8f
 80020e8:	ffff8080 	.word	0xffff8080
 80020ec:	ffff8f8f 	.word	0xffff8f8f
 80020f0:	ffff80c0 	.word	0xffff80c0
 80020f4:	00000406 	.word	0x00000406

080020f8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b092      	sub	sp, #72	; 0x48
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	1dbb      	adds	r3, r7, #6
 8002104:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002106:	1dbb      	adds	r3, r7, #6
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	2240      	movs	r2, #64	; 0x40
 800210c:	4013      	ands	r3, r2
 800210e:	d100      	bne.n	8002112 <HAL_PCD_EP_DB_Transmit+0x1a>
 8002110:	e12f      	b.n	8002372 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2250      	movs	r2, #80	; 0x50
 8002118:	5a9b      	ldrh	r3, [r3, r2]
 800211a:	b29b      	uxth	r3, r3
 800211c:	001a      	movs	r2, r3
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	18d2      	adds	r2, r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	18d3      	adds	r3, r2, r3
 800212c:	4abc      	ldr	r2, [pc, #752]	; (8002420 <HAL_PCD_EP_DB_Transmit+0x328>)
 800212e:	4694      	mov	ip, r2
 8002130:	4463      	add	r3, ip
 8002132:	881a      	ldrh	r2, [r3, #0]
 8002134:	212e      	movs	r1, #46	; 0x2e
 8002136:	187b      	adds	r3, r7, r1
 8002138:	0592      	lsls	r2, r2, #22
 800213a:	0d92      	lsrs	r2, r2, #22
 800213c:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	699a      	ldr	r2, [r3, #24]
 8002142:	187b      	adds	r3, r7, r1
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d908      	bls.n	800215c <HAL_PCD_EP_DB_Transmit+0x64>
    {
      ep->xfer_len -= TxByteNbre;
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	699a      	ldr	r2, [r3, #24]
 800214e:	232e      	movs	r3, #46	; 0x2e
 8002150:	18fb      	adds	r3, r7, r3
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	1ad2      	subs	r2, r2, r3
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	619a      	str	r2, [r3, #24]
 800215a:	e002      	b.n	8002162 <HAL_PCD_EP_DB_Transmit+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	2200      	movs	r2, #0
 8002160:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d129      	bne.n	80021be <HAL_PCD_EP_DB_Transmit+0xc6>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	781a      	ldrb	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	0011      	movs	r1, r2
 8002172:	0018      	movs	r0, r3
 8002174:	f005 fc10 	bl	8007998 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002178:	1dbb      	adds	r3, r7, #6
 800217a:	881a      	ldrh	r2, [r3, #0]
 800217c:	2380      	movs	r3, #128	; 0x80
 800217e:	01db      	lsls	r3, r3, #7
 8002180:	4013      	ands	r3, r2
 8002182:	d100      	bne.n	8002186 <HAL_PCD_EP_DB_Transmit+0x8e>
 8002184:	e231      	b.n	80025ea <HAL_PCD_EP_DB_Transmit+0x4f2>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	001a      	movs	r2, r3
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	18d3      	adds	r3, r2, r3
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	b29a      	uxth	r2, r3
 8002198:	2012      	movs	r0, #18
 800219a:	183b      	adds	r3, r7, r0
 800219c:	49a1      	ldr	r1, [pc, #644]	; (8002424 <HAL_PCD_EP_DB_Transmit+0x32c>)
 800219e:	400a      	ands	r2, r1
 80021a0:	801a      	strh	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	001a      	movs	r2, r3
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	18d3      	adds	r3, r2, r3
 80021b0:	183a      	adds	r2, r7, r0
 80021b2:	8812      	ldrh	r2, [r2, #0]
 80021b4:	499c      	ldr	r1, [pc, #624]	; (8002428 <HAL_PCD_EP_DB_Transmit+0x330>)
 80021b6:	430a      	orrs	r2, r1
 80021b8:	b292      	uxth	r2, r2
 80021ba:	801a      	strh	r2, [r3, #0]
 80021bc:	e215      	b.n	80025ea <HAL_PCD_EP_DB_Transmit+0x4f2>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80021be:	1dbb      	adds	r3, r7, #6
 80021c0:	881a      	ldrh	r2, [r3, #0]
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	01db      	lsls	r3, r3, #7
 80021c6:	4013      	ands	r3, r2
 80021c8:	d01a      	beq.n	8002200 <HAL_PCD_EP_DB_Transmit+0x108>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	001a      	movs	r2, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	18d3      	adds	r3, r2, r3
 80021d8:	881b      	ldrh	r3, [r3, #0]
 80021da:	b29a      	uxth	r2, r3
 80021dc:	2024      	movs	r0, #36	; 0x24
 80021de:	183b      	adds	r3, r7, r0
 80021e0:	4990      	ldr	r1, [pc, #576]	; (8002424 <HAL_PCD_EP_DB_Transmit+0x32c>)
 80021e2:	400a      	ands	r2, r1
 80021e4:	801a      	strh	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	001a      	movs	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	18d3      	adds	r3, r2, r3
 80021f4:	183a      	adds	r2, r7, r0
 80021f6:	8812      	ldrh	r2, [r2, #0]
 80021f8:	498b      	ldr	r1, [pc, #556]	; (8002428 <HAL_PCD_EP_DB_Transmit+0x330>)
 80021fa:	430a      	orrs	r2, r1
 80021fc:	b292      	uxth	r2, r2
 80021fe:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	2224      	movs	r2, #36	; 0x24
 8002204:	5c9b      	ldrb	r3, [r3, r2]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d000      	beq.n	800220c <HAL_PCD_EP_DB_Transmit+0x114>
 800220a:	e1ee      	b.n	80025ea <HAL_PCD_EP_DB_Transmit+0x4f2>
      {
        ep->xfer_buff += TxByteNbre;
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	695a      	ldr	r2, [r3, #20]
 8002210:	212e      	movs	r1, #46	; 0x2e
 8002212:	187b      	adds	r3, r7, r1
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	18d2      	adds	r2, r2, r3
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	69da      	ldr	r2, [r3, #28]
 8002220:	187b      	adds	r3, r7, r1
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	18d2      	adds	r2, r2, r3
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	6a1a      	ldr	r2, [r3, #32]
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	429a      	cmp	r2, r3
 8002234:	d309      	bcc.n	800224a <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	6a1a      	ldr	r2, [r3, #32]
 8002240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002242:	1ad2      	subs	r2, r2, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	621a      	str	r2, [r3, #32]
 8002248:	e016      	b.n	8002278 <HAL_PCD_EP_DB_Transmit+0x180>
        }
        else if (ep->xfer_len_db == 0U)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d108      	bne.n	8002264 <HAL_PCD_EP_DB_Transmit+0x16c>
        {
          len = TxByteNbre;
 8002252:	232e      	movs	r3, #46	; 0x2e
 8002254:	18fb      	adds	r3, r7, r3
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	2224      	movs	r2, #36	; 0x24
 800225e:	2100      	movs	r1, #0
 8002260:	5499      	strb	r1, [r3, r2]
 8002262:	e009      	b.n	8002278 <HAL_PCD_EP_DB_Transmit+0x180>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2224      	movs	r2, #36	; 0x24
 8002268:	2100      	movs	r1, #0
 800226a:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2200      	movs	r2, #0
 8002276:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	785b      	ldrb	r3, [r3, #1]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d150      	bne.n	8002322 <HAL_PCD_EP_DB_Transmit+0x22a>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	61bb      	str	r3, [r7, #24]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2250      	movs	r2, #80	; 0x50
 800228c:	5a9b      	ldrh	r3, [r3, r2]
 800228e:	b29b      	uxth	r3, r3
 8002290:	001a      	movs	r2, r3
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	189b      	adds	r3, r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	00da      	lsls	r2, r3, #3
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	18d3      	adds	r3, r2, r3
 80022a2:	4a5f      	ldr	r2, [pc, #380]	; (8002420 <HAL_PCD_EP_DB_Transmit+0x328>)
 80022a4:	4694      	mov	ip, r2
 80022a6:	4463      	add	r3, ip
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d110      	bne.n	80022d2 <HAL_PCD_EP_DB_Transmit+0x1da>
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	4a5d      	ldr	r2, [pc, #372]	; (800242c <HAL_PCD_EP_DB_Transmit+0x334>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	801a      	strh	r2, [r3, #0]
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	4a5a      	ldr	r2, [pc, #360]	; (8002430 <HAL_PCD_EP_DB_Transmit+0x338>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	801a      	strh	r2, [r3, #0]
 80022d0:	e044      	b.n	800235c <HAL_PCD_EP_DB_Transmit+0x264>
 80022d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d4:	2b3e      	cmp	r3, #62	; 0x3e
 80022d6:	d810      	bhi.n	80022fa <HAL_PCD_EP_DB_Transmit+0x202>
 80022d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022da:	085b      	lsrs	r3, r3, #1
 80022dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80022de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e0:	2201      	movs	r2, #1
 80022e2:	4013      	ands	r3, r2
 80022e4:	d002      	beq.n	80022ec <HAL_PCD_EP_DB_Transmit+0x1f4>
 80022e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e8:	3301      	adds	r3, #1
 80022ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80022ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	029b      	lsls	r3, r3, #10
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	801a      	strh	r2, [r3, #0]
 80022f8:	e030      	b.n	800235c <HAL_PCD_EP_DB_Transmit+0x264>
 80022fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022fc:	095b      	lsrs	r3, r3, #5
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002302:	221f      	movs	r2, #31
 8002304:	4013      	ands	r3, r2
 8002306:	d102      	bne.n	800230e <HAL_PCD_EP_DB_Transmit+0x216>
 8002308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230a:	3b01      	subs	r3, #1
 800230c:	62bb      	str	r3, [r7, #40]	; 0x28
 800230e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002310:	b29b      	uxth	r3, r3
 8002312:	029b      	lsls	r3, r3, #10
 8002314:	b29b      	uxth	r3, r3
 8002316:	4a46      	ldr	r2, [pc, #280]	; (8002430 <HAL_PCD_EP_DB_Transmit+0x338>)
 8002318:	4313      	orrs	r3, r2
 800231a:	b29a      	uxth	r2, r3
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	801a      	strh	r2, [r3, #0]
 8002320:	e01c      	b.n	800235c <HAL_PCD_EP_DB_Transmit+0x264>
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	785b      	ldrb	r3, [r3, #1]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d118      	bne.n	800235c <HAL_PCD_EP_DB_Transmit+0x264>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	623b      	str	r3, [r7, #32]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2250      	movs	r2, #80	; 0x50
 8002336:	5a9b      	ldrh	r3, [r3, r2]
 8002338:	b29b      	uxth	r3, r3
 800233a:	001a      	movs	r2, r3
 800233c:	6a3b      	ldr	r3, [r7, #32]
 800233e:	189b      	adds	r3, r3, r2
 8002340:	623b      	str	r3, [r7, #32]
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	00da      	lsls	r2, r3, #3
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	18d3      	adds	r3, r2, r3
 800234c:	4a34      	ldr	r2, [pc, #208]	; (8002420 <HAL_PCD_EP_DB_Transmit+0x328>)
 800234e:	4694      	mov	ip, r2
 8002350:	4463      	add	r3, ip
 8002352:	61fb      	str	r3, [r7, #28]
 8002354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002356:	b29a      	uxth	r2, r3
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6818      	ldr	r0, [r3, #0]
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	6959      	ldr	r1, [r3, #20]
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	891a      	ldrh	r2, [r3, #8]
 8002368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800236a:	b29b      	uxth	r3, r3
 800236c:	f003 fb94 	bl	8005a98 <USB_WritePMA>
 8002370:	e13b      	b.n	80025ea <HAL_PCD_EP_DB_Transmit+0x4f2>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2250      	movs	r2, #80	; 0x50
 8002378:	5a9b      	ldrh	r3, [r3, r2]
 800237a:	b29b      	uxth	r3, r3
 800237c:	001a      	movs	r2, r3
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	18d2      	adds	r2, r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	18d3      	adds	r3, r2, r3
 800238c:	4a29      	ldr	r2, [pc, #164]	; (8002434 <HAL_PCD_EP_DB_Transmit+0x33c>)
 800238e:	4694      	mov	ip, r2
 8002390:	4463      	add	r3, ip
 8002392:	881a      	ldrh	r2, [r3, #0]
 8002394:	212e      	movs	r1, #46	; 0x2e
 8002396:	187b      	adds	r3, r7, r1
 8002398:	0592      	lsls	r2, r2, #22
 800239a:	0d92      	lsrs	r2, r2, #22
 800239c:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	699a      	ldr	r2, [r3, #24]
 80023a2:	187b      	adds	r3, r7, r1
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d308      	bcc.n	80023bc <HAL_PCD_EP_DB_Transmit+0x2c4>
    {
      ep->xfer_len -= TxByteNbre;
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	699a      	ldr	r2, [r3, #24]
 80023ae:	232e      	movs	r3, #46	; 0x2e
 80023b0:	18fb      	adds	r3, r7, r3
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	1ad2      	subs	r2, r2, r3
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	619a      	str	r2, [r3, #24]
 80023ba:	e002      	b.n	80023c2 <HAL_PCD_EP_DB_Transmit+0x2ca>
    }
    else
    {
      ep->xfer_len = 0U;
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2200      	movs	r2, #0
 80023c0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d136      	bne.n	8002438 <HAL_PCD_EP_DB_Transmit+0x340>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	781a      	ldrb	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	0011      	movs	r1, r2
 80023d2:	0018      	movs	r0, r3
 80023d4:	f005 fae0 	bl	8007998 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80023d8:	1dbb      	adds	r3, r7, #6
 80023da:	881a      	ldrh	r2, [r3, #0]
 80023dc:	2380      	movs	r3, #128	; 0x80
 80023de:	01db      	lsls	r3, r3, #7
 80023e0:	4013      	ands	r3, r2
 80023e2:	d000      	beq.n	80023e6 <HAL_PCD_EP_DB_Transmit+0x2ee>
 80023e4:	e101      	b.n	80025ea <HAL_PCD_EP_DB_Transmit+0x4f2>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	001a      	movs	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	18d3      	adds	r3, r2, r3
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	2026      	movs	r0, #38	; 0x26
 80023fa:	183b      	adds	r3, r7, r0
 80023fc:	4909      	ldr	r1, [pc, #36]	; (8002424 <HAL_PCD_EP_DB_Transmit+0x32c>)
 80023fe:	400a      	ands	r2, r1
 8002400:	801a      	strh	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	001a      	movs	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	18d3      	adds	r3, r2, r3
 8002410:	183a      	adds	r2, r7, r0
 8002412:	8812      	ldrh	r2, [r2, #0]
 8002414:	4904      	ldr	r1, [pc, #16]	; (8002428 <HAL_PCD_EP_DB_Transmit+0x330>)
 8002416:	430a      	orrs	r2, r1
 8002418:	b292      	uxth	r2, r2
 800241a:	801a      	strh	r2, [r3, #0]
 800241c:	e0e5      	b.n	80025ea <HAL_PCD_EP_DB_Transmit+0x4f2>
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	00000402 	.word	0x00000402
 8002424:	ffff8f8f 	.word	0xffff8f8f
 8002428:	ffffc080 	.word	0xffffc080
 800242c:	ffff83ff 	.word	0xffff83ff
 8002430:	ffff8000 	.word	0xffff8000
 8002434:	00000406 	.word	0x00000406
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002438:	1dbb      	adds	r3, r7, #6
 800243a:	881a      	ldrh	r2, [r3, #0]
 800243c:	2380      	movs	r3, #128	; 0x80
 800243e:	01db      	lsls	r3, r3, #7
 8002440:	4013      	ands	r3, r2
 8002442:	d11a      	bne.n	800247a <HAL_PCD_EP_DB_Transmit+0x382>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	001a      	movs	r2, r3
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	18d3      	adds	r3, r2, r3
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	b29a      	uxth	r2, r3
 8002456:	202c      	movs	r0, #44	; 0x2c
 8002458:	183b      	adds	r3, r7, r0
 800245a:	497a      	ldr	r1, [pc, #488]	; (8002644 <HAL_PCD_EP_DB_Transmit+0x54c>)
 800245c:	400a      	ands	r2, r1
 800245e:	801a      	strh	r2, [r3, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	001a      	movs	r2, r3
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	18d3      	adds	r3, r2, r3
 800246e:	183a      	adds	r2, r7, r0
 8002470:	8812      	ldrh	r2, [r2, #0]
 8002472:	4975      	ldr	r1, [pc, #468]	; (8002648 <HAL_PCD_EP_DB_Transmit+0x550>)
 8002474:	430a      	orrs	r2, r1
 8002476:	b292      	uxth	r2, r2
 8002478:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2224      	movs	r2, #36	; 0x24
 800247e:	5c9b      	ldrb	r3, [r3, r2]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d000      	beq.n	8002486 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002484:	e0b1      	b.n	80025ea <HAL_PCD_EP_DB_Transmit+0x4f2>
      {
        ep->xfer_buff += TxByteNbre;
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	695a      	ldr	r2, [r3, #20]
 800248a:	212e      	movs	r1, #46	; 0x2e
 800248c:	187b      	adds	r3, r7, r1
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	18d2      	adds	r2, r2, r3
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	69da      	ldr	r2, [r3, #28]
 800249a:	187b      	adds	r3, r7, r1
 800249c:	881b      	ldrh	r3, [r3, #0]
 800249e:	18d2      	adds	r2, r2, r3
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	6a1a      	ldr	r2, [r3, #32]
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d309      	bcc.n	80024c4 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = ep->maxpacket;
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	6a1a      	ldr	r2, [r3, #32]
 80024ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024bc:	1ad2      	subs	r2, r2, r3
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	621a      	str	r2, [r3, #32]
 80024c2:	e016      	b.n	80024f2 <HAL_PCD_EP_DB_Transmit+0x3fa>
        }
        else if (ep->xfer_len_db == 0U)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d108      	bne.n	80024de <HAL_PCD_EP_DB_Transmit+0x3e6>
        {
          len = TxByteNbre;
 80024cc:	232e      	movs	r3, #46	; 0x2e
 80024ce:	18fb      	adds	r3, r7, r3
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	2224      	movs	r2, #36	; 0x24
 80024d8:	2100      	movs	r1, #0
 80024da:	5499      	strb	r1, [r3, r2]
 80024dc:	e009      	b.n	80024f2 <HAL_PCD_EP_DB_Transmit+0x3fa>
        }
        else
        {
          len = ep->xfer_len_db;
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2200      	movs	r2, #0
 80024e8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2224      	movs	r2, #36	; 0x24
 80024ee:	2100      	movs	r1, #0
 80024f0:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	637b      	str	r3, [r7, #52]	; 0x34
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	785b      	ldrb	r3, [r3, #1]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d150      	bne.n	80025a2 <HAL_PCD_EP_DB_Transmit+0x4aa>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	647b      	str	r3, [r7, #68]	; 0x44
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2250      	movs	r2, #80	; 0x50
 800250c:	5a9b      	ldrh	r3, [r3, r2]
 800250e:	b29b      	uxth	r3, r3
 8002510:	001a      	movs	r2, r3
 8002512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002514:	189b      	adds	r3, r3, r2
 8002516:	647b      	str	r3, [r7, #68]	; 0x44
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	00da      	lsls	r2, r3, #3
 800251e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002520:	18d3      	adds	r3, r2, r3
 8002522:	4a4a      	ldr	r2, [pc, #296]	; (800264c <HAL_PCD_EP_DB_Transmit+0x554>)
 8002524:	4694      	mov	ip, r2
 8002526:	4463      	add	r3, ip
 8002528:	643b      	str	r3, [r7, #64]	; 0x40
 800252a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800252c:	2b00      	cmp	r3, #0
 800252e:	d110      	bne.n	8002552 <HAL_PCD_EP_DB_Transmit+0x45a>
 8002530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	b29b      	uxth	r3, r3
 8002536:	4a46      	ldr	r2, [pc, #280]	; (8002650 <HAL_PCD_EP_DB_Transmit+0x558>)
 8002538:	4013      	ands	r3, r2
 800253a:	b29a      	uxth	r2, r3
 800253c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800253e:	801a      	strh	r2, [r3, #0]
 8002540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	b29b      	uxth	r3, r3
 8002546:	4a43      	ldr	r2, [pc, #268]	; (8002654 <HAL_PCD_EP_DB_Transmit+0x55c>)
 8002548:	4313      	orrs	r3, r2
 800254a:	b29a      	uxth	r2, r3
 800254c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800254e:	801a      	strh	r2, [r3, #0]
 8002550:	e041      	b.n	80025d6 <HAL_PCD_EP_DB_Transmit+0x4de>
 8002552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002554:	2b3e      	cmp	r3, #62	; 0x3e
 8002556:	d810      	bhi.n	800257a <HAL_PCD_EP_DB_Transmit+0x482>
 8002558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800255a:	085b      	lsrs	r3, r3, #1
 800255c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800255e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002560:	2201      	movs	r2, #1
 8002562:	4013      	ands	r3, r2
 8002564:	d002      	beq.n	800256c <HAL_PCD_EP_DB_Transmit+0x474>
 8002566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002568:	3301      	adds	r3, #1
 800256a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800256c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800256e:	b29b      	uxth	r3, r3
 8002570:	029b      	lsls	r3, r3, #10
 8002572:	b29a      	uxth	r2, r3
 8002574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002576:	801a      	strh	r2, [r3, #0]
 8002578:	e02d      	b.n	80025d6 <HAL_PCD_EP_DB_Transmit+0x4de>
 800257a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800257c:	095b      	lsrs	r3, r3, #5
 800257e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002582:	221f      	movs	r2, #31
 8002584:	4013      	ands	r3, r2
 8002586:	d102      	bne.n	800258e <HAL_PCD_EP_DB_Transmit+0x496>
 8002588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800258a:	3b01      	subs	r3, #1
 800258c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800258e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002590:	b29b      	uxth	r3, r3
 8002592:	029b      	lsls	r3, r3, #10
 8002594:	b29b      	uxth	r3, r3
 8002596:	4a2f      	ldr	r2, [pc, #188]	; (8002654 <HAL_PCD_EP_DB_Transmit+0x55c>)
 8002598:	4313      	orrs	r3, r2
 800259a:	b29a      	uxth	r2, r3
 800259c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800259e:	801a      	strh	r2, [r3, #0]
 80025a0:	e019      	b.n	80025d6 <HAL_PCD_EP_DB_Transmit+0x4de>
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	785b      	ldrb	r3, [r3, #1]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d115      	bne.n	80025d6 <HAL_PCD_EP_DB_Transmit+0x4de>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2250      	movs	r2, #80	; 0x50
 80025b0:	5a9b      	ldrh	r3, [r3, r2]
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	001a      	movs	r2, r3
 80025b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b8:	189b      	adds	r3, r3, r2
 80025ba:	637b      	str	r3, [r7, #52]	; 0x34
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	00da      	lsls	r2, r3, #3
 80025c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c4:	18d3      	adds	r3, r2, r3
 80025c6:	4a21      	ldr	r2, [pc, #132]	; (800264c <HAL_PCD_EP_DB_Transmit+0x554>)
 80025c8:	4694      	mov	ip, r2
 80025ca:	4463      	add	r3, ip
 80025cc:	633b      	str	r3, [r7, #48]	; 0x30
 80025ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6818      	ldr	r0, [r3, #0]
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	6959      	ldr	r1, [r3, #20]
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	895a      	ldrh	r2, [r3, #10]
 80025e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	f003 fa57 	bl	8005a98 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	001a      	movs	r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	18d3      	adds	r3, r2, r3
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	2010      	movs	r0, #16
 80025fe:	183b      	adds	r3, r7, r0
 8002600:	4915      	ldr	r1, [pc, #84]	; (8002658 <HAL_PCD_EP_DB_Transmit+0x560>)
 8002602:	400a      	ands	r2, r1
 8002604:	801a      	strh	r2, [r3, #0]
 8002606:	183b      	adds	r3, r7, r0
 8002608:	183a      	adds	r2, r7, r0
 800260a:	8812      	ldrh	r2, [r2, #0]
 800260c:	2110      	movs	r1, #16
 800260e:	404a      	eors	r2, r1
 8002610:	801a      	strh	r2, [r3, #0]
 8002612:	183b      	adds	r3, r7, r0
 8002614:	183a      	adds	r2, r7, r0
 8002616:	8812      	ldrh	r2, [r2, #0]
 8002618:	2120      	movs	r1, #32
 800261a:	404a      	eors	r2, r1
 800261c:	801a      	strh	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	001a      	movs	r2, r3
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	18d3      	adds	r3, r2, r3
 800262c:	183a      	adds	r2, r7, r0
 800262e:	8812      	ldrh	r2, [r2, #0]
 8002630:	490a      	ldr	r1, [pc, #40]	; (800265c <HAL_PCD_EP_DB_Transmit+0x564>)
 8002632:	430a      	orrs	r2, r1
 8002634:	b292      	uxth	r2, r2
 8002636:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	0018      	movs	r0, r3
 800263c:	46bd      	mov	sp, r7
 800263e:	b012      	add	sp, #72	; 0x48
 8002640:	bd80      	pop	{r7, pc}
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	ffff8f8f 	.word	0xffff8f8f
 8002648:	ffffc080 	.word	0xffffc080
 800264c:	00000406 	.word	0x00000406
 8002650:	ffff83ff 	.word	0xffff83ff
 8002654:	ffff8000 	.word	0xffff8000
 8002658:	ffff8fbf 	.word	0xffff8fbf
 800265c:	ffff8080 	.word	0xffff8080

08002660 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002660:	b590      	push	{r4, r7, lr}
 8002662:	b087      	sub	sp, #28
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	0008      	movs	r0, r1
 800266a:	0011      	movs	r1, r2
 800266c:	607b      	str	r3, [r7, #4]
 800266e:	240a      	movs	r4, #10
 8002670:	193b      	adds	r3, r7, r4
 8002672:	1c02      	adds	r2, r0, #0
 8002674:	801a      	strh	r2, [r3, #0]
 8002676:	2308      	movs	r3, #8
 8002678:	18fb      	adds	r3, r7, r3
 800267a:	1c0a      	adds	r2, r1, #0
 800267c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800267e:	193b      	adds	r3, r7, r4
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	2280      	movs	r2, #128	; 0x80
 8002684:	4013      	ands	r3, r2
 8002686:	b29b      	uxth	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00d      	beq.n	80026a8 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800268c:	230a      	movs	r3, #10
 800268e:	18fb      	adds	r3, r7, r3
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	2207      	movs	r2, #7
 8002694:	4013      	ands	r3, r2
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	0013      	movs	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	189b      	adds	r3, r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	18d3      	adds	r3, r2, r3
 80026a4:	617b      	str	r3, [r7, #20]
 80026a6:	e00b      	b.n	80026c0 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026a8:	230a      	movs	r3, #10
 80026aa:	18fb      	adds	r3, r7, r3
 80026ac:	881a      	ldrh	r2, [r3, #0]
 80026ae:	0013      	movs	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	189b      	adds	r3, r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	3369      	adds	r3, #105	; 0x69
 80026b8:	33ff      	adds	r3, #255	; 0xff
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	18d3      	adds	r3, r2, r3
 80026be:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80026c0:	2308      	movs	r3, #8
 80026c2:	18fb      	adds	r3, r7, r3
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d107      	bne.n	80026da <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	2200      	movs	r2, #0
 80026ce:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	80da      	strh	r2, [r3, #6]
 80026d8:	e00b      	b.n	80026f2 <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2201      	movs	r2, #1
 80026de:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	0c1b      	lsrs	r3, r3, #16
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	0018      	movs	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	b007      	add	sp, #28
 80026fa:	bd90      	pop	{r4, r7, pc}

080026fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	23ba      	movs	r3, #186	; 0xba
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	2101      	movs	r1, #1
 8002712:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	23b8      	movs	r3, #184	; 0xb8
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	2100      	movs	r1, #0
 800271c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2254      	movs	r2, #84	; 0x54
 8002722:	5a9b      	ldrh	r3, [r3, r2]
 8002724:	b29b      	uxth	r3, r3
 8002726:	2201      	movs	r2, #1
 8002728:	4313      	orrs	r3, r2
 800272a:	b299      	uxth	r1, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2254      	movs	r2, #84	; 0x54
 8002730:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2254      	movs	r2, #84	; 0x54
 8002736:	5a9b      	ldrh	r3, [r3, r2]
 8002738:	b29b      	uxth	r3, r3
 800273a:	2202      	movs	r2, #2
 800273c:	4313      	orrs	r3, r2
 800273e:	b299      	uxth	r1, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2254      	movs	r2, #84	; 0x54
 8002744:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	0018      	movs	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	b004      	add	sp, #16
 800274e:	bd80      	pop	{r7, pc}

08002750 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	000a      	movs	r2, r1
 800275a:	1cfb      	adds	r3, r7, #3
 800275c:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	46bd      	mov	sp, r7
 8002762:	b002      	add	sp, #8
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002768:	b5b0      	push	{r4, r5, r7, lr}
 800276a:	b08a      	sub	sp, #40	; 0x28
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d102      	bne.n	800277c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	f000 fbab 	bl	8002ed2 <HAL_RCC_OscConfig+0x76a>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800277c:	4bce      	ldr	r3, [pc, #824]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	220c      	movs	r2, #12
 8002782:	4013      	ands	r3, r2
 8002784:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002786:	4bcc      	ldr	r3, [pc, #816]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	2380      	movs	r3, #128	; 0x80
 800278c:	025b      	lsls	r3, r3, #9
 800278e:	4013      	ands	r3, r2
 8002790:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2201      	movs	r2, #1
 8002798:	4013      	ands	r3, r2
 800279a:	d100      	bne.n	800279e <HAL_RCC_OscConfig+0x36>
 800279c:	e07e      	b.n	800289c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	d007      	beq.n	80027b4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	2b0c      	cmp	r3, #12
 80027a8:	d112      	bne.n	80027d0 <HAL_RCC_OscConfig+0x68>
 80027aa:	69fa      	ldr	r2, [r7, #28]
 80027ac:	2380      	movs	r3, #128	; 0x80
 80027ae:	025b      	lsls	r3, r3, #9
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d10d      	bne.n	80027d0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b4:	4bc0      	ldr	r3, [pc, #768]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	2380      	movs	r3, #128	; 0x80
 80027ba:	029b      	lsls	r3, r3, #10
 80027bc:	4013      	ands	r3, r2
 80027be:	d100      	bne.n	80027c2 <HAL_RCC_OscConfig+0x5a>
 80027c0:	e06b      	b.n	800289a <HAL_RCC_OscConfig+0x132>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d167      	bne.n	800289a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	f000 fb81 	bl	8002ed2 <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	2380      	movs	r3, #128	; 0x80
 80027d6:	025b      	lsls	r3, r3, #9
 80027d8:	429a      	cmp	r2, r3
 80027da:	d107      	bne.n	80027ec <HAL_RCC_OscConfig+0x84>
 80027dc:	4bb6      	ldr	r3, [pc, #728]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	4bb5      	ldr	r3, [pc, #724]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 80027e2:	2180      	movs	r1, #128	; 0x80
 80027e4:	0249      	lsls	r1, r1, #9
 80027e6:	430a      	orrs	r2, r1
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	e027      	b.n	800283c <HAL_RCC_OscConfig+0xd4>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	23a0      	movs	r3, #160	; 0xa0
 80027f2:	02db      	lsls	r3, r3, #11
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d10e      	bne.n	8002816 <HAL_RCC_OscConfig+0xae>
 80027f8:	4baf      	ldr	r3, [pc, #700]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4bae      	ldr	r3, [pc, #696]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 80027fe:	2180      	movs	r1, #128	; 0x80
 8002800:	02c9      	lsls	r1, r1, #11
 8002802:	430a      	orrs	r2, r1
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	4bac      	ldr	r3, [pc, #688]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	4bab      	ldr	r3, [pc, #684]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 800280c:	2180      	movs	r1, #128	; 0x80
 800280e:	0249      	lsls	r1, r1, #9
 8002810:	430a      	orrs	r2, r1
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	e012      	b.n	800283c <HAL_RCC_OscConfig+0xd4>
 8002816:	4ba8      	ldr	r3, [pc, #672]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	4ba7      	ldr	r3, [pc, #668]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 800281c:	49a7      	ldr	r1, [pc, #668]	; (8002abc <HAL_RCC_OscConfig+0x354>)
 800281e:	400a      	ands	r2, r1
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	4ba5      	ldr	r3, [pc, #660]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	2380      	movs	r3, #128	; 0x80
 8002828:	025b      	lsls	r3, r3, #9
 800282a:	4013      	ands	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	4ba1      	ldr	r3, [pc, #644]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	4ba0      	ldr	r3, [pc, #640]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 8002836:	49a2      	ldr	r1, [pc, #648]	; (8002ac0 <HAL_RCC_OscConfig+0x358>)
 8002838:	400a      	ands	r2, r1
 800283a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d015      	beq.n	8002870 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002844:	f7fe f876 	bl	8000934 <HAL_GetTick>
 8002848:	0003      	movs	r3, r0
 800284a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800284c:	e009      	b.n	8002862 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800284e:	f7fe f871 	bl	8000934 <HAL_GetTick>
 8002852:	0002      	movs	r2, r0
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b64      	cmp	r3, #100	; 0x64
 800285a:	d902      	bls.n	8002862 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	f000 fb38 	bl	8002ed2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002862:	4b95      	ldr	r3, [pc, #596]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	2380      	movs	r3, #128	; 0x80
 8002868:	029b      	lsls	r3, r3, #10
 800286a:	4013      	ands	r3, r2
 800286c:	d0ef      	beq.n	800284e <HAL_RCC_OscConfig+0xe6>
 800286e:	e015      	b.n	800289c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002870:	f7fe f860 	bl	8000934 <HAL_GetTick>
 8002874:	0003      	movs	r3, r0
 8002876:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800287a:	f7fe f85b 	bl	8000934 <HAL_GetTick>
 800287e:	0002      	movs	r2, r0
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b64      	cmp	r3, #100	; 0x64
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e322      	b.n	8002ed2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800288c:	4b8a      	ldr	r3, [pc, #552]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	2380      	movs	r3, #128	; 0x80
 8002892:	029b      	lsls	r3, r3, #10
 8002894:	4013      	ands	r3, r2
 8002896:	d1f0      	bne.n	800287a <HAL_RCC_OscConfig+0x112>
 8002898:	e000      	b.n	800289c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800289a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2202      	movs	r2, #2
 80028a2:	4013      	ands	r3, r2
 80028a4:	d100      	bne.n	80028a8 <HAL_RCC_OscConfig+0x140>
 80028a6:	e08a      	b.n	80029be <HAL_RCC_OscConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d005      	beq.n	80028c0 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028b4:	6a3b      	ldr	r3, [r7, #32]
 80028b6:	2b0c      	cmp	r3, #12
 80028b8:	d13d      	bne.n	8002936 <HAL_RCC_OscConfig+0x1ce>
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d13a      	bne.n	8002936 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80028c0:	4b7d      	ldr	r3, [pc, #500]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2204      	movs	r2, #4
 80028c6:	4013      	ands	r3, r2
 80028c8:	d004      	beq.n	80028d4 <HAL_RCC_OscConfig+0x16c>
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e2fe      	b.n	8002ed2 <HAL_RCC_OscConfig+0x76a>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d4:	4b78      	ldr	r3, [pc, #480]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	4a7a      	ldr	r2, [pc, #488]	; (8002ac4 <HAL_RCC_OscConfig+0x35c>)
 80028da:	4013      	ands	r3, r2
 80028dc:	0019      	movs	r1, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	021a      	lsls	r2, r3, #8
 80028e4:	4b74      	ldr	r3, [pc, #464]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 80028e6:	430a      	orrs	r2, r1
 80028e8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80028ea:	4b73      	ldr	r3, [pc, #460]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2209      	movs	r2, #9
 80028f0:	4393      	bics	r3, r2
 80028f2:	0019      	movs	r1, r3
 80028f4:	4b70      	ldr	r3, [pc, #448]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028fc:	f000 fc1e 	bl	800313c <HAL_RCC_GetSysClockFreq>
 8002900:	0001      	movs	r1, r0
 8002902:	4b6d      	ldr	r3, [pc, #436]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	091b      	lsrs	r3, r3, #4
 8002908:	220f      	movs	r2, #15
 800290a:	4013      	ands	r3, r2
 800290c:	4a6e      	ldr	r2, [pc, #440]	; (8002ac8 <HAL_RCC_OscConfig+0x360>)
 800290e:	5cd3      	ldrb	r3, [r2, r3]
 8002910:	000a      	movs	r2, r1
 8002912:	40da      	lsrs	r2, r3
 8002914:	4b6d      	ldr	r3, [pc, #436]	; (8002acc <HAL_RCC_OscConfig+0x364>)
 8002916:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8002918:	2513      	movs	r5, #19
 800291a:	197c      	adds	r4, r7, r5
 800291c:	2000      	movs	r0, #0
 800291e:	f7fd ffc3 	bl	80008a8 <HAL_InitTick>
 8002922:	0003      	movs	r3, r0
 8002924:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002926:	197b      	adds	r3, r7, r5
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d047      	beq.n	80029be <HAL_RCC_OscConfig+0x256>
      {
        return status;
 800292e:	2313      	movs	r3, #19
 8002930:	18fb      	adds	r3, r7, r3
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	e2cd      	b.n	8002ed2 <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d027      	beq.n	800298c <HAL_RCC_OscConfig+0x224>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800293c:	4b5e      	ldr	r3, [pc, #376]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2209      	movs	r2, #9
 8002942:	4393      	bics	r3, r2
 8002944:	0019      	movs	r1, r3
 8002946:	4b5c      	ldr	r3, [pc, #368]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	430a      	orrs	r2, r1
 800294c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294e:	f7fd fff1 	bl	8000934 <HAL_GetTick>
 8002952:	0003      	movs	r3, r0
 8002954:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002958:	f7fd ffec 	bl	8000934 <HAL_GetTick>
 800295c:	0002      	movs	r2, r0
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e2b3      	b.n	8002ed2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800296a:	4b53      	ldr	r3, [pc, #332]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2204      	movs	r2, #4
 8002970:	4013      	ands	r3, r2
 8002972:	d0f1      	beq.n	8002958 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002974:	4b50      	ldr	r3, [pc, #320]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	4a52      	ldr	r2, [pc, #328]	; (8002ac4 <HAL_RCC_OscConfig+0x35c>)
 800297a:	4013      	ands	r3, r2
 800297c:	0019      	movs	r1, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	021a      	lsls	r2, r3, #8
 8002984:	4b4c      	ldr	r3, [pc, #304]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 8002986:	430a      	orrs	r2, r1
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	e018      	b.n	80029be <HAL_RCC_OscConfig+0x256>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800298c:	4b4a      	ldr	r3, [pc, #296]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4b49      	ldr	r3, [pc, #292]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 8002992:	2101      	movs	r1, #1
 8002994:	438a      	bics	r2, r1
 8002996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002998:	f7fd ffcc 	bl	8000934 <HAL_GetTick>
 800299c:	0003      	movs	r3, r0
 800299e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x24c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029a2:	f7fd ffc7 	bl	8000934 <HAL_GetTick>
 80029a6:	0002      	movs	r2, r0
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e28e      	b.n	8002ed2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029b4:	4b40      	ldr	r3, [pc, #256]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2204      	movs	r2, #4
 80029ba:	4013      	ands	r3, r2
 80029bc:	d1f1      	bne.n	80029a2 <HAL_RCC_OscConfig+0x23a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2210      	movs	r2, #16
 80029c4:	4013      	ands	r3, r2
 80029c6:	d100      	bne.n	80029ca <HAL_RCC_OscConfig+0x262>
 80029c8:	e09e      	b.n	8002b08 <HAL_RCC_OscConfig+0x3a0>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d13f      	bne.n	8002a50 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029d0:	4b39      	ldr	r3, [pc, #228]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	2380      	movs	r3, #128	; 0x80
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4013      	ands	r3, r2
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_OscConfig+0x280>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_RCC_OscConfig+0x280>
      {
        return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e274      	b.n	8002ed2 <HAL_RCC_OscConfig+0x76a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029e8:	4b33      	ldr	r3, [pc, #204]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	4a38      	ldr	r2, [pc, #224]	; (8002ad0 <HAL_RCC_OscConfig+0x368>)
 80029ee:	4013      	ands	r3, r2
 80029f0:	0019      	movs	r1, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029f6:	4b30      	ldr	r3, [pc, #192]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 80029f8:	430a      	orrs	r2, r1
 80029fa:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029fc:	4b2e      	ldr	r3, [pc, #184]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	021b      	lsls	r3, r3, #8
 8002a02:	0a19      	lsrs	r1, r3, #8
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	061a      	lsls	r2, r3, #24
 8002a0a:	4b2b      	ldr	r3, [pc, #172]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	0b5b      	lsrs	r3, r3, #13
 8002a16:	3301      	adds	r3, #1
 8002a18:	2280      	movs	r2, #128	; 0x80
 8002a1a:	0212      	lsls	r2, r2, #8
 8002a1c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002a1e:	4b26      	ldr	r3, [pc, #152]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	091b      	lsrs	r3, r3, #4
 8002a24:	210f      	movs	r1, #15
 8002a26:	400b      	ands	r3, r1
 8002a28:	4927      	ldr	r1, [pc, #156]	; (8002ac8 <HAL_RCC_OscConfig+0x360>)
 8002a2a:	5ccb      	ldrb	r3, [r1, r3]
 8002a2c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002a2e:	4b27      	ldr	r3, [pc, #156]	; (8002acc <HAL_RCC_OscConfig+0x364>)
 8002a30:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8002a32:	2513      	movs	r5, #19
 8002a34:	197c      	adds	r4, r7, r5
 8002a36:	2000      	movs	r0, #0
 8002a38:	f7fd ff36 	bl	80008a8 <HAL_InitTick>
 8002a3c:	0003      	movs	r3, r0
 8002a3e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002a40:	197b      	adds	r3, r7, r5
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d05f      	beq.n	8002b08 <HAL_RCC_OscConfig+0x3a0>
        {
          return status;
 8002a48:	2313      	movs	r3, #19
 8002a4a:	18fb      	adds	r3, r7, r3
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	e240      	b.n	8002ed2 <HAL_RCC_OscConfig+0x76a>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d03d      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x36c>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a58:	4b17      	ldr	r3, [pc, #92]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	4b16      	ldr	r3, [pc, #88]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 8002a5e:	2180      	movs	r1, #128	; 0x80
 8002a60:	0049      	lsls	r1, r1, #1
 8002a62:	430a      	orrs	r2, r1
 8002a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a66:	f7fd ff65 	bl	8000934 <HAL_GetTick>
 8002a6a:	0003      	movs	r3, r0
 8002a6c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a70:	f7fd ff60 	bl	8000934 <HAL_GetTick>
 8002a74:	0002      	movs	r2, r0
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e227      	b.n	8002ed2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a82:	4b0d      	ldr	r3, [pc, #52]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	2380      	movs	r3, #128	; 0x80
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d0f0      	beq.n	8002a70 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a8e:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	4a0f      	ldr	r2, [pc, #60]	; (8002ad0 <HAL_RCC_OscConfig+0x368>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	0019      	movs	r1, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a9c:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aa2:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	021b      	lsls	r3, r3, #8
 8002aa8:	0a19      	lsrs	r1, r3, #8
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	061a      	lsls	r2, r3, #24
 8002ab0:	4b01      	ldr	r3, [pc, #4]	; (8002ab8 <HAL_RCC_OscConfig+0x350>)
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	e027      	b.n	8002b08 <HAL_RCC_OscConfig+0x3a0>
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	fffeffff 	.word	0xfffeffff
 8002ac0:	fffbffff 	.word	0xfffbffff
 8002ac4:	ffffe0ff 	.word	0xffffe0ff
 8002ac8:	0800805c 	.word	0x0800805c
 8002acc:	20000004 	.word	0x20000004
 8002ad0:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ad4:	4bbd      	ldr	r3, [pc, #756]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	4bbc      	ldr	r3, [pc, #752]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002ada:	49bd      	ldr	r1, [pc, #756]	; (8002dd0 <HAL_RCC_OscConfig+0x668>)
 8002adc:	400a      	ands	r2, r1
 8002ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae0:	f7fd ff28 	bl	8000934 <HAL_GetTick>
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x394>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002aea:	f7fd ff23 	bl	8000934 <HAL_GetTick>
 8002aee:	0002      	movs	r2, r0
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x394>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e1ea      	b.n	8002ed2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002afc:	4bb3      	ldr	r3, [pc, #716]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	2380      	movs	r3, #128	; 0x80
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4013      	ands	r3, r2
 8002b06:	d1f0      	bne.n	8002aea <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2208      	movs	r2, #8
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d036      	beq.n	8002b80 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d019      	beq.n	8002b4e <HAL_RCC_OscConfig+0x3e6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b1a:	4bac      	ldr	r3, [pc, #688]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002b1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b1e:	4bab      	ldr	r3, [pc, #684]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002b20:	2101      	movs	r1, #1
 8002b22:	430a      	orrs	r2, r1
 8002b24:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b26:	f7fd ff05 	bl	8000934 <HAL_GetTick>
 8002b2a:	0003      	movs	r3, r0
 8002b2c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x3da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b30:	f7fd ff00 	bl	8000934 <HAL_GetTick>
 8002b34:	0002      	movs	r2, r0
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x3da>
        {
          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e1c7      	b.n	8002ed2 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b42:	4ba2      	ldr	r3, [pc, #648]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b46:	2202      	movs	r2, #2
 8002b48:	4013      	ands	r3, r2
 8002b4a:	d0f1      	beq.n	8002b30 <HAL_RCC_OscConfig+0x3c8>
 8002b4c:	e018      	b.n	8002b80 <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b4e:	4b9f      	ldr	r3, [pc, #636]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002b50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b52:	4b9e      	ldr	r3, [pc, #632]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002b54:	2101      	movs	r1, #1
 8002b56:	438a      	bics	r2, r1
 8002b58:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b5a:	f7fd feeb 	bl	8000934 <HAL_GetTick>
 8002b5e:	0003      	movs	r3, r0
 8002b60:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x40e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b64:	f7fd fee6 	bl	8000934 <HAL_GetTick>
 8002b68:	0002      	movs	r2, r0
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e1ad      	b.n	8002ed2 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b76:	4b95      	ldr	r3, [pc, #596]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	d1f1      	bne.n	8002b64 <HAL_RCC_OscConfig+0x3fc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2204      	movs	r2, #4
 8002b86:	4013      	ands	r3, r2
 8002b88:	d100      	bne.n	8002b8c <HAL_RCC_OscConfig+0x424>
 8002b8a:	e0af      	b.n	8002cec <HAL_RCC_OscConfig+0x584>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b8c:	2327      	movs	r3, #39	; 0x27
 8002b8e:	18fb      	adds	r3, r7, r3
 8002b90:	2200      	movs	r2, #0
 8002b92:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b94:	4b8d      	ldr	r3, [pc, #564]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002b96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b98:	2380      	movs	r3, #128	; 0x80
 8002b9a:	055b      	lsls	r3, r3, #21
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	d10a      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x44e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ba0:	4b8a      	ldr	r3, [pc, #552]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002ba2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ba4:	4b89      	ldr	r3, [pc, #548]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002ba6:	2180      	movs	r1, #128	; 0x80
 8002ba8:	0549      	lsls	r1, r1, #21
 8002baa:	430a      	orrs	r2, r1
 8002bac:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002bae:	2327      	movs	r3, #39	; 0x27
 8002bb0:	18fb      	adds	r3, r7, r3
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb6:	4b87      	ldr	r3, [pc, #540]	; (8002dd4 <HAL_RCC_OscConfig+0x66c>)
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	2380      	movs	r3, #128	; 0x80
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	d11a      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x490>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bc2:	4b84      	ldr	r3, [pc, #528]	; (8002dd4 <HAL_RCC_OscConfig+0x66c>)
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	4b83      	ldr	r3, [pc, #524]	; (8002dd4 <HAL_RCC_OscConfig+0x66c>)
 8002bc8:	2180      	movs	r1, #128	; 0x80
 8002bca:	0049      	lsls	r1, r1, #1
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bd0:	f7fd feb0 	bl	8000934 <HAL_GetTick>
 8002bd4:	0003      	movs	r3, r0
 8002bd6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bda:	f7fd feab 	bl	8000934 <HAL_GetTick>
 8002bde:	0002      	movs	r2, r0
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b64      	cmp	r3, #100	; 0x64
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e172      	b.n	8002ed2 <HAL_RCC_OscConfig+0x76a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bec:	4b79      	ldr	r3, [pc, #484]	; (8002dd4 <HAL_RCC_OscConfig+0x66c>)
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	2380      	movs	r3, #128	; 0x80
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d0f0      	beq.n	8002bda <HAL_RCC_OscConfig+0x472>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	2380      	movs	r3, #128	; 0x80
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d107      	bne.n	8002c14 <HAL_RCC_OscConfig+0x4ac>
 8002c04:	4b71      	ldr	r3, [pc, #452]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002c06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c08:	4b70      	ldr	r3, [pc, #448]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002c0a:	2180      	movs	r1, #128	; 0x80
 8002c0c:	0049      	lsls	r1, r1, #1
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	651a      	str	r2, [r3, #80]	; 0x50
 8002c12:	e031      	b.n	8002c78 <HAL_RCC_OscConfig+0x510>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10c      	bne.n	8002c36 <HAL_RCC_OscConfig+0x4ce>
 8002c1c:	4b6b      	ldr	r3, [pc, #428]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002c1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c20:	4b6a      	ldr	r3, [pc, #424]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002c22:	496b      	ldr	r1, [pc, #428]	; (8002dd0 <HAL_RCC_OscConfig+0x668>)
 8002c24:	400a      	ands	r2, r1
 8002c26:	651a      	str	r2, [r3, #80]	; 0x50
 8002c28:	4b68      	ldr	r3, [pc, #416]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002c2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c2c:	4b67      	ldr	r3, [pc, #412]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002c2e:	496a      	ldr	r1, [pc, #424]	; (8002dd8 <HAL_RCC_OscConfig+0x670>)
 8002c30:	400a      	ands	r2, r1
 8002c32:	651a      	str	r2, [r3, #80]	; 0x50
 8002c34:	e020      	b.n	8002c78 <HAL_RCC_OscConfig+0x510>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	23a0      	movs	r3, #160	; 0xa0
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d10e      	bne.n	8002c60 <HAL_RCC_OscConfig+0x4f8>
 8002c42:	4b62      	ldr	r3, [pc, #392]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002c44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c46:	4b61      	ldr	r3, [pc, #388]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002c48:	2180      	movs	r1, #128	; 0x80
 8002c4a:	00c9      	lsls	r1, r1, #3
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	651a      	str	r2, [r3, #80]	; 0x50
 8002c50:	4b5e      	ldr	r3, [pc, #376]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002c52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c54:	4b5d      	ldr	r3, [pc, #372]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002c56:	2180      	movs	r1, #128	; 0x80
 8002c58:	0049      	lsls	r1, r1, #1
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	651a      	str	r2, [r3, #80]	; 0x50
 8002c5e:	e00b      	b.n	8002c78 <HAL_RCC_OscConfig+0x510>
 8002c60:	4b5a      	ldr	r3, [pc, #360]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002c62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c64:	4b59      	ldr	r3, [pc, #356]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002c66:	495a      	ldr	r1, [pc, #360]	; (8002dd0 <HAL_RCC_OscConfig+0x668>)
 8002c68:	400a      	ands	r2, r1
 8002c6a:	651a      	str	r2, [r3, #80]	; 0x50
 8002c6c:	4b57      	ldr	r3, [pc, #348]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002c6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c70:	4b56      	ldr	r3, [pc, #344]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002c72:	4959      	ldr	r1, [pc, #356]	; (8002dd8 <HAL_RCC_OscConfig+0x670>)
 8002c74:	400a      	ands	r2, r1
 8002c76:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d015      	beq.n	8002cac <HAL_RCC_OscConfig+0x544>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c80:	f7fd fe58 	bl	8000934 <HAL_GetTick>
 8002c84:	0003      	movs	r3, r0
 8002c86:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c88:	e009      	b.n	8002c9e <HAL_RCC_OscConfig+0x536>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c8a:	f7fd fe53 	bl	8000934 <HAL_GetTick>
 8002c8e:	0002      	movs	r2, r0
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	4a51      	ldr	r2, [pc, #324]	; (8002ddc <HAL_RCC_OscConfig+0x674>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x536>
        {
          return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e119      	b.n	8002ed2 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c9e:	4b4b      	ldr	r3, [pc, #300]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002ca0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ca2:	2380      	movs	r3, #128	; 0x80
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	d0ef      	beq.n	8002c8a <HAL_RCC_OscConfig+0x522>
 8002caa:	e014      	b.n	8002cd6 <HAL_RCC_OscConfig+0x56e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cac:	f7fd fe42 	bl	8000934 <HAL_GetTick>
 8002cb0:	0003      	movs	r3, r0
 8002cb2:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cb4:	e009      	b.n	8002cca <HAL_RCC_OscConfig+0x562>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cb6:	f7fd fe3d 	bl	8000934 <HAL_GetTick>
 8002cba:	0002      	movs	r2, r0
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	4a46      	ldr	r2, [pc, #280]	; (8002ddc <HAL_RCC_OscConfig+0x674>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x562>
        {
          return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e103      	b.n	8002ed2 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cca:	4b40      	ldr	r3, [pc, #256]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002ccc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cce:	2380      	movs	r3, #128	; 0x80
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	d1ef      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x54e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cd6:	2327      	movs	r3, #39	; 0x27
 8002cd8:	18fb      	adds	r3, r7, r3
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d105      	bne.n	8002cec <HAL_RCC_OscConfig+0x584>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ce0:	4b3a      	ldr	r3, [pc, #232]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002ce2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ce4:	4b39      	ldr	r3, [pc, #228]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002ce6:	493e      	ldr	r1, [pc, #248]	; (8002de0 <HAL_RCC_OscConfig+0x678>)
 8002ce8:	400a      	ands	r2, r1
 8002cea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	d049      	beq.n	8002d8a <HAL_RCC_OscConfig+0x622>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d026      	beq.n	8002d4c <HAL_RCC_OscConfig+0x5e4>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002cfe:	4b33      	ldr	r3, [pc, #204]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	4b32      	ldr	r3, [pc, #200]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002d04:	2101      	movs	r1, #1
 8002d06:	430a      	orrs	r2, r1
 8002d08:	609a      	str	r2, [r3, #8]
 8002d0a:	4b30      	ldr	r3, [pc, #192]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d0e:	4b2f      	ldr	r3, [pc, #188]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002d10:	2101      	movs	r1, #1
 8002d12:	430a      	orrs	r2, r1
 8002d14:	635a      	str	r2, [r3, #52]	; 0x34
 8002d16:	4b33      	ldr	r3, [pc, #204]	; (8002de4 <HAL_RCC_OscConfig+0x67c>)
 8002d18:	6a1a      	ldr	r2, [r3, #32]
 8002d1a:	4b32      	ldr	r3, [pc, #200]	; (8002de4 <HAL_RCC_OscConfig+0x67c>)
 8002d1c:	2180      	movs	r1, #128	; 0x80
 8002d1e:	0189      	lsls	r1, r1, #6
 8002d20:	430a      	orrs	r2, r1
 8002d22:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d24:	f7fd fe06 	bl	8000934 <HAL_GetTick>
 8002d28:	0003      	movs	r3, r0
 8002d2a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d2e:	f7fd fe01 	bl	8000934 <HAL_GetTick>
 8002d32:	0002      	movs	r2, r0
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e0c8      	b.n	8002ed2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d40:	4b22      	ldr	r3, [pc, #136]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2202      	movs	r2, #2
 8002d46:	4013      	ands	r3, r2
 8002d48:	d0f1      	beq.n	8002d2e <HAL_RCC_OscConfig+0x5c6>
 8002d4a:	e01e      	b.n	8002d8a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002d4c:	4b1f      	ldr	r3, [pc, #124]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	4b1e      	ldr	r3, [pc, #120]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002d52:	2101      	movs	r1, #1
 8002d54:	438a      	bics	r2, r1
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	4b22      	ldr	r3, [pc, #136]	; (8002de4 <HAL_RCC_OscConfig+0x67c>)
 8002d5a:	6a1a      	ldr	r2, [r3, #32]
 8002d5c:	4b21      	ldr	r3, [pc, #132]	; (8002de4 <HAL_RCC_OscConfig+0x67c>)
 8002d5e:	4922      	ldr	r1, [pc, #136]	; (8002de8 <HAL_RCC_OscConfig+0x680>)
 8002d60:	400a      	ands	r2, r1
 8002d62:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d64:	f7fd fde6 	bl	8000934 <HAL_GetTick>
 8002d68:	0003      	movs	r3, r0
 8002d6a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x618>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d6e:	f7fd fde1 	bl	8000934 <HAL_GetTick>
 8002d72:	0002      	movs	r2, r0
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e0a8      	b.n	8002ed2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d80:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	2202      	movs	r2, #2
 8002d86:	4013      	ands	r3, r2
 8002d88:	d1f1      	bne.n	8002d6e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d100      	bne.n	8002d94 <HAL_RCC_OscConfig+0x62c>
 8002d92:	e09d      	b.n	8002ed0 <HAL_RCC_OscConfig+0x768>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	2b0c      	cmp	r3, #12
 8002d98:	d100      	bne.n	8002d9c <HAL_RCC_OscConfig+0x634>
 8002d9a:	e076      	b.n	8002e8a <HAL_RCC_OscConfig+0x722>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d157      	bne.n	8002e54 <HAL_RCC_OscConfig+0x6ec>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da4:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4b08      	ldr	r3, [pc, #32]	; (8002dcc <HAL_RCC_OscConfig+0x664>)
 8002daa:	4910      	ldr	r1, [pc, #64]	; (8002dec <HAL_RCC_OscConfig+0x684>)
 8002dac:	400a      	ands	r2, r1
 8002dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db0:	f7fd fdc0 	bl	8000934 <HAL_GetTick>
 8002db4:	0003      	movs	r3, r0
 8002db6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002db8:	e01a      	b.n	8002df0 <HAL_RCC_OscConfig+0x688>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dba:	f7fd fdbb 	bl	8000934 <HAL_GetTick>
 8002dbe:	0002      	movs	r2, r0
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d913      	bls.n	8002df0 <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e082      	b.n	8002ed2 <HAL_RCC_OscConfig+0x76a>
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	fffffeff 	.word	0xfffffeff
 8002dd4:	40007000 	.word	0x40007000
 8002dd8:	fffffbff 	.word	0xfffffbff
 8002ddc:	00001388 	.word	0x00001388
 8002de0:	efffffff 	.word	0xefffffff
 8002de4:	40010000 	.word	0x40010000
 8002de8:	ffffdfff 	.word	0xffffdfff
 8002dec:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002df0:	4b3a      	ldr	r3, [pc, #232]	; (8002edc <HAL_RCC_OscConfig+0x774>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	2380      	movs	r3, #128	; 0x80
 8002df6:	049b      	lsls	r3, r3, #18
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d1de      	bne.n	8002dba <HAL_RCC_OscConfig+0x652>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dfc:	4b37      	ldr	r3, [pc, #220]	; (8002edc <HAL_RCC_OscConfig+0x774>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	4a37      	ldr	r2, [pc, #220]	; (8002ee0 <HAL_RCC_OscConfig+0x778>)
 8002e02:	4013      	ands	r3, r2
 8002e04:	0019      	movs	r1, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e14:	431a      	orrs	r2, r3
 8002e16:	4b31      	ldr	r3, [pc, #196]	; (8002edc <HAL_RCC_OscConfig+0x774>)
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e1c:	4b2f      	ldr	r3, [pc, #188]	; (8002edc <HAL_RCC_OscConfig+0x774>)
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	4b2e      	ldr	r3, [pc, #184]	; (8002edc <HAL_RCC_OscConfig+0x774>)
 8002e22:	2180      	movs	r1, #128	; 0x80
 8002e24:	0449      	lsls	r1, r1, #17
 8002e26:	430a      	orrs	r2, r1
 8002e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2a:	f7fd fd83 	bl	8000934 <HAL_GetTick>
 8002e2e:	0003      	movs	r3, r0
 8002e30:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e34:	f7fd fd7e 	bl	8000934 <HAL_GetTick>
 8002e38:	0002      	movs	r2, r0
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x6de>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e045      	b.n	8002ed2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002e46:	4b25      	ldr	r3, [pc, #148]	; (8002edc <HAL_RCC_OscConfig+0x774>)
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	2380      	movs	r3, #128	; 0x80
 8002e4c:	049b      	lsls	r3, r3, #18
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d0f0      	beq.n	8002e34 <HAL_RCC_OscConfig+0x6cc>
 8002e52:	e03d      	b.n	8002ed0 <HAL_RCC_OscConfig+0x768>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e54:	4b21      	ldr	r3, [pc, #132]	; (8002edc <HAL_RCC_OscConfig+0x774>)
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	4b20      	ldr	r3, [pc, #128]	; (8002edc <HAL_RCC_OscConfig+0x774>)
 8002e5a:	4922      	ldr	r1, [pc, #136]	; (8002ee4 <HAL_RCC_OscConfig+0x77c>)
 8002e5c:	400a      	ands	r2, r1
 8002e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e60:	f7fd fd68 	bl	8000934 <HAL_GetTick>
 8002e64:	0003      	movs	r3, r0
 8002e66:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e6a:	f7fd fd63 	bl	8000934 <HAL_GetTick>
 8002e6e:	0002      	movs	r2, r0
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e02a      	b.n	8002ed2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e7c:	4b17      	ldr	r3, [pc, #92]	; (8002edc <HAL_RCC_OscConfig+0x774>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	2380      	movs	r3, #128	; 0x80
 8002e82:	049b      	lsls	r3, r3, #18
 8002e84:	4013      	ands	r3, r2
 8002e86:	d1f0      	bne.n	8002e6a <HAL_RCC_OscConfig+0x702>
 8002e88:	e022      	b.n	8002ed0 <HAL_RCC_OscConfig+0x768>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <HAL_RCC_OscConfig+0x72e>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e01d      	b.n	8002ed2 <HAL_RCC_OscConfig+0x76a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e96:	4b11      	ldr	r3, [pc, #68]	; (8002edc <HAL_RCC_OscConfig+0x774>)
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9c:	69fa      	ldr	r2, [r7, #28]
 8002e9e:	2380      	movs	r3, #128	; 0x80
 8002ea0:	025b      	lsls	r3, r3, #9
 8002ea2:	401a      	ands	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d10f      	bne.n	8002ecc <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002eac:	69fa      	ldr	r2, [r7, #28]
 8002eae:	23f0      	movs	r3, #240	; 0xf0
 8002eb0:	039b      	lsls	r3, r3, #14
 8002eb2:	401a      	ands	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d107      	bne.n	8002ecc <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002ebc:	69fa      	ldr	r2, [r7, #28]
 8002ebe:	23c0      	movs	r3, #192	; 0xc0
 8002ec0:	041b      	lsls	r3, r3, #16
 8002ec2:	401a      	ands	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d001      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x768>
        {
          return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e000      	b.n	8002ed2 <HAL_RCC_OscConfig+0x76a>
        }
      }
    }
  }

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	b00a      	add	sp, #40	; 0x28
 8002ed8:	bdb0      	pop	{r4, r5, r7, pc}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	ff02ffff 	.word	0xff02ffff
 8002ee4:	feffffff 	.word	0xfeffffff

08002ee8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ee8:	b5b0      	push	{r4, r5, r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e10d      	b.n	8003118 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002efc:	4b88      	ldr	r3, [pc, #544]	; (8003120 <HAL_RCC_ClockConfig+0x238>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2201      	movs	r2, #1
 8002f02:	4013      	ands	r3, r2
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d911      	bls.n	8002f2e <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f0a:	4b85      	ldr	r3, [pc, #532]	; (8003120 <HAL_RCC_ClockConfig+0x238>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	4393      	bics	r3, r2
 8002f12:	0019      	movs	r1, r3
 8002f14:	4b82      	ldr	r3, [pc, #520]	; (8003120 <HAL_RCC_ClockConfig+0x238>)
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1c:	4b80      	ldr	r3, [pc, #512]	; (8003120 <HAL_RCC_ClockConfig+0x238>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2201      	movs	r2, #1
 8002f22:	4013      	ands	r3, r2
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d001      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e0f4      	b.n	8003118 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2202      	movs	r2, #2
 8002f34:	4013      	ands	r3, r2
 8002f36:	d009      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f38:	4b7a      	ldr	r3, [pc, #488]	; (8003124 <HAL_RCC_ClockConfig+0x23c>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	22f0      	movs	r2, #240	; 0xf0
 8002f3e:	4393      	bics	r3, r2
 8002f40:	0019      	movs	r1, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	4b77      	ldr	r3, [pc, #476]	; (8003124 <HAL_RCC_ClockConfig+0x23c>)
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2201      	movs	r2, #1
 8002f52:	4013      	ands	r3, r2
 8002f54:	d100      	bne.n	8002f58 <HAL_RCC_ClockConfig+0x70>
 8002f56:	e089      	b.n	800306c <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d107      	bne.n	8002f70 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f60:	4b70      	ldr	r3, [pc, #448]	; (8003124 <HAL_RCC_ClockConfig+0x23c>)
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	2380      	movs	r3, #128	; 0x80
 8002f66:	029b      	lsls	r3, r3, #10
 8002f68:	4013      	ands	r3, r2
 8002f6a:	d120      	bne.n	8002fae <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0d3      	b.n	8003118 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	d107      	bne.n	8002f88 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f78:	4b6a      	ldr	r3, [pc, #424]	; (8003124 <HAL_RCC_ClockConfig+0x23c>)
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	2380      	movs	r3, #128	; 0x80
 8002f7e:	049b      	lsls	r3, r3, #18
 8002f80:	4013      	ands	r3, r2
 8002f82:	d114      	bne.n	8002fae <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e0c7      	b.n	8003118 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d106      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f90:	4b64      	ldr	r3, [pc, #400]	; (8003124 <HAL_RCC_ClockConfig+0x23c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2204      	movs	r2, #4
 8002f96:	4013      	ands	r3, r2
 8002f98:	d109      	bne.n	8002fae <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e0bc      	b.n	8003118 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f9e:	4b61      	ldr	r3, [pc, #388]	; (8003124 <HAL_RCC_ClockConfig+0x23c>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	2380      	movs	r3, #128	; 0x80
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	d101      	bne.n	8002fae <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e0b4      	b.n	8003118 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fae:	4b5d      	ldr	r3, [pc, #372]	; (8003124 <HAL_RCC_ClockConfig+0x23c>)
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	2203      	movs	r2, #3
 8002fb4:	4393      	bics	r3, r2
 8002fb6:	0019      	movs	r1, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	4b59      	ldr	r3, [pc, #356]	; (8003124 <HAL_RCC_ClockConfig+0x23c>)
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fc2:	f7fd fcb7 	bl	8000934 <HAL_GetTick>
 8002fc6:	0003      	movs	r3, r0
 8002fc8:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d111      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fd2:	e009      	b.n	8002fe8 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd4:	f7fd fcae 	bl	8000934 <HAL_GetTick>
 8002fd8:	0002      	movs	r2, r0
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	4a52      	ldr	r2, [pc, #328]	; (8003128 <HAL_RCC_ClockConfig+0x240>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e097      	b.n	8003118 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fe8:	4b4e      	ldr	r3, [pc, #312]	; (8003124 <HAL_RCC_ClockConfig+0x23c>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	220c      	movs	r2, #12
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d1ef      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0xec>
 8002ff4:	e03a      	b.n	800306c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d111      	bne.n	8003022 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ffe:	e009      	b.n	8003014 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003000:	f7fd fc98 	bl	8000934 <HAL_GetTick>
 8003004:	0002      	movs	r2, r0
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	4a47      	ldr	r2, [pc, #284]	; (8003128 <HAL_RCC_ClockConfig+0x240>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e081      	b.n	8003118 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003014:	4b43      	ldr	r3, [pc, #268]	; (8003124 <HAL_RCC_ClockConfig+0x23c>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	220c      	movs	r2, #12
 800301a:	4013      	ands	r3, r2
 800301c:	2b0c      	cmp	r3, #12
 800301e:	d1ef      	bne.n	8003000 <HAL_RCC_ClockConfig+0x118>
 8003020:	e024      	b.n	800306c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d11b      	bne.n	8003062 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800302a:	e009      	b.n	8003040 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800302c:	f7fd fc82 	bl	8000934 <HAL_GetTick>
 8003030:	0002      	movs	r2, r0
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	4a3c      	ldr	r2, [pc, #240]	; (8003128 <HAL_RCC_ClockConfig+0x240>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e06b      	b.n	8003118 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003040:	4b38      	ldr	r3, [pc, #224]	; (8003124 <HAL_RCC_ClockConfig+0x23c>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	220c      	movs	r2, #12
 8003046:	4013      	ands	r3, r2
 8003048:	2b04      	cmp	r3, #4
 800304a:	d1ef      	bne.n	800302c <HAL_RCC_ClockConfig+0x144>
 800304c:	e00e      	b.n	800306c <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800304e:	f7fd fc71 	bl	8000934 <HAL_GetTick>
 8003052:	0002      	movs	r2, r0
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	4a33      	ldr	r2, [pc, #204]	; (8003128 <HAL_RCC_ClockConfig+0x240>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e05a      	b.n	8003118 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003062:	4b30      	ldr	r3, [pc, #192]	; (8003124 <HAL_RCC_ClockConfig+0x23c>)
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	220c      	movs	r2, #12
 8003068:	4013      	ands	r3, r2
 800306a:	d1f0      	bne.n	800304e <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800306c:	4b2c      	ldr	r3, [pc, #176]	; (8003120 <HAL_RCC_ClockConfig+0x238>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2201      	movs	r2, #1
 8003072:	4013      	ands	r3, r2
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	429a      	cmp	r2, r3
 8003078:	d211      	bcs.n	800309e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307a:	4b29      	ldr	r3, [pc, #164]	; (8003120 <HAL_RCC_ClockConfig+0x238>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2201      	movs	r2, #1
 8003080:	4393      	bics	r3, r2
 8003082:	0019      	movs	r1, r3
 8003084:	4b26      	ldr	r3, [pc, #152]	; (8003120 <HAL_RCC_ClockConfig+0x238>)
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800308c:	4b24      	ldr	r3, [pc, #144]	; (8003120 <HAL_RCC_ClockConfig+0x238>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2201      	movs	r2, #1
 8003092:	4013      	ands	r3, r2
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	429a      	cmp	r2, r3
 8003098:	d001      	beq.n	800309e <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e03c      	b.n	8003118 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2204      	movs	r2, #4
 80030a4:	4013      	ands	r3, r2
 80030a6:	d009      	beq.n	80030bc <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030a8:	4b1e      	ldr	r3, [pc, #120]	; (8003124 <HAL_RCC_ClockConfig+0x23c>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	4a1f      	ldr	r2, [pc, #124]	; (800312c <HAL_RCC_ClockConfig+0x244>)
 80030ae:	4013      	ands	r3, r2
 80030b0:	0019      	movs	r1, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	4b1b      	ldr	r3, [pc, #108]	; (8003124 <HAL_RCC_ClockConfig+0x23c>)
 80030b8:	430a      	orrs	r2, r1
 80030ba:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2208      	movs	r2, #8
 80030c2:	4013      	ands	r3, r2
 80030c4:	d00a      	beq.n	80030dc <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030c6:	4b17      	ldr	r3, [pc, #92]	; (8003124 <HAL_RCC_ClockConfig+0x23c>)
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	4a19      	ldr	r2, [pc, #100]	; (8003130 <HAL_RCC_ClockConfig+0x248>)
 80030cc:	4013      	ands	r3, r2
 80030ce:	0019      	movs	r1, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	00da      	lsls	r2, r3, #3
 80030d6:	4b13      	ldr	r3, [pc, #76]	; (8003124 <HAL_RCC_ClockConfig+0x23c>)
 80030d8:	430a      	orrs	r2, r1
 80030da:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030dc:	f000 f82e 	bl	800313c <HAL_RCC_GetSysClockFreq>
 80030e0:	0001      	movs	r1, r0
 80030e2:	4b10      	ldr	r3, [pc, #64]	; (8003124 <HAL_RCC_ClockConfig+0x23c>)
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	091b      	lsrs	r3, r3, #4
 80030e8:	220f      	movs	r2, #15
 80030ea:	4013      	ands	r3, r2
 80030ec:	4a11      	ldr	r2, [pc, #68]	; (8003134 <HAL_RCC_ClockConfig+0x24c>)
 80030ee:	5cd3      	ldrb	r3, [r2, r3]
 80030f0:	000a      	movs	r2, r1
 80030f2:	40da      	lsrs	r2, r3
 80030f4:	4b10      	ldr	r3, [pc, #64]	; (8003138 <HAL_RCC_ClockConfig+0x250>)
 80030f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80030f8:	250b      	movs	r5, #11
 80030fa:	197c      	adds	r4, r7, r5
 80030fc:	2000      	movs	r0, #0
 80030fe:	f7fd fbd3 	bl	80008a8 <HAL_InitTick>
 8003102:	0003      	movs	r3, r0
 8003104:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003106:	197b      	adds	r3, r7, r5
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 800310e:	230b      	movs	r3, #11
 8003110:	18fb      	adds	r3, r7, r3
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	e000      	b.n	8003118 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	0018      	movs	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	b004      	add	sp, #16
 800311e:	bdb0      	pop	{r4, r5, r7, pc}
 8003120:	40022000 	.word	0x40022000
 8003124:	40021000 	.word	0x40021000
 8003128:	00001388 	.word	0x00001388
 800312c:	fffff8ff 	.word	0xfffff8ff
 8003130:	ffffc7ff 	.word	0xffffc7ff
 8003134:	0800805c 	.word	0x0800805c
 8003138:	20000004 	.word	0x20000004

0800313c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003142:	4b3b      	ldr	r3, [pc, #236]	; (8003230 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	220c      	movs	r2, #12
 800314c:	4013      	ands	r3, r2
 800314e:	2b08      	cmp	r3, #8
 8003150:	d00e      	beq.n	8003170 <HAL_RCC_GetSysClockFreq+0x34>
 8003152:	2b0c      	cmp	r3, #12
 8003154:	d00f      	beq.n	8003176 <HAL_RCC_GetSysClockFreq+0x3a>
 8003156:	2b04      	cmp	r3, #4
 8003158:	d157      	bne.n	800320a <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800315a:	4b35      	ldr	r3, [pc, #212]	; (8003230 <HAL_RCC_GetSysClockFreq+0xf4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2210      	movs	r2, #16
 8003160:	4013      	ands	r3, r2
 8003162:	d002      	beq.n	800316a <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003164:	4b33      	ldr	r3, [pc, #204]	; (8003234 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003166:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003168:	e05d      	b.n	8003226 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 800316a:	4b33      	ldr	r3, [pc, #204]	; (8003238 <HAL_RCC_GetSysClockFreq+0xfc>)
 800316c:	613b      	str	r3, [r7, #16]
      break;
 800316e:	e05a      	b.n	8003226 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003170:	4b32      	ldr	r3, [pc, #200]	; (800323c <HAL_RCC_GetSysClockFreq+0x100>)
 8003172:	613b      	str	r3, [r7, #16]
      break;
 8003174:	e057      	b.n	8003226 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	0c9b      	lsrs	r3, r3, #18
 800317a:	220f      	movs	r2, #15
 800317c:	4013      	ands	r3, r2
 800317e:	4a30      	ldr	r2, [pc, #192]	; (8003240 <HAL_RCC_GetSysClockFreq+0x104>)
 8003180:	5cd3      	ldrb	r3, [r2, r3]
 8003182:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	0d9b      	lsrs	r3, r3, #22
 8003188:	2203      	movs	r2, #3
 800318a:	4013      	ands	r3, r2
 800318c:	3301      	adds	r3, #1
 800318e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003190:	4b27      	ldr	r3, [pc, #156]	; (8003230 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	2380      	movs	r3, #128	; 0x80
 8003196:	025b      	lsls	r3, r3, #9
 8003198:	4013      	ands	r3, r2
 800319a:	d00f      	beq.n	80031bc <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800319c:	68b9      	ldr	r1, [r7, #8]
 800319e:	000a      	movs	r2, r1
 80031a0:	0152      	lsls	r2, r2, #5
 80031a2:	1a52      	subs	r2, r2, r1
 80031a4:	0193      	lsls	r3, r2, #6
 80031a6:	1a9b      	subs	r3, r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	185b      	adds	r3, r3, r1
 80031ac:	025b      	lsls	r3, r3, #9
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	0018      	movs	r0, r3
 80031b2:	f7fc ffa9 	bl	8000108 <__udivsi3>
 80031b6:	0003      	movs	r3, r0
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	e023      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80031bc:	4b1c      	ldr	r3, [pc, #112]	; (8003230 <HAL_RCC_GetSysClockFreq+0xf4>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2210      	movs	r2, #16
 80031c2:	4013      	ands	r3, r2
 80031c4:	d00f      	beq.n	80031e6 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80031c6:	68b9      	ldr	r1, [r7, #8]
 80031c8:	000a      	movs	r2, r1
 80031ca:	0152      	lsls	r2, r2, #5
 80031cc:	1a52      	subs	r2, r2, r1
 80031ce:	0193      	lsls	r3, r2, #6
 80031d0:	1a9b      	subs	r3, r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	185b      	adds	r3, r3, r1
 80031d6:	021b      	lsls	r3, r3, #8
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	0018      	movs	r0, r3
 80031dc:	f7fc ff94 	bl	8000108 <__udivsi3>
 80031e0:	0003      	movs	r3, r0
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	e00e      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 80031e6:	68b9      	ldr	r1, [r7, #8]
 80031e8:	000a      	movs	r2, r1
 80031ea:	0152      	lsls	r2, r2, #5
 80031ec:	1a52      	subs	r2, r2, r1
 80031ee:	0193      	lsls	r3, r2, #6
 80031f0:	1a9b      	subs	r3, r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	185b      	adds	r3, r3, r1
 80031f6:	029b      	lsls	r3, r3, #10
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	0018      	movs	r0, r3
 80031fc:	f7fc ff84 	bl	8000108 <__udivsi3>
 8003200:	0003      	movs	r3, r0
 8003202:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	613b      	str	r3, [r7, #16]
      break;
 8003208:	e00d      	b.n	8003226 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800320a:	4b09      	ldr	r3, [pc, #36]	; (8003230 <HAL_RCC_GetSysClockFreq+0xf4>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	0b5b      	lsrs	r3, r3, #13
 8003210:	2207      	movs	r2, #7
 8003212:	4013      	ands	r3, r2
 8003214:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	3301      	adds	r3, #1
 800321a:	2280      	movs	r2, #128	; 0x80
 800321c:	0212      	lsls	r2, r2, #8
 800321e:	409a      	lsls	r2, r3
 8003220:	0013      	movs	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
      break;
 8003224:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003226:	693b      	ldr	r3, [r7, #16]
}
 8003228:	0018      	movs	r0, r3
 800322a:	46bd      	mov	sp, r7
 800322c:	b006      	add	sp, #24
 800322e:	bd80      	pop	{r7, pc}
 8003230:	40021000 	.word	0x40021000
 8003234:	003d0900 	.word	0x003d0900
 8003238:	00f42400 	.word	0x00f42400
 800323c:	007a1200 	.word	0x007a1200
 8003240:	0800806c 	.word	0x0800806c

08003244 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2220      	movs	r2, #32
 8003252:	4013      	ands	r3, r2
 8003254:	d106      	bne.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	2380      	movs	r3, #128	; 0x80
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	4013      	ands	r3, r2
 8003260:	d100      	bne.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8003262:	e0dd      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8003264:	2317      	movs	r3, #23
 8003266:	18fb      	adds	r3, r7, r3
 8003268:	2200      	movs	r2, #0
 800326a:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800326c:	4b9c      	ldr	r3, [pc, #624]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800326e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003270:	2380      	movs	r3, #128	; 0x80
 8003272:	055b      	lsls	r3, r3, #21
 8003274:	4013      	ands	r3, r2
 8003276:	d10a      	bne.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003278:	4b99      	ldr	r3, [pc, #612]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800327a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800327c:	4b98      	ldr	r3, [pc, #608]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800327e:	2180      	movs	r1, #128	; 0x80
 8003280:	0549      	lsls	r1, r1, #21
 8003282:	430a      	orrs	r2, r1
 8003284:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003286:	2317      	movs	r3, #23
 8003288:	18fb      	adds	r3, r7, r3
 800328a:	2201      	movs	r2, #1
 800328c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328e:	4b95      	ldr	r3, [pc, #596]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	2380      	movs	r3, #128	; 0x80
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	4013      	ands	r3, r2
 8003298:	d11a      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800329a:	4b92      	ldr	r3, [pc, #584]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	4b91      	ldr	r3, [pc, #580]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80032a0:	2180      	movs	r1, #128	; 0x80
 80032a2:	0049      	lsls	r1, r1, #1
 80032a4:	430a      	orrs	r2, r1
 80032a6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032a8:	f7fd fb44 	bl	8000934 <HAL_GetTick>
 80032ac:	0003      	movs	r3, r0
 80032ae:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b0:	e008      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b2:	f7fd fb3f 	bl	8000934 <HAL_GetTick>
 80032b6:	0002      	movs	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b64      	cmp	r3, #100	; 0x64
 80032be:	d901      	bls.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e108      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c4:	4b87      	ldr	r3, [pc, #540]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	2380      	movs	r3, #128	; 0x80
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	4013      	ands	r3, r2
 80032ce:	d0f0      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80032d0:	4b83      	ldr	r3, [pc, #524]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	23c0      	movs	r3, #192	; 0xc0
 80032d6:	039b      	lsls	r3, r3, #14
 80032d8:	4013      	ands	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	23c0      	movs	r3, #192	; 0xc0
 80032e2:	039b      	lsls	r3, r3, #14
 80032e4:	4013      	ands	r3, r2
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d107      	bne.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	23c0      	movs	r3, #192	; 0xc0
 80032f2:	039b      	lsls	r3, r3, #14
 80032f4:	4013      	ands	r3, r2
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d013      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	23c0      	movs	r3, #192	; 0xc0
 8003302:	029b      	lsls	r3, r3, #10
 8003304:	401a      	ands	r2, r3
 8003306:	23c0      	movs	r3, #192	; 0xc0
 8003308:	029b      	lsls	r3, r3, #10
 800330a:	429a      	cmp	r2, r3
 800330c:	d10a      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800330e:	4b74      	ldr	r3, [pc, #464]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	2380      	movs	r3, #128	; 0x80
 8003314:	029b      	lsls	r3, r3, #10
 8003316:	401a      	ands	r2, r3
 8003318:	2380      	movs	r3, #128	; 0x80
 800331a:	029b      	lsls	r3, r3, #10
 800331c:	429a      	cmp	r2, r3
 800331e:	d101      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e0d8      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003324:	4b6e      	ldr	r3, [pc, #440]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003326:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003328:	23c0      	movs	r3, #192	; 0xc0
 800332a:	029b      	lsls	r3, r3, #10
 800332c:	4013      	ands	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d049      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	23c0      	movs	r3, #192	; 0xc0
 800333c:	029b      	lsls	r3, r3, #10
 800333e:	4013      	ands	r3, r2
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	429a      	cmp	r2, r3
 8003344:	d004      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2220      	movs	r2, #32
 800334c:	4013      	ands	r3, r2
 800334e:	d10d      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	23c0      	movs	r3, #192	; 0xc0
 8003356:	029b      	lsls	r3, r3, #10
 8003358:	4013      	ands	r3, r2
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	429a      	cmp	r2, r3
 800335e:	d034      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	2380      	movs	r3, #128	; 0x80
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	4013      	ands	r3, r2
 800336a:	d02e      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800336c:	4b5c      	ldr	r3, [pc, #368]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800336e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003370:	4a5d      	ldr	r2, [pc, #372]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003372:	4013      	ands	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003376:	4b5a      	ldr	r3, [pc, #360]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003378:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800337a:	4b59      	ldr	r3, [pc, #356]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800337c:	2180      	movs	r1, #128	; 0x80
 800337e:	0309      	lsls	r1, r1, #12
 8003380:	430a      	orrs	r2, r1
 8003382:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003384:	4b56      	ldr	r3, [pc, #344]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003386:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003388:	4b55      	ldr	r3, [pc, #340]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800338a:	4958      	ldr	r1, [pc, #352]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800338c:	400a      	ands	r2, r1
 800338e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003390:	4b53      	ldr	r3, [pc, #332]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	2380      	movs	r3, #128	; 0x80
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	4013      	ands	r3, r2
 800339e:	d014      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a0:	f7fd fac8 	bl	8000934 <HAL_GetTick>
 80033a4:	0003      	movs	r3, r0
 80033a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033a8:	e009      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033aa:	f7fd fac3 	bl	8000934 <HAL_GetTick>
 80033ae:	0002      	movs	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	4a4e      	ldr	r2, [pc, #312]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d901      	bls.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e08b      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033be:	4b48      	ldr	r3, [pc, #288]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80033c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033c2:	2380      	movs	r3, #128	; 0x80
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4013      	ands	r3, r2
 80033c8:	d0ef      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	23c0      	movs	r3, #192	; 0xc0
 80033d0:	029b      	lsls	r3, r3, #10
 80033d2:	401a      	ands	r2, r3
 80033d4:	23c0      	movs	r3, #192	; 0xc0
 80033d6:	029b      	lsls	r3, r3, #10
 80033d8:	429a      	cmp	r2, r3
 80033da:	d10c      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80033dc:	4b40      	ldr	r3, [pc, #256]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a44      	ldr	r2, [pc, #272]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80033e2:	4013      	ands	r3, r2
 80033e4:	0019      	movs	r1, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	23c0      	movs	r3, #192	; 0xc0
 80033ec:	039b      	lsls	r3, r3, #14
 80033ee:	401a      	ands	r2, r3
 80033f0:	4b3b      	ldr	r3, [pc, #236]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80033f2:	430a      	orrs	r2, r1
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	4b3a      	ldr	r3, [pc, #232]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80033f8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	23c0      	movs	r3, #192	; 0xc0
 8003400:	029b      	lsls	r3, r3, #10
 8003402:	401a      	ands	r2, r3
 8003404:	4b36      	ldr	r3, [pc, #216]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003406:	430a      	orrs	r2, r1
 8003408:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800340a:	2317      	movs	r3, #23
 800340c:	18fb      	adds	r3, r7, r3
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d105      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003414:	4b32      	ldr	r3, [pc, #200]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003416:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003418:	4b31      	ldr	r3, [pc, #196]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800341a:	4937      	ldr	r1, [pc, #220]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800341c:	400a      	ands	r2, r1
 800341e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2201      	movs	r2, #1
 8003426:	4013      	ands	r3, r2
 8003428:	d009      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800342a:	4b2d      	ldr	r3, [pc, #180]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800342c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800342e:	2203      	movs	r2, #3
 8003430:	4393      	bics	r3, r2
 8003432:	0019      	movs	r1, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68da      	ldr	r2, [r3, #12]
 8003438:	4b29      	ldr	r3, [pc, #164]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800343a:	430a      	orrs	r2, r1
 800343c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2202      	movs	r2, #2
 8003444:	4013      	ands	r3, r2
 8003446:	d009      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003448:	4b25      	ldr	r3, [pc, #148]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800344a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800344c:	220c      	movs	r2, #12
 800344e:	4393      	bics	r3, r2
 8003450:	0019      	movs	r1, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691a      	ldr	r2, [r3, #16]
 8003456:	4b22      	ldr	r3, [pc, #136]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003458:	430a      	orrs	r2, r1
 800345a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2204      	movs	r2, #4
 8003462:	4013      	ands	r3, r2
 8003464:	d009      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003466:	4b1e      	ldr	r3, [pc, #120]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800346a:	4a24      	ldr	r2, [pc, #144]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800346c:	4013      	ands	r3, r2
 800346e:	0019      	movs	r1, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	695a      	ldr	r2, [r3, #20]
 8003474:	4b1a      	ldr	r3, [pc, #104]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003476:	430a      	orrs	r2, r1
 8003478:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2208      	movs	r2, #8
 8003480:	4013      	ands	r3, r2
 8003482:	d009      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003484:	4b16      	ldr	r3, [pc, #88]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003488:	4a1d      	ldr	r2, [pc, #116]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800348a:	4013      	ands	r3, r2
 800348c:	0019      	movs	r1, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699a      	ldr	r2, [r3, #24]
 8003492:	4b13      	ldr	r3, [pc, #76]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003494:	430a      	orrs	r2, r1
 8003496:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2240      	movs	r2, #64	; 0x40
 800349e:	4013      	ands	r3, r2
 80034a0:	d009      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034a2:	4b0f      	ldr	r3, [pc, #60]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80034a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a6:	4a17      	ldr	r2, [pc, #92]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	0019      	movs	r1, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a1a      	ldr	r2, [r3, #32]
 80034b0:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80034b2:	430a      	orrs	r2, r1
 80034b4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2280      	movs	r2, #128	; 0x80
 80034bc:	4013      	ands	r3, r2
 80034be:	d009      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80034c0:	4b07      	ldr	r3, [pc, #28]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80034c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034c4:	4a10      	ldr	r2, [pc, #64]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	0019      	movs	r1, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69da      	ldr	r2, [r3, #28]
 80034ce:	4b04      	ldr	r3, [pc, #16]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80034d0:	430a      	orrs	r2, r1
 80034d2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	0018      	movs	r0, r3
 80034d8:	46bd      	mov	sp, r7
 80034da:	b006      	add	sp, #24
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	46c0      	nop			; (mov r8, r8)
 80034e0:	40021000 	.word	0x40021000
 80034e4:	40007000 	.word	0x40007000
 80034e8:	fffcffff 	.word	0xfffcffff
 80034ec:	fff7ffff 	.word	0xfff7ffff
 80034f0:	00001388 	.word	0x00001388
 80034f4:	ffcfffff 	.word	0xffcfffff
 80034f8:	efffffff 	.word	0xefffffff
 80034fc:	fffff3ff 	.word	0xfffff3ff
 8003500:	ffffcfff 	.word	0xffffcfff
 8003504:	fbffffff 	.word	0xfbffffff
 8003508:	fff3ffff 	.word	0xfff3ffff

0800350c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e01e      	b.n	800355c <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2239      	movs	r2, #57	; 0x39
 8003522:	5c9b      	ldrb	r3, [r3, r2]
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d107      	bne.n	800353a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2238      	movs	r2, #56	; 0x38
 800352e:	2100      	movs	r1, #0
 8003530:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	0018      	movs	r0, r3
 8003536:	f7fd f87d 	bl	8000634 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2239      	movs	r2, #57	; 0x39
 800353e:	2102      	movs	r1, #2
 8003540:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	3304      	adds	r3, #4
 800354a:	0019      	movs	r1, r3
 800354c:	0010      	movs	r0, r2
 800354e:	f000 f8e3 	bl	8003718 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2239      	movs	r2, #57	; 0x39
 8003556:	2101      	movs	r1, #1
 8003558:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	0018      	movs	r0, r3
 800355e:	46bd      	mov	sp, r7
 8003560:	b002      	add	sp, #8
 8003562:	bd80      	pop	{r7, pc}

08003564 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6839      	ldr	r1, [r7, #0]
 8003574:	2201      	movs	r2, #1
 8003576:	0018      	movs	r0, r3
 8003578:	f000 fa26 	bl	80039c8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	2207      	movs	r2, #7
 8003584:	4013      	ands	r3, r2
 8003586:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2b06      	cmp	r3, #6
 800358c:	d007      	beq.n	800359e <HAL_TIM_PWM_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2101      	movs	r1, #1
 800359a:	430a      	orrs	r2, r1
 800359c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	0018      	movs	r0, r3
 80035a2:	46bd      	mov	sp, r7
 80035a4:	b004      	add	sp, #16
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2238      	movs	r2, #56	; 0x38
 80035b8:	5c9b      	ldrb	r3, [r3, r2]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d101      	bne.n	80035c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80035be:	2302      	movs	r3, #2
 80035c0:	e0a4      	b.n	800370c <HAL_TIM_PWM_ConfigChannel+0x164>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2238      	movs	r2, #56	; 0x38
 80035c6:	2101      	movs	r1, #1
 80035c8:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2239      	movs	r2, #57	; 0x39
 80035ce:	2102      	movs	r1, #2
 80035d0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d029      	beq.n	800362c <HAL_TIM_PWM_ConfigChannel+0x84>
 80035d8:	d802      	bhi.n	80035e0 <HAL_TIM_PWM_ConfigChannel+0x38>
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d005      	beq.n	80035ea <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 80035de:	e08c      	b.n	80036fa <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d046      	beq.n	8003672 <HAL_TIM_PWM_ConfigChannel+0xca>
 80035e4:	2b0c      	cmp	r3, #12
 80035e6:	d065      	beq.n	80036b4 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 80035e8:	e087      	b.n	80036fa <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	0011      	movs	r1, r2
 80035f2:	0018      	movs	r0, r3
 80035f4:	f000 f8e4 	bl	80037c0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	699a      	ldr	r2, [r3, #24]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2108      	movs	r1, #8
 8003604:	430a      	orrs	r2, r1
 8003606:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699a      	ldr	r2, [r3, #24]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2104      	movs	r1, #4
 8003614:	438a      	bics	r2, r1
 8003616:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6999      	ldr	r1, [r3, #24]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	619a      	str	r2, [r3, #24]
      break;
 800362a:	e066      	b.n	80036fa <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	0011      	movs	r1, r2
 8003634:	0018      	movs	r0, r3
 8003636:	f000 f8ff 	bl	8003838 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	699a      	ldr	r2, [r3, #24]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2180      	movs	r1, #128	; 0x80
 8003646:	0109      	lsls	r1, r1, #4
 8003648:	430a      	orrs	r2, r1
 800364a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699a      	ldr	r2, [r3, #24]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	492f      	ldr	r1, [pc, #188]	; (8003714 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8003658:	400a      	ands	r2, r1
 800365a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6999      	ldr	r1, [r3, #24]
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	021a      	lsls	r2, r3, #8
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	619a      	str	r2, [r3, #24]
      break;
 8003670:	e043      	b.n	80036fa <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	0011      	movs	r1, r2
 800367a:	0018      	movs	r0, r3
 800367c:	f000 f91e 	bl	80038bc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	69da      	ldr	r2, [r3, #28]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2108      	movs	r1, #8
 800368c:	430a      	orrs	r2, r1
 800368e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	69da      	ldr	r2, [r3, #28]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2104      	movs	r1, #4
 800369c:	438a      	bics	r2, r1
 800369e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	69d9      	ldr	r1, [r3, #28]
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	61da      	str	r2, [r3, #28]
      break;
 80036b2:	e022      	b.n	80036fa <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	0011      	movs	r1, r2
 80036bc:	0018      	movs	r0, r3
 80036be:	f000 f93d 	bl	800393c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	69da      	ldr	r2, [r3, #28]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2180      	movs	r1, #128	; 0x80
 80036ce:	0109      	lsls	r1, r1, #4
 80036d0:	430a      	orrs	r2, r1
 80036d2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	69da      	ldr	r2, [r3, #28]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	490d      	ldr	r1, [pc, #52]	; (8003714 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80036e0:	400a      	ands	r2, r1
 80036e2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	69d9      	ldr	r1, [r3, #28]
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	021a      	lsls	r2, r3, #8
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	61da      	str	r2, [r3, #28]
      break;
 80036f8:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2239      	movs	r2, #57	; 0x39
 80036fe:	2101      	movs	r1, #1
 8003700:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2238      	movs	r2, #56	; 0x38
 8003706:	2100      	movs	r1, #0
 8003708:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	0018      	movs	r0, r3
 800370e:	46bd      	mov	sp, r7
 8003710:	b004      	add	sp, #16
 8003712:	bd80      	pop	{r7, pc}
 8003714:	fffffbff 	.word	0xfffffbff

08003718 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	2380      	movs	r3, #128	; 0x80
 800372c:	05db      	lsls	r3, r3, #23
 800372e:	429a      	cmp	r2, r3
 8003730:	d007      	beq.n	8003742 <TIM_Base_SetConfig+0x2a>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a1f      	ldr	r2, [pc, #124]	; (80037b4 <TIM_Base_SetConfig+0x9c>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d003      	beq.n	8003742 <TIM_Base_SetConfig+0x2a>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a1e      	ldr	r2, [pc, #120]	; (80037b8 <TIM_Base_SetConfig+0xa0>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d108      	bne.n	8003754 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2270      	movs	r2, #112	; 0x70
 8003746:	4393      	bics	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	4313      	orrs	r3, r2
 8003752:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	2380      	movs	r3, #128	; 0x80
 8003758:	05db      	lsls	r3, r3, #23
 800375a:	429a      	cmp	r2, r3
 800375c:	d007      	beq.n	800376e <TIM_Base_SetConfig+0x56>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a14      	ldr	r2, [pc, #80]	; (80037b4 <TIM_Base_SetConfig+0x9c>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d003      	beq.n	800376e <TIM_Base_SetConfig+0x56>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a13      	ldr	r2, [pc, #76]	; (80037b8 <TIM_Base_SetConfig+0xa0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d108      	bne.n	8003780 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4a12      	ldr	r2, [pc, #72]	; (80037bc <TIM_Base_SetConfig+0xa4>)
 8003772:	4013      	ands	r3, r2
 8003774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	4313      	orrs	r3, r2
 800377e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2280      	movs	r2, #128	; 0x80
 8003784:	4393      	bics	r3, r2
 8003786:	001a      	movs	r2, r3
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	4313      	orrs	r3, r2
 800378e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	615a      	str	r2, [r3, #20]
}
 80037ac:	46c0      	nop			; (mov r8, r8)
 80037ae:	46bd      	mov	sp, r7
 80037b0:	b004      	add	sp, #16
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40010800 	.word	0x40010800
 80037b8:	40011400 	.word	0x40011400
 80037bc:	fffffcff 	.word	0xfffffcff

080037c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	2201      	movs	r2, #1
 80037d0:	4393      	bics	r3, r2
 80037d2:	001a      	movs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2270      	movs	r2, #112	; 0x70
 80037ee:	4393      	bics	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2203      	movs	r2, #3
 80037f6:	4393      	bics	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	4313      	orrs	r3, r2
 8003802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	2202      	movs	r2, #2
 8003808:	4393      	bics	r3, r2
 800380a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	4313      	orrs	r3, r2
 8003814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	621a      	str	r2, [r3, #32]
}
 8003830:	46c0      	nop			; (mov r8, r8)
 8003832:	46bd      	mov	sp, r7
 8003834:	b006      	add	sp, #24
 8003836:	bd80      	pop	{r7, pc}

08003838 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	2210      	movs	r2, #16
 8003848:	4393      	bics	r3, r2
 800384a:	001a      	movs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4a13      	ldr	r2, [pc, #76]	; (80038b4 <TIM_OC2_SetConfig+0x7c>)
 8003866:	4013      	ands	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4a12      	ldr	r2, [pc, #72]	; (80038b8 <TIM_OC2_SetConfig+0x80>)
 800386e:	4013      	ands	r3, r2
 8003870:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	021b      	lsls	r3, r3, #8
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2220      	movs	r2, #32
 8003882:	4393      	bics	r3, r2
 8003884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	4313      	orrs	r3, r2
 8003890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	621a      	str	r2, [r3, #32]
}
 80038ac:	46c0      	nop			; (mov r8, r8)
 80038ae:	46bd      	mov	sp, r7
 80038b0:	b006      	add	sp, #24
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	ffff8fff 	.word	0xffff8fff
 80038b8:	fffffcff 	.word	0xfffffcff

080038bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	4a1a      	ldr	r2, [pc, #104]	; (8003934 <TIM_OC3_SetConfig+0x78>)
 80038cc:	401a      	ands	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2270      	movs	r2, #112	; 0x70
 80038e8:	4393      	bics	r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2203      	movs	r2, #3
 80038f0:	4393      	bics	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	4a0d      	ldr	r2, [pc, #52]	; (8003938 <TIM_OC3_SetConfig+0x7c>)
 8003902:	4013      	ands	r3, r2
 8003904:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	021b      	lsls	r3, r3, #8
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	4313      	orrs	r3, r2
 8003910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	621a      	str	r2, [r3, #32]
}
 800392c:	46c0      	nop			; (mov r8, r8)
 800392e:	46bd      	mov	sp, r7
 8003930:	b006      	add	sp, #24
 8003932:	bd80      	pop	{r7, pc}
 8003934:	fffffeff 	.word	0xfffffeff
 8003938:	fffffdff 	.word	0xfffffdff

0800393c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	4a1b      	ldr	r2, [pc, #108]	; (80039b8 <TIM_OC4_SetConfig+0x7c>)
 800394c:	401a      	ands	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	4a15      	ldr	r2, [pc, #84]	; (80039bc <TIM_OC4_SetConfig+0x80>)
 8003968:	4013      	ands	r3, r2
 800396a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4a14      	ldr	r2, [pc, #80]	; (80039c0 <TIM_OC4_SetConfig+0x84>)
 8003970:	4013      	ands	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	021b      	lsls	r3, r3, #8
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	4313      	orrs	r3, r2
 800397e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	4a10      	ldr	r2, [pc, #64]	; (80039c4 <TIM_OC4_SetConfig+0x88>)
 8003984:	4013      	ands	r3, r2
 8003986:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	031b      	lsls	r3, r3, #12
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	4313      	orrs	r3, r2
 8003992:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	621a      	str	r2, [r3, #32]
}
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	46bd      	mov	sp, r7
 80039b2:	b006      	add	sp, #24
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	46c0      	nop			; (mov r8, r8)
 80039b8:	ffffefff 	.word	0xffffefff
 80039bc:	ffff8fff 	.word	0xffff8fff
 80039c0:	fffffcff 	.word	0xfffffcff
 80039c4:	ffffdfff 	.word	0xffffdfff

080039c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	221f      	movs	r2, #31
 80039d8:	4013      	ands	r3, r2
 80039da:	2201      	movs	r2, #1
 80039dc:	409a      	lsls	r2, r3
 80039de:	0013      	movs	r3, r2
 80039e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	43d2      	mvns	r2, r2
 80039ea:	401a      	ands	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6a1a      	ldr	r2, [r3, #32]
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	211f      	movs	r1, #31
 80039f8:	400b      	ands	r3, r1
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	4099      	lsls	r1, r3
 80039fe:	000b      	movs	r3, r1
 8003a00:	431a      	orrs	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	621a      	str	r2, [r3, #32]
}
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	b006      	add	sp, #24
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b084      	sub	sp, #16
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
 8003a16:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2238      	movs	r2, #56	; 0x38
 8003a1c:	5c9b      	ldrb	r3, [r3, r2]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d101      	bne.n	8003a26 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a22:	2302      	movs	r3, #2
 8003a24:	e032      	b.n	8003a8c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2238      	movs	r2, #56	; 0x38
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2239      	movs	r2, #57	; 0x39
 8003a32:	2102      	movs	r1, #2
 8003a34:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2270      	movs	r2, #112	; 0x70
 8003a4a:	4393      	bics	r3, r2
 8003a4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2280      	movs	r2, #128	; 0x80
 8003a5c:	4393      	bics	r3, r2
 8003a5e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2239      	movs	r2, #57	; 0x39
 8003a7e:	2101      	movs	r1, #1
 8003a80:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2238      	movs	r2, #56	; 0x38
 8003a86:	2100      	movs	r1, #0
 8003a88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	b004      	add	sp, #16
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2244      	movs	r2, #68	; 0x44
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003aa4:	4b05      	ldr	r3, [pc, #20]	; (8003abc <USB_EnableGlobalInt+0x28>)
 8003aa6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	b299      	uxth	r1, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2240      	movs	r2, #64	; 0x40
 8003ab0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	b004      	add	sp, #16
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	0000bf80 	.word	0x0000bf80

08003ac0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ac8:	4b09      	ldr	r3, [pc, #36]	; (8003af0 <USB_DisableGlobalInt+0x30>)
 8003aca:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2240      	movs	r2, #64	; 0x40
 8003ad0:	5a9b      	ldrh	r3, [r3, r2]
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	b292      	uxth	r2, r2
 8003ad8:	43d2      	mvns	r2, r2
 8003ada:	b292      	uxth	r2, r2
 8003adc:	4013      	ands	r3, r2
 8003ade:	b299      	uxth	r1, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2240      	movs	r2, #64	; 0x40
 8003ae4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	0018      	movs	r0, r3
 8003aea:	46bd      	mov	sp, r7
 8003aec:	b004      	add	sp, #16
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	0000bf80 	.word	0x0000bf80

08003af4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003af4:	b084      	sub	sp, #16
 8003af6:	b590      	push	{r4, r7, lr}
 8003af8:	46c6      	mov	lr, r8
 8003afa:	b500      	push	{lr}
 8003afc:	b082      	sub	sp, #8
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	2004      	movs	r0, #4
 8003b04:	2410      	movs	r4, #16
 8003b06:	46a4      	mov	ip, r4
 8003b08:	2408      	movs	r4, #8
 8003b0a:	46a0      	mov	r8, r4
 8003b0c:	44b8      	add	r8, r7
 8003b0e:	44c4      	add	ip, r8
 8003b10:	4460      	add	r0, ip
 8003b12:	6001      	str	r1, [r0, #0]
 8003b14:	6042      	str	r2, [r0, #4]
 8003b16:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2240      	movs	r2, #64	; 0x40
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2240      	movs	r2, #64	; 0x40
 8003b24:	2100      	movs	r1, #0
 8003b26:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2244      	movs	r2, #68	; 0x44
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2250      	movs	r2, #80	; 0x50
 8003b34:	2100      	movs	r1, #0
 8003b36:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	b002      	add	sp, #8
 8003b40:	bc04      	pop	{r2}
 8003b42:	4690      	mov	r8, r2
 8003b44:	bc90      	pop	{r4, r7}
 8003b46:	bc08      	pop	{r3}
 8003b48:	b004      	add	sp, #16
 8003b4a:	4718      	bx	r3

08003b4c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b09a      	sub	sp, #104	; 0x68
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003b56:	2367      	movs	r3, #103	; 0x67
 8003b58:	18fb      	adds	r3, r7, r3
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	18d3      	adds	r3, r2, r3
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	2364      	movs	r3, #100	; 0x64
 8003b6e:	18fb      	adds	r3, r7, r3
 8003b70:	49cf      	ldr	r1, [pc, #828]	; (8003eb0 <USB_ActivateEndpoint+0x364>)
 8003b72:	400a      	ands	r2, r1
 8003b74:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	78db      	ldrb	r3, [r3, #3]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d020      	beq.n	8003bc0 <USB_ActivateEndpoint+0x74>
 8003b7e:	dc02      	bgt.n	8003b86 <USB_ActivateEndpoint+0x3a>
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d005      	beq.n	8003b90 <USB_ActivateEndpoint+0x44>
 8003b84:	e025      	b.n	8003bd2 <USB_ActivateEndpoint+0x86>
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d00b      	beq.n	8003ba2 <USB_ActivateEndpoint+0x56>
 8003b8a:	2b03      	cmp	r3, #3
 8003b8c:	d00f      	beq.n	8003bae <USB_ActivateEndpoint+0x62>
 8003b8e:	e020      	b.n	8003bd2 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003b90:	2264      	movs	r2, #100	; 0x64
 8003b92:	18bb      	adds	r3, r7, r2
 8003b94:	18ba      	adds	r2, r7, r2
 8003b96:	8812      	ldrh	r2, [r2, #0]
 8003b98:	2180      	movs	r1, #128	; 0x80
 8003b9a:	0089      	lsls	r1, r1, #2
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	801a      	strh	r2, [r3, #0]
      break;
 8003ba0:	e01c      	b.n	8003bdc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8003ba2:	2264      	movs	r2, #100	; 0x64
 8003ba4:	18bb      	adds	r3, r7, r2
 8003ba6:	18ba      	adds	r2, r7, r2
 8003ba8:	8812      	ldrh	r2, [r2, #0]
 8003baa:	801a      	strh	r2, [r3, #0]
      break;
 8003bac:	e016      	b.n	8003bdc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003bae:	2264      	movs	r2, #100	; 0x64
 8003bb0:	18bb      	adds	r3, r7, r2
 8003bb2:	18ba      	adds	r2, r7, r2
 8003bb4:	8812      	ldrh	r2, [r2, #0]
 8003bb6:	21c0      	movs	r1, #192	; 0xc0
 8003bb8:	00c9      	lsls	r1, r1, #3
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	801a      	strh	r2, [r3, #0]
      break;
 8003bbe:	e00d      	b.n	8003bdc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003bc0:	2264      	movs	r2, #100	; 0x64
 8003bc2:	18bb      	adds	r3, r7, r2
 8003bc4:	18ba      	adds	r2, r7, r2
 8003bc6:	8812      	ldrh	r2, [r2, #0]
 8003bc8:	2180      	movs	r1, #128	; 0x80
 8003bca:	00c9      	lsls	r1, r1, #3
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	801a      	strh	r2, [r3, #0]
      break;
 8003bd0:	e004      	b.n	8003bdc <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8003bd2:	2367      	movs	r3, #103	; 0x67
 8003bd4:	18fb      	adds	r3, r7, r3
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	701a      	strb	r2, [r3, #0]
      break;
 8003bda:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	18d3      	adds	r3, r2, r3
 8003be6:	2264      	movs	r2, #100	; 0x64
 8003be8:	18ba      	adds	r2, r7, r2
 8003bea:	8812      	ldrh	r2, [r2, #0]
 8003bec:	49b1      	ldr	r1, [pc, #708]	; (8003eb4 <USB_ActivateEndpoint+0x368>)
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	b292      	uxth	r2, r2
 8003bf2:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	18d3      	adds	r3, r2, r3
 8003bfe:	881b      	ldrh	r3, [r3, #0]
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	b21b      	sxth	r3, r3
 8003c04:	4aac      	ldr	r2, [pc, #688]	; (8003eb8 <USB_ActivateEndpoint+0x36c>)
 8003c06:	4013      	ands	r3, r2
 8003c08:	b21a      	sxth	r2, r3
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	b21b      	sxth	r3, r3
 8003c10:	4313      	orrs	r3, r2
 8003c12:	b21a      	sxth	r2, r3
 8003c14:	215e      	movs	r1, #94	; 0x5e
 8003c16:	187b      	adds	r3, r7, r1
 8003c18:	801a      	strh	r2, [r3, #0]
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	18d3      	adds	r3, r2, r3
 8003c24:	187a      	adds	r2, r7, r1
 8003c26:	8812      	ldrh	r2, [r2, #0]
 8003c28:	49a2      	ldr	r1, [pc, #648]	; (8003eb4 <USB_ActivateEndpoint+0x368>)
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	b292      	uxth	r2, r2
 8003c2e:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	7b1b      	ldrb	r3, [r3, #12]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d000      	beq.n	8003c3a <USB_ActivateEndpoint+0xee>
 8003c38:	e150      	b.n	8003edc <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	785b      	ldrb	r3, [r3, #1]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d100      	bne.n	8003c44 <USB_ActivateEndpoint+0xf8>
 8003c42:	e07a      	b.n	8003d3a <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2250      	movs	r2, #80	; 0x50
 8003c4c:	5a9b      	ldrh	r3, [r3, r2]
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	001a      	movs	r2, r3
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	189b      	adds	r3, r3, r2
 8003c56:	617b      	str	r3, [r7, #20]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	00da      	lsls	r2, r3, #3
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	18d3      	adds	r3, r2, r3
 8003c62:	2280      	movs	r2, #128	; 0x80
 8003c64:	00d2      	lsls	r2, r2, #3
 8003c66:	4694      	mov	ip, r2
 8003c68:	4463      	add	r3, ip
 8003c6a:	613b      	str	r3, [r7, #16]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	88db      	ldrh	r3, [r3, #6]
 8003c70:	085b      	lsrs	r3, r3, #1
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	18db      	adds	r3, r3, r3
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	18d2      	adds	r2, r2, r3
 8003c86:	210e      	movs	r1, #14
 8003c88:	187b      	adds	r3, r7, r1
 8003c8a:	8812      	ldrh	r2, [r2, #0]
 8003c8c:	801a      	strh	r2, [r3, #0]
 8003c8e:	187b      	adds	r3, r7, r1
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	2240      	movs	r2, #64	; 0x40
 8003c94:	4013      	ands	r3, r2
 8003c96:	d016      	beq.n	8003cc6 <USB_ActivateEndpoint+0x17a>
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	18d3      	adds	r3, r2, r3
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	200c      	movs	r0, #12
 8003ca8:	183b      	adds	r3, r7, r0
 8003caa:	4983      	ldr	r1, [pc, #524]	; (8003eb8 <USB_ActivateEndpoint+0x36c>)
 8003cac:	400a      	ands	r2, r1
 8003cae:	801a      	strh	r2, [r3, #0]
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	18d3      	adds	r3, r2, r3
 8003cba:	183a      	adds	r2, r7, r0
 8003cbc:	8812      	ldrh	r2, [r2, #0]
 8003cbe:	497f      	ldr	r1, [pc, #508]	; (8003ebc <USB_ActivateEndpoint+0x370>)
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	b292      	uxth	r2, r2
 8003cc4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	78db      	ldrb	r3, [r3, #3]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d01d      	beq.n	8003d0a <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	18d3      	adds	r3, r2, r3
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	2008      	movs	r0, #8
 8003cde:	183b      	adds	r3, r7, r0
 8003ce0:	4977      	ldr	r1, [pc, #476]	; (8003ec0 <USB_ActivateEndpoint+0x374>)
 8003ce2:	400a      	ands	r2, r1
 8003ce4:	801a      	strh	r2, [r3, #0]
 8003ce6:	183b      	adds	r3, r7, r0
 8003ce8:	183a      	adds	r2, r7, r0
 8003cea:	8812      	ldrh	r2, [r2, #0]
 8003cec:	2120      	movs	r1, #32
 8003cee:	404a      	eors	r2, r1
 8003cf0:	801a      	strh	r2, [r3, #0]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	18d3      	adds	r3, r2, r3
 8003cfc:	183a      	adds	r2, r7, r0
 8003cfe:	8812      	ldrh	r2, [r2, #0]
 8003d00:	496c      	ldr	r1, [pc, #432]	; (8003eb4 <USB_ActivateEndpoint+0x368>)
 8003d02:	430a      	orrs	r2, r1
 8003d04:	b292      	uxth	r2, r2
 8003d06:	801a      	strh	r2, [r3, #0]
 8003d08:	e25e      	b.n	80041c8 <USB_ActivateEndpoint+0x67c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	18d3      	adds	r3, r2, r3
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	200a      	movs	r0, #10
 8003d1a:	183b      	adds	r3, r7, r0
 8003d1c:	4968      	ldr	r1, [pc, #416]	; (8003ec0 <USB_ActivateEndpoint+0x374>)
 8003d1e:	400a      	ands	r2, r1
 8003d20:	801a      	strh	r2, [r3, #0]
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	18d3      	adds	r3, r2, r3
 8003d2c:	183a      	adds	r2, r7, r0
 8003d2e:	8812      	ldrh	r2, [r2, #0]
 8003d30:	4960      	ldr	r1, [pc, #384]	; (8003eb4 <USB_ActivateEndpoint+0x368>)
 8003d32:	430a      	orrs	r2, r1
 8003d34:	b292      	uxth	r2, r2
 8003d36:	801a      	strh	r2, [r3, #0]
 8003d38:	e246      	b.n	80041c8 <USB_ActivateEndpoint+0x67c>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2250      	movs	r2, #80	; 0x50
 8003d42:	5a9b      	ldrh	r3, [r3, r2]
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	001a      	movs	r2, r3
 8003d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4a:	189b      	adds	r3, r3, r2
 8003d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	00da      	lsls	r2, r3, #3
 8003d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d56:	18d3      	adds	r3, r2, r3
 8003d58:	4a5a      	ldr	r2, [pc, #360]	; (8003ec4 <USB_ActivateEndpoint+0x378>)
 8003d5a:	4694      	mov	ip, r2
 8003d5c:	4463      	add	r3, ip
 8003d5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	88db      	ldrh	r3, [r3, #6]
 8003d64:	085b      	lsrs	r3, r3, #1
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	18db      	adds	r3, r3, r3
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	627b      	str	r3, [r7, #36]	; 0x24
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2250      	movs	r2, #80	; 0x50
 8003d78:	5a9b      	ldrh	r3, [r3, r2]
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	001a      	movs	r2, r3
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	189b      	adds	r3, r3, r2
 8003d82:	627b      	str	r3, [r7, #36]	; 0x24
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	00da      	lsls	r2, r3, #3
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	18d3      	adds	r3, r2, r3
 8003d8e:	4a4e      	ldr	r2, [pc, #312]	; (8003ec8 <USB_ActivateEndpoint+0x37c>)
 8003d90:	4694      	mov	ip, r2
 8003d92:	4463      	add	r3, ip
 8003d94:	623b      	str	r3, [r7, #32]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d110      	bne.n	8003dc0 <USB_ActivateEndpoint+0x274>
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	4a49      	ldr	r2, [pc, #292]	; (8003ecc <USB_ActivateEndpoint+0x380>)
 8003da6:	4013      	ands	r3, r2
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	6a3b      	ldr	r3, [r7, #32]
 8003dac:	801a      	strh	r2, [r3, #0]
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	881b      	ldrh	r3, [r3, #0]
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	4a46      	ldr	r2, [pc, #280]	; (8003ed0 <USB_ActivateEndpoint+0x384>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	801a      	strh	r2, [r3, #0]
 8003dbe:	e02b      	b.n	8003e18 <USB_ActivateEndpoint+0x2cc>
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	2b3e      	cmp	r3, #62	; 0x3e
 8003dc6:	d812      	bhi.n	8003dee <USB_ActivateEndpoint+0x2a2>
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	085b      	lsrs	r3, r3, #1
 8003dce:	663b      	str	r3, [r7, #96]	; 0x60
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	d002      	beq.n	8003de0 <USB_ActivateEndpoint+0x294>
 8003dda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ddc:	3301      	adds	r3, #1
 8003dde:	663b      	str	r3, [r7, #96]	; 0x60
 8003de0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	029b      	lsls	r3, r3, #10
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	801a      	strh	r2, [r3, #0]
 8003dec:	e014      	b.n	8003e18 <USB_ActivateEndpoint+0x2cc>
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	095b      	lsrs	r3, r3, #5
 8003df4:	663b      	str	r3, [r7, #96]	; 0x60
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	221f      	movs	r2, #31
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	d102      	bne.n	8003e06 <USB_ActivateEndpoint+0x2ba>
 8003e00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e02:	3b01      	subs	r3, #1
 8003e04:	663b      	str	r3, [r7, #96]	; 0x60
 8003e06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	029b      	lsls	r3, r3, #10
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	4a30      	ldr	r2, [pc, #192]	; (8003ed0 <USB_ActivateEndpoint+0x384>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	6a3b      	ldr	r3, [r7, #32]
 8003e16:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	18d2      	adds	r2, r2, r3
 8003e22:	211e      	movs	r1, #30
 8003e24:	187b      	adds	r3, r7, r1
 8003e26:	8812      	ldrh	r2, [r2, #0]
 8003e28:	801a      	strh	r2, [r3, #0]
 8003e2a:	187b      	adds	r3, r7, r1
 8003e2c:	881a      	ldrh	r2, [r3, #0]
 8003e2e:	2380      	movs	r3, #128	; 0x80
 8003e30:	01db      	lsls	r3, r3, #7
 8003e32:	4013      	ands	r3, r2
 8003e34:	d016      	beq.n	8003e64 <USB_ActivateEndpoint+0x318>
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	18d3      	adds	r3, r2, r3
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	201c      	movs	r0, #28
 8003e46:	183b      	adds	r3, r7, r0
 8003e48:	491b      	ldr	r1, [pc, #108]	; (8003eb8 <USB_ActivateEndpoint+0x36c>)
 8003e4a:	400a      	ands	r2, r1
 8003e4c:	801a      	strh	r2, [r3, #0]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	18d3      	adds	r3, r2, r3
 8003e58:	183a      	adds	r2, r7, r0
 8003e5a:	8812      	ldrh	r2, [r2, #0]
 8003e5c:	491d      	ldr	r1, [pc, #116]	; (8003ed4 <USB_ActivateEndpoint+0x388>)
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	b292      	uxth	r2, r2
 8003e62:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	18d3      	adds	r3, r2, r3
 8003e6e:	881b      	ldrh	r3, [r3, #0]
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	201a      	movs	r0, #26
 8003e74:	183b      	adds	r3, r7, r0
 8003e76:	4918      	ldr	r1, [pc, #96]	; (8003ed8 <USB_ActivateEndpoint+0x38c>)
 8003e78:	400a      	ands	r2, r1
 8003e7a:	801a      	strh	r2, [r3, #0]
 8003e7c:	183b      	adds	r3, r7, r0
 8003e7e:	183a      	adds	r2, r7, r0
 8003e80:	8812      	ldrh	r2, [r2, #0]
 8003e82:	2180      	movs	r1, #128	; 0x80
 8003e84:	0149      	lsls	r1, r1, #5
 8003e86:	404a      	eors	r2, r1
 8003e88:	801a      	strh	r2, [r3, #0]
 8003e8a:	183b      	adds	r3, r7, r0
 8003e8c:	183a      	adds	r2, r7, r0
 8003e8e:	8812      	ldrh	r2, [r2, #0]
 8003e90:	2180      	movs	r1, #128	; 0x80
 8003e92:	0189      	lsls	r1, r1, #6
 8003e94:	404a      	eors	r2, r1
 8003e96:	801a      	strh	r2, [r3, #0]
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	18d3      	adds	r3, r2, r3
 8003ea2:	183a      	adds	r2, r7, r0
 8003ea4:	8812      	ldrh	r2, [r2, #0]
 8003ea6:	4903      	ldr	r1, [pc, #12]	; (8003eb4 <USB_ActivateEndpoint+0x368>)
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	b292      	uxth	r2, r2
 8003eac:	801a      	strh	r2, [r3, #0]
 8003eae:	e18b      	b.n	80041c8 <USB_ActivateEndpoint+0x67c>
 8003eb0:	ffff898f 	.word	0xffff898f
 8003eb4:	ffff8080 	.word	0xffff8080
 8003eb8:	ffff8f8f 	.word	0xffff8f8f
 8003ebc:	ffff80c0 	.word	0xffff80c0
 8003ec0:	ffff8fbf 	.word	0xffff8fbf
 8003ec4:	00000404 	.word	0x00000404
 8003ec8:	00000406 	.word	0x00000406
 8003ecc:	ffff83ff 	.word	0xffff83ff
 8003ed0:	ffff8000 	.word	0xffff8000
 8003ed4:	ffffc080 	.word	0xffffc080
 8003ed8:	ffffbf8f 	.word	0xffffbf8f
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	18d3      	adds	r3, r2, r3
 8003ee6:	881b      	ldrh	r3, [r3, #0]
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	205c      	movs	r0, #92	; 0x5c
 8003eec:	183b      	adds	r3, r7, r0
 8003eee:	49ba      	ldr	r1, [pc, #744]	; (80041d8 <USB_ActivateEndpoint+0x68c>)
 8003ef0:	400a      	ands	r2, r1
 8003ef2:	801a      	strh	r2, [r3, #0]
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	18d3      	adds	r3, r2, r3
 8003efe:	183a      	adds	r2, r7, r0
 8003f00:	8812      	ldrh	r2, [r2, #0]
 8003f02:	49b6      	ldr	r1, [pc, #728]	; (80041dc <USB_ActivateEndpoint+0x690>)
 8003f04:	430a      	orrs	r2, r1
 8003f06:	b292      	uxth	r2, r2
 8003f08:	801a      	strh	r2, [r3, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2250      	movs	r2, #80	; 0x50
 8003f12:	5a9b      	ldrh	r3, [r3, r2]
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	001a      	movs	r2, r3
 8003f18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f1a:	189b      	adds	r3, r3, r2
 8003f1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	00da      	lsls	r2, r3, #3
 8003f24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f26:	18d3      	adds	r3, r2, r3
 8003f28:	2280      	movs	r2, #128	; 0x80
 8003f2a:	00d2      	lsls	r2, r2, #3
 8003f2c:	4694      	mov	ip, r2
 8003f2e:	4463      	add	r3, ip
 8003f30:	657b      	str	r3, [r7, #84]	; 0x54
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	891b      	ldrh	r3, [r3, #8]
 8003f36:	085b      	lsrs	r3, r3, #1
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	18db      	adds	r3, r3, r3
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f40:	801a      	strh	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	653b      	str	r3, [r7, #80]	; 0x50
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2250      	movs	r2, #80	; 0x50
 8003f4a:	5a9b      	ldrh	r3, [r3, r2]
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	001a      	movs	r2, r3
 8003f50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f52:	189b      	adds	r3, r3, r2
 8003f54:	653b      	str	r3, [r7, #80]	; 0x50
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	00da      	lsls	r2, r3, #3
 8003f5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f5e:	18d3      	adds	r3, r2, r3
 8003f60:	4a9f      	ldr	r2, [pc, #636]	; (80041e0 <USB_ActivateEndpoint+0x694>)
 8003f62:	4694      	mov	ip, r2
 8003f64:	4463      	add	r3, ip
 8003f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	895b      	ldrh	r3, [r3, #10]
 8003f6c:	085b      	lsrs	r3, r3, #1
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	18db      	adds	r3, r3, r3
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f76:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	785b      	ldrb	r3, [r3, #1]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d000      	beq.n	8003f82 <USB_ActivateEndpoint+0x436>
 8003f80:	e087      	b.n	8004092 <USB_ActivateEndpoint+0x546>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	18d2      	adds	r2, r2, r3
 8003f8c:	213c      	movs	r1, #60	; 0x3c
 8003f8e:	187b      	adds	r3, r7, r1
 8003f90:	8812      	ldrh	r2, [r2, #0]
 8003f92:	801a      	strh	r2, [r3, #0]
 8003f94:	187b      	adds	r3, r7, r1
 8003f96:	881a      	ldrh	r2, [r3, #0]
 8003f98:	2380      	movs	r3, #128	; 0x80
 8003f9a:	01db      	lsls	r3, r3, #7
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	d016      	beq.n	8003fce <USB_ActivateEndpoint+0x482>
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	18d3      	adds	r3, r2, r3
 8003faa:	881b      	ldrh	r3, [r3, #0]
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	203a      	movs	r0, #58	; 0x3a
 8003fb0:	183b      	adds	r3, r7, r0
 8003fb2:	4989      	ldr	r1, [pc, #548]	; (80041d8 <USB_ActivateEndpoint+0x68c>)
 8003fb4:	400a      	ands	r2, r1
 8003fb6:	801a      	strh	r2, [r3, #0]
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	18d3      	adds	r3, r2, r3
 8003fc2:	183a      	adds	r2, r7, r0
 8003fc4:	8812      	ldrh	r2, [r2, #0]
 8003fc6:	4987      	ldr	r1, [pc, #540]	; (80041e4 <USB_ActivateEndpoint+0x698>)
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	b292      	uxth	r2, r2
 8003fcc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	18d2      	adds	r2, r2, r3
 8003fd8:	2138      	movs	r1, #56	; 0x38
 8003fda:	187b      	adds	r3, r7, r1
 8003fdc:	8812      	ldrh	r2, [r2, #0]
 8003fde:	801a      	strh	r2, [r3, #0]
 8003fe0:	187b      	adds	r3, r7, r1
 8003fe2:	881b      	ldrh	r3, [r3, #0]
 8003fe4:	2240      	movs	r2, #64	; 0x40
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	d016      	beq.n	8004018 <USB_ActivateEndpoint+0x4cc>
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	18d3      	adds	r3, r2, r3
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	2036      	movs	r0, #54	; 0x36
 8003ffa:	183b      	adds	r3, r7, r0
 8003ffc:	4976      	ldr	r1, [pc, #472]	; (80041d8 <USB_ActivateEndpoint+0x68c>)
 8003ffe:	400a      	ands	r2, r1
 8004000:	801a      	strh	r2, [r3, #0]
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	18d3      	adds	r3, r2, r3
 800400c:	183a      	adds	r2, r7, r0
 800400e:	8812      	ldrh	r2, [r2, #0]
 8004010:	4975      	ldr	r1, [pc, #468]	; (80041e8 <USB_ActivateEndpoint+0x69c>)
 8004012:	430a      	orrs	r2, r1
 8004014:	b292      	uxth	r2, r2
 8004016:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	18d3      	adds	r3, r2, r3
 8004022:	881b      	ldrh	r3, [r3, #0]
 8004024:	b29a      	uxth	r2, r3
 8004026:	2034      	movs	r0, #52	; 0x34
 8004028:	183b      	adds	r3, r7, r0
 800402a:	4970      	ldr	r1, [pc, #448]	; (80041ec <USB_ActivateEndpoint+0x6a0>)
 800402c:	400a      	ands	r2, r1
 800402e:	801a      	strh	r2, [r3, #0]
 8004030:	183b      	adds	r3, r7, r0
 8004032:	183a      	adds	r2, r7, r0
 8004034:	8812      	ldrh	r2, [r2, #0]
 8004036:	2180      	movs	r1, #128	; 0x80
 8004038:	0149      	lsls	r1, r1, #5
 800403a:	404a      	eors	r2, r1
 800403c:	801a      	strh	r2, [r3, #0]
 800403e:	183b      	adds	r3, r7, r0
 8004040:	183a      	adds	r2, r7, r0
 8004042:	8812      	ldrh	r2, [r2, #0]
 8004044:	2180      	movs	r1, #128	; 0x80
 8004046:	0189      	lsls	r1, r1, #6
 8004048:	404a      	eors	r2, r1
 800404a:	801a      	strh	r2, [r3, #0]
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	18d3      	adds	r3, r2, r3
 8004056:	183a      	adds	r2, r7, r0
 8004058:	8812      	ldrh	r2, [r2, #0]
 800405a:	4965      	ldr	r1, [pc, #404]	; (80041f0 <USB_ActivateEndpoint+0x6a4>)
 800405c:	430a      	orrs	r2, r1
 800405e:	b292      	uxth	r2, r2
 8004060:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	18d3      	adds	r3, r2, r3
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	b29a      	uxth	r2, r3
 8004070:	2032      	movs	r0, #50	; 0x32
 8004072:	183b      	adds	r3, r7, r0
 8004074:	495f      	ldr	r1, [pc, #380]	; (80041f4 <USB_ActivateEndpoint+0x6a8>)
 8004076:	400a      	ands	r2, r1
 8004078:	801a      	strh	r2, [r3, #0]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	18d3      	adds	r3, r2, r3
 8004084:	183a      	adds	r2, r7, r0
 8004086:	8812      	ldrh	r2, [r2, #0]
 8004088:	4959      	ldr	r1, [pc, #356]	; (80041f0 <USB_ActivateEndpoint+0x6a4>)
 800408a:	430a      	orrs	r2, r1
 800408c:	b292      	uxth	r2, r2
 800408e:	801a      	strh	r2, [r3, #0]
 8004090:	e09a      	b.n	80041c8 <USB_ActivateEndpoint+0x67c>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	18d2      	adds	r2, r2, r3
 800409c:	214a      	movs	r1, #74	; 0x4a
 800409e:	187b      	adds	r3, r7, r1
 80040a0:	8812      	ldrh	r2, [r2, #0]
 80040a2:	801a      	strh	r2, [r3, #0]
 80040a4:	187b      	adds	r3, r7, r1
 80040a6:	881a      	ldrh	r2, [r3, #0]
 80040a8:	2380      	movs	r3, #128	; 0x80
 80040aa:	01db      	lsls	r3, r3, #7
 80040ac:	4013      	ands	r3, r2
 80040ae:	d016      	beq.n	80040de <USB_ActivateEndpoint+0x592>
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	18d3      	adds	r3, r2, r3
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	b29a      	uxth	r2, r3
 80040be:	2048      	movs	r0, #72	; 0x48
 80040c0:	183b      	adds	r3, r7, r0
 80040c2:	4945      	ldr	r1, [pc, #276]	; (80041d8 <USB_ActivateEndpoint+0x68c>)
 80040c4:	400a      	ands	r2, r1
 80040c6:	801a      	strh	r2, [r3, #0]
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	18d3      	adds	r3, r2, r3
 80040d2:	183a      	adds	r2, r7, r0
 80040d4:	8812      	ldrh	r2, [r2, #0]
 80040d6:	4943      	ldr	r1, [pc, #268]	; (80041e4 <USB_ActivateEndpoint+0x698>)
 80040d8:	430a      	orrs	r2, r1
 80040da:	b292      	uxth	r2, r2
 80040dc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	18d2      	adds	r2, r2, r3
 80040e8:	2146      	movs	r1, #70	; 0x46
 80040ea:	187b      	adds	r3, r7, r1
 80040ec:	8812      	ldrh	r2, [r2, #0]
 80040ee:	801a      	strh	r2, [r3, #0]
 80040f0:	187b      	adds	r3, r7, r1
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	2240      	movs	r2, #64	; 0x40
 80040f6:	4013      	ands	r3, r2
 80040f8:	d016      	beq.n	8004128 <USB_ActivateEndpoint+0x5dc>
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	18d3      	adds	r3, r2, r3
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	b29a      	uxth	r2, r3
 8004108:	2044      	movs	r0, #68	; 0x44
 800410a:	183b      	adds	r3, r7, r0
 800410c:	4932      	ldr	r1, [pc, #200]	; (80041d8 <USB_ActivateEndpoint+0x68c>)
 800410e:	400a      	ands	r2, r1
 8004110:	801a      	strh	r2, [r3, #0]
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	18d3      	adds	r3, r2, r3
 800411c:	183a      	adds	r2, r7, r0
 800411e:	8812      	ldrh	r2, [r2, #0]
 8004120:	4931      	ldr	r1, [pc, #196]	; (80041e8 <USB_ActivateEndpoint+0x69c>)
 8004122:	430a      	orrs	r2, r1
 8004124:	b292      	uxth	r2, r2
 8004126:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	78db      	ldrb	r3, [r3, #3]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d01d      	beq.n	800416c <USB_ActivateEndpoint+0x620>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	18d3      	adds	r3, r2, r3
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	b29a      	uxth	r2, r3
 800413e:	2040      	movs	r0, #64	; 0x40
 8004140:	183b      	adds	r3, r7, r0
 8004142:	492c      	ldr	r1, [pc, #176]	; (80041f4 <USB_ActivateEndpoint+0x6a8>)
 8004144:	400a      	ands	r2, r1
 8004146:	801a      	strh	r2, [r3, #0]
 8004148:	183b      	adds	r3, r7, r0
 800414a:	183a      	adds	r2, r7, r0
 800414c:	8812      	ldrh	r2, [r2, #0]
 800414e:	2120      	movs	r1, #32
 8004150:	404a      	eors	r2, r1
 8004152:	801a      	strh	r2, [r3, #0]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	18d3      	adds	r3, r2, r3
 800415e:	183a      	adds	r2, r7, r0
 8004160:	8812      	ldrh	r2, [r2, #0]
 8004162:	4923      	ldr	r1, [pc, #140]	; (80041f0 <USB_ActivateEndpoint+0x6a4>)
 8004164:	430a      	orrs	r2, r1
 8004166:	b292      	uxth	r2, r2
 8004168:	801a      	strh	r2, [r3, #0]
 800416a:	e016      	b.n	800419a <USB_ActivateEndpoint+0x64e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	18d3      	adds	r3, r2, r3
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	b29a      	uxth	r2, r3
 800417a:	2042      	movs	r0, #66	; 0x42
 800417c:	183b      	adds	r3, r7, r0
 800417e:	491d      	ldr	r1, [pc, #116]	; (80041f4 <USB_ActivateEndpoint+0x6a8>)
 8004180:	400a      	ands	r2, r1
 8004182:	801a      	strh	r2, [r3, #0]
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	18d3      	adds	r3, r2, r3
 800418e:	183a      	adds	r2, r7, r0
 8004190:	8812      	ldrh	r2, [r2, #0]
 8004192:	4917      	ldr	r1, [pc, #92]	; (80041f0 <USB_ActivateEndpoint+0x6a4>)
 8004194:	430a      	orrs	r2, r1
 8004196:	b292      	uxth	r2, r2
 8004198:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	18d3      	adds	r3, r2, r3
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	203e      	movs	r0, #62	; 0x3e
 80041aa:	183b      	adds	r3, r7, r0
 80041ac:	490f      	ldr	r1, [pc, #60]	; (80041ec <USB_ActivateEndpoint+0x6a0>)
 80041ae:	400a      	ands	r2, r1
 80041b0:	801a      	strh	r2, [r3, #0]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	18d3      	adds	r3, r2, r3
 80041bc:	183a      	adds	r2, r7, r0
 80041be:	8812      	ldrh	r2, [r2, #0]
 80041c0:	490b      	ldr	r1, [pc, #44]	; (80041f0 <USB_ActivateEndpoint+0x6a4>)
 80041c2:	430a      	orrs	r2, r1
 80041c4:	b292      	uxth	r2, r2
 80041c6:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 80041c8:	2367      	movs	r3, #103	; 0x67
 80041ca:	18fb      	adds	r3, r7, r3
 80041cc:	781b      	ldrb	r3, [r3, #0]
}
 80041ce:	0018      	movs	r0, r3
 80041d0:	46bd      	mov	sp, r7
 80041d2:	b01a      	add	sp, #104	; 0x68
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	46c0      	nop			; (mov r8, r8)
 80041d8:	ffff8f8f 	.word	0xffff8f8f
 80041dc:	ffff8180 	.word	0xffff8180
 80041e0:	00000404 	.word	0x00000404
 80041e4:	ffffc080 	.word	0xffffc080
 80041e8:	ffff80c0 	.word	0xffff80c0
 80041ec:	ffffbf8f 	.word	0xffffbf8f
 80041f0:	ffff8080 	.word	0xffff8080
 80041f4:	ffff8fbf 	.word	0xffff8fbf

080041f8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b08c      	sub	sp, #48	; 0x30
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	7b1b      	ldrb	r3, [r3, #12]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d000      	beq.n	800420c <USB_DeactivateEndpoint+0x14>
 800420a:	e07e      	b.n	800430a <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	785b      	ldrb	r3, [r3, #1]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d03c      	beq.n	800428e <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	18d2      	adds	r2, r2, r3
 800421e:	210c      	movs	r1, #12
 8004220:	187b      	adds	r3, r7, r1
 8004222:	8812      	ldrh	r2, [r2, #0]
 8004224:	801a      	strh	r2, [r3, #0]
 8004226:	187b      	adds	r3, r7, r1
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	2240      	movs	r2, #64	; 0x40
 800422c:	4013      	ands	r3, r2
 800422e:	d016      	beq.n	800425e <USB_DeactivateEndpoint+0x66>
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	18d3      	adds	r3, r2, r3
 800423a:	881b      	ldrh	r3, [r3, #0]
 800423c:	b29a      	uxth	r2, r3
 800423e:	200a      	movs	r0, #10
 8004240:	183b      	adds	r3, r7, r0
 8004242:	49c7      	ldr	r1, [pc, #796]	; (8004560 <USB_DeactivateEndpoint+0x368>)
 8004244:	400a      	ands	r2, r1
 8004246:	801a      	strh	r2, [r3, #0]
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	18d3      	adds	r3, r2, r3
 8004252:	183a      	adds	r2, r7, r0
 8004254:	8812      	ldrh	r2, [r2, #0]
 8004256:	49c3      	ldr	r1, [pc, #780]	; (8004564 <USB_DeactivateEndpoint+0x36c>)
 8004258:	430a      	orrs	r2, r1
 800425a:	b292      	uxth	r2, r2
 800425c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	18d3      	adds	r3, r2, r3
 8004268:	881b      	ldrh	r3, [r3, #0]
 800426a:	b29a      	uxth	r2, r3
 800426c:	2008      	movs	r0, #8
 800426e:	183b      	adds	r3, r7, r0
 8004270:	49bd      	ldr	r1, [pc, #756]	; (8004568 <USB_DeactivateEndpoint+0x370>)
 8004272:	400a      	ands	r2, r1
 8004274:	801a      	strh	r2, [r3, #0]
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	18d3      	adds	r3, r2, r3
 8004280:	183a      	adds	r2, r7, r0
 8004282:	8812      	ldrh	r2, [r2, #0]
 8004284:	49b9      	ldr	r1, [pc, #740]	; (800456c <USB_DeactivateEndpoint+0x374>)
 8004286:	430a      	orrs	r2, r1
 8004288:	b292      	uxth	r2, r2
 800428a:	801a      	strh	r2, [r3, #0]
 800428c:	e163      	b.n	8004556 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	18d2      	adds	r2, r2, r3
 8004298:	2112      	movs	r1, #18
 800429a:	187b      	adds	r3, r7, r1
 800429c:	8812      	ldrh	r2, [r2, #0]
 800429e:	801a      	strh	r2, [r3, #0]
 80042a0:	187b      	adds	r3, r7, r1
 80042a2:	881a      	ldrh	r2, [r3, #0]
 80042a4:	2380      	movs	r3, #128	; 0x80
 80042a6:	01db      	lsls	r3, r3, #7
 80042a8:	4013      	ands	r3, r2
 80042aa:	d016      	beq.n	80042da <USB_DeactivateEndpoint+0xe2>
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	18d3      	adds	r3, r2, r3
 80042b6:	881b      	ldrh	r3, [r3, #0]
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	2010      	movs	r0, #16
 80042bc:	183b      	adds	r3, r7, r0
 80042be:	49a8      	ldr	r1, [pc, #672]	; (8004560 <USB_DeactivateEndpoint+0x368>)
 80042c0:	400a      	ands	r2, r1
 80042c2:	801a      	strh	r2, [r3, #0]
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	18d3      	adds	r3, r2, r3
 80042ce:	183a      	adds	r2, r7, r0
 80042d0:	8812      	ldrh	r2, [r2, #0]
 80042d2:	49a7      	ldr	r1, [pc, #668]	; (8004570 <USB_DeactivateEndpoint+0x378>)
 80042d4:	430a      	orrs	r2, r1
 80042d6:	b292      	uxth	r2, r2
 80042d8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	18d3      	adds	r3, r2, r3
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	200e      	movs	r0, #14
 80042ea:	183b      	adds	r3, r7, r0
 80042ec:	49a1      	ldr	r1, [pc, #644]	; (8004574 <USB_DeactivateEndpoint+0x37c>)
 80042ee:	400a      	ands	r2, r1
 80042f0:	801a      	strh	r2, [r3, #0]
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	18d3      	adds	r3, r2, r3
 80042fc:	183a      	adds	r2, r7, r0
 80042fe:	8812      	ldrh	r2, [r2, #0]
 8004300:	499a      	ldr	r1, [pc, #616]	; (800456c <USB_DeactivateEndpoint+0x374>)
 8004302:	430a      	orrs	r2, r1
 8004304:	b292      	uxth	r2, r2
 8004306:	801a      	strh	r2, [r3, #0]
 8004308:	e125      	b.n	8004556 <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	785b      	ldrb	r3, [r3, #1]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d000      	beq.n	8004314 <USB_DeactivateEndpoint+0x11c>
 8004312:	e090      	b.n	8004436 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	18d2      	adds	r2, r2, r3
 800431e:	2120      	movs	r1, #32
 8004320:	187b      	adds	r3, r7, r1
 8004322:	8812      	ldrh	r2, [r2, #0]
 8004324:	801a      	strh	r2, [r3, #0]
 8004326:	187b      	adds	r3, r7, r1
 8004328:	881a      	ldrh	r2, [r3, #0]
 800432a:	2380      	movs	r3, #128	; 0x80
 800432c:	01db      	lsls	r3, r3, #7
 800432e:	4013      	ands	r3, r2
 8004330:	d016      	beq.n	8004360 <USB_DeactivateEndpoint+0x168>
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	18d3      	adds	r3, r2, r3
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	b29a      	uxth	r2, r3
 8004340:	201e      	movs	r0, #30
 8004342:	183b      	adds	r3, r7, r0
 8004344:	4986      	ldr	r1, [pc, #536]	; (8004560 <USB_DeactivateEndpoint+0x368>)
 8004346:	400a      	ands	r2, r1
 8004348:	801a      	strh	r2, [r3, #0]
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	18d3      	adds	r3, r2, r3
 8004354:	183a      	adds	r2, r7, r0
 8004356:	8812      	ldrh	r2, [r2, #0]
 8004358:	4985      	ldr	r1, [pc, #532]	; (8004570 <USB_DeactivateEndpoint+0x378>)
 800435a:	430a      	orrs	r2, r1
 800435c:	b292      	uxth	r2, r2
 800435e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	18d2      	adds	r2, r2, r3
 800436a:	211c      	movs	r1, #28
 800436c:	187b      	adds	r3, r7, r1
 800436e:	8812      	ldrh	r2, [r2, #0]
 8004370:	801a      	strh	r2, [r3, #0]
 8004372:	187b      	adds	r3, r7, r1
 8004374:	881b      	ldrh	r3, [r3, #0]
 8004376:	2240      	movs	r2, #64	; 0x40
 8004378:	4013      	ands	r3, r2
 800437a:	d016      	beq.n	80043aa <USB_DeactivateEndpoint+0x1b2>
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	18d3      	adds	r3, r2, r3
 8004386:	881b      	ldrh	r3, [r3, #0]
 8004388:	b29a      	uxth	r2, r3
 800438a:	201a      	movs	r0, #26
 800438c:	183b      	adds	r3, r7, r0
 800438e:	4974      	ldr	r1, [pc, #464]	; (8004560 <USB_DeactivateEndpoint+0x368>)
 8004390:	400a      	ands	r2, r1
 8004392:	801a      	strh	r2, [r3, #0]
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	18d3      	adds	r3, r2, r3
 800439e:	183a      	adds	r2, r7, r0
 80043a0:	8812      	ldrh	r2, [r2, #0]
 80043a2:	4970      	ldr	r1, [pc, #448]	; (8004564 <USB_DeactivateEndpoint+0x36c>)
 80043a4:	430a      	orrs	r2, r1
 80043a6:	b292      	uxth	r2, r2
 80043a8:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	18d3      	adds	r3, r2, r3
 80043b4:	881b      	ldrh	r3, [r3, #0]
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	2018      	movs	r0, #24
 80043ba:	183b      	adds	r3, r7, r0
 80043bc:	4968      	ldr	r1, [pc, #416]	; (8004560 <USB_DeactivateEndpoint+0x368>)
 80043be:	400a      	ands	r2, r1
 80043c0:	801a      	strh	r2, [r3, #0]
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	18d3      	adds	r3, r2, r3
 80043cc:	183a      	adds	r2, r7, r0
 80043ce:	8812      	ldrh	r2, [r2, #0]
 80043d0:	4964      	ldr	r1, [pc, #400]	; (8004564 <USB_DeactivateEndpoint+0x36c>)
 80043d2:	430a      	orrs	r2, r1
 80043d4:	b292      	uxth	r2, r2
 80043d6:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	18d3      	adds	r3, r2, r3
 80043e2:	881b      	ldrh	r3, [r3, #0]
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	2016      	movs	r0, #22
 80043e8:	183b      	adds	r3, r7, r0
 80043ea:	4962      	ldr	r1, [pc, #392]	; (8004574 <USB_DeactivateEndpoint+0x37c>)
 80043ec:	400a      	ands	r2, r1
 80043ee:	801a      	strh	r2, [r3, #0]
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	18d3      	adds	r3, r2, r3
 80043fa:	183a      	adds	r2, r7, r0
 80043fc:	8812      	ldrh	r2, [r2, #0]
 80043fe:	495b      	ldr	r1, [pc, #364]	; (800456c <USB_DeactivateEndpoint+0x374>)
 8004400:	430a      	orrs	r2, r1
 8004402:	b292      	uxth	r2, r2
 8004404:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	18d3      	adds	r3, r2, r3
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	b29a      	uxth	r2, r3
 8004414:	2014      	movs	r0, #20
 8004416:	183b      	adds	r3, r7, r0
 8004418:	4953      	ldr	r1, [pc, #332]	; (8004568 <USB_DeactivateEndpoint+0x370>)
 800441a:	400a      	ands	r2, r1
 800441c:	801a      	strh	r2, [r3, #0]
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	18d3      	adds	r3, r2, r3
 8004428:	183a      	adds	r2, r7, r0
 800442a:	8812      	ldrh	r2, [r2, #0]
 800442c:	494f      	ldr	r1, [pc, #316]	; (800456c <USB_DeactivateEndpoint+0x374>)
 800442e:	430a      	orrs	r2, r1
 8004430:	b292      	uxth	r2, r2
 8004432:	801a      	strh	r2, [r3, #0]
 8004434:	e08f      	b.n	8004556 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	18d2      	adds	r2, r2, r3
 8004440:	212e      	movs	r1, #46	; 0x2e
 8004442:	187b      	adds	r3, r7, r1
 8004444:	8812      	ldrh	r2, [r2, #0]
 8004446:	801a      	strh	r2, [r3, #0]
 8004448:	187b      	adds	r3, r7, r1
 800444a:	881a      	ldrh	r2, [r3, #0]
 800444c:	2380      	movs	r3, #128	; 0x80
 800444e:	01db      	lsls	r3, r3, #7
 8004450:	4013      	ands	r3, r2
 8004452:	d016      	beq.n	8004482 <USB_DeactivateEndpoint+0x28a>
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	18d3      	adds	r3, r2, r3
 800445e:	881b      	ldrh	r3, [r3, #0]
 8004460:	b29a      	uxth	r2, r3
 8004462:	202c      	movs	r0, #44	; 0x2c
 8004464:	183b      	adds	r3, r7, r0
 8004466:	493e      	ldr	r1, [pc, #248]	; (8004560 <USB_DeactivateEndpoint+0x368>)
 8004468:	400a      	ands	r2, r1
 800446a:	801a      	strh	r2, [r3, #0]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	18d3      	adds	r3, r2, r3
 8004476:	183a      	adds	r2, r7, r0
 8004478:	8812      	ldrh	r2, [r2, #0]
 800447a:	493d      	ldr	r1, [pc, #244]	; (8004570 <USB_DeactivateEndpoint+0x378>)
 800447c:	430a      	orrs	r2, r1
 800447e:	b292      	uxth	r2, r2
 8004480:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	18d2      	adds	r2, r2, r3
 800448c:	212a      	movs	r1, #42	; 0x2a
 800448e:	187b      	adds	r3, r7, r1
 8004490:	8812      	ldrh	r2, [r2, #0]
 8004492:	801a      	strh	r2, [r3, #0]
 8004494:	187b      	adds	r3, r7, r1
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	2240      	movs	r2, #64	; 0x40
 800449a:	4013      	ands	r3, r2
 800449c:	d016      	beq.n	80044cc <USB_DeactivateEndpoint+0x2d4>
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	18d3      	adds	r3, r2, r3
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	2028      	movs	r0, #40	; 0x28
 80044ae:	183b      	adds	r3, r7, r0
 80044b0:	492b      	ldr	r1, [pc, #172]	; (8004560 <USB_DeactivateEndpoint+0x368>)
 80044b2:	400a      	ands	r2, r1
 80044b4:	801a      	strh	r2, [r3, #0]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	18d3      	adds	r3, r2, r3
 80044c0:	183a      	adds	r2, r7, r0
 80044c2:	8812      	ldrh	r2, [r2, #0]
 80044c4:	4927      	ldr	r1, [pc, #156]	; (8004564 <USB_DeactivateEndpoint+0x36c>)
 80044c6:	430a      	orrs	r2, r1
 80044c8:	b292      	uxth	r2, r2
 80044ca:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	18d3      	adds	r3, r2, r3
 80044d6:	881b      	ldrh	r3, [r3, #0]
 80044d8:	b29a      	uxth	r2, r3
 80044da:	2026      	movs	r0, #38	; 0x26
 80044dc:	183b      	adds	r3, r7, r0
 80044de:	4920      	ldr	r1, [pc, #128]	; (8004560 <USB_DeactivateEndpoint+0x368>)
 80044e0:	400a      	ands	r2, r1
 80044e2:	801a      	strh	r2, [r3, #0]
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	18d3      	adds	r3, r2, r3
 80044ee:	183a      	adds	r2, r7, r0
 80044f0:	8812      	ldrh	r2, [r2, #0]
 80044f2:	491f      	ldr	r1, [pc, #124]	; (8004570 <USB_DeactivateEndpoint+0x378>)
 80044f4:	430a      	orrs	r2, r1
 80044f6:	b292      	uxth	r2, r2
 80044f8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	18d3      	adds	r3, r2, r3
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	b29a      	uxth	r2, r3
 8004508:	2024      	movs	r0, #36	; 0x24
 800450a:	183b      	adds	r3, r7, r0
 800450c:	4916      	ldr	r1, [pc, #88]	; (8004568 <USB_DeactivateEndpoint+0x370>)
 800450e:	400a      	ands	r2, r1
 8004510:	801a      	strh	r2, [r3, #0]
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	18d3      	adds	r3, r2, r3
 800451c:	183a      	adds	r2, r7, r0
 800451e:	8812      	ldrh	r2, [r2, #0]
 8004520:	4912      	ldr	r1, [pc, #72]	; (800456c <USB_DeactivateEndpoint+0x374>)
 8004522:	430a      	orrs	r2, r1
 8004524:	b292      	uxth	r2, r2
 8004526:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	18d3      	adds	r3, r2, r3
 8004532:	881b      	ldrh	r3, [r3, #0]
 8004534:	b29a      	uxth	r2, r3
 8004536:	2022      	movs	r0, #34	; 0x22
 8004538:	183b      	adds	r3, r7, r0
 800453a:	490e      	ldr	r1, [pc, #56]	; (8004574 <USB_DeactivateEndpoint+0x37c>)
 800453c:	400a      	ands	r2, r1
 800453e:	801a      	strh	r2, [r3, #0]
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	18d3      	adds	r3, r2, r3
 800454a:	183a      	adds	r2, r7, r0
 800454c:	8812      	ldrh	r2, [r2, #0]
 800454e:	4907      	ldr	r1, [pc, #28]	; (800456c <USB_DeactivateEndpoint+0x374>)
 8004550:	430a      	orrs	r2, r1
 8004552:	b292      	uxth	r2, r2
 8004554:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	0018      	movs	r0, r3
 800455a:	46bd      	mov	sp, r7
 800455c:	b00c      	add	sp, #48	; 0x30
 800455e:	bd80      	pop	{r7, pc}
 8004560:	ffff8f8f 	.word	0xffff8f8f
 8004564:	ffff80c0 	.word	0xffff80c0
 8004568:	ffff8fbf 	.word	0xffff8fbf
 800456c:	ffff8080 	.word	0xffff8080
 8004570:	ffffc080 	.word	0xffffc080
 8004574:	ffffbf8f 	.word	0xffffbf8f

08004578 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004578:	b5b0      	push	{r4, r5, r7, lr}
 800457a:	b0c4      	sub	sp, #272	; 0x110
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	785b      	ldrb	r3, [r3, #1]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d001      	beq.n	800458e <USB_EPStartXfer+0x16>
 800458a:	f000 fd63 	bl	8005054 <USB_EPStartXfer+0xadc>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	699a      	ldr	r2, [r3, #24]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	429a      	cmp	r2, r3
 8004598:	d906      	bls.n	80045a8 <USB_EPStartXfer+0x30>
    {
      len = ep->maxpacket;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	2286      	movs	r2, #134	; 0x86
 80045a0:	0052      	lsls	r2, r2, #1
 80045a2:	18ba      	adds	r2, r7, r2
 80045a4:	6013      	str	r3, [r2, #0]
 80045a6:	e005      	b.n	80045b4 <USB_EPStartXfer+0x3c>
    }
    else
    {
      len = ep->xfer_len;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	2286      	movs	r2, #134	; 0x86
 80045ae:	0052      	lsls	r2, r2, #1
 80045b0:	18ba      	adds	r2, r7, r2
 80045b2:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	7b1b      	ldrb	r3, [r3, #12]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d125      	bne.n	8004608 <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	6959      	ldr	r1, [r3, #20]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	88da      	ldrh	r2, [r3, #6]
 80045c4:	2486      	movs	r4, #134	; 0x86
 80045c6:	0064      	lsls	r4, r4, #1
 80045c8:	193b      	adds	r3, r7, r4
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f001 fa62 	bl	8005a98 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	617b      	str	r3, [r7, #20]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2250      	movs	r2, #80	; 0x50
 80045dc:	5a9b      	ldrh	r3, [r3, r2]
 80045de:	b29b      	uxth	r3, r3
 80045e0:	001a      	movs	r2, r3
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	189b      	adds	r3, r3, r2
 80045e6:	617b      	str	r3, [r7, #20]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	00da      	lsls	r2, r3, #3
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	18d3      	adds	r3, r2, r3
 80045f2:	4ad4      	ldr	r2, [pc, #848]	; (8004944 <USB_EPStartXfer+0x3cc>)
 80045f4:	4694      	mov	ip, r2
 80045f6:	4463      	add	r3, ip
 80045f8:	613b      	str	r3, [r7, #16]
 80045fa:	193b      	adds	r3, r7, r4
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	b29a      	uxth	r2, r3
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	801a      	strh	r2, [r3, #0]
 8004604:	f000 fce4 	bl	8004fd0 <USB_EPStartXfer+0xa58>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	78db      	ldrb	r3, [r3, #3]
 800460c:	2b02      	cmp	r3, #2
 800460e:	d000      	beq.n	8004612 <USB_EPStartXfer+0x9a>
 8004610:	e358      	b.n	8004cc4 <USB_EPStartXfer+0x74c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	6a1a      	ldr	r2, [r3, #32]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	429a      	cmp	r2, r3
 800461c:	d800      	bhi.n	8004620 <USB_EPStartXfer+0xa8>
 800461e:	e2fe      	b.n	8004c1e <USB_EPStartXfer+0x6a6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	18d3      	adds	r3, r2, r3
 800462a:	881b      	ldrh	r3, [r3, #0]
 800462c:	b29a      	uxth	r2, r3
 800462e:	205a      	movs	r0, #90	; 0x5a
 8004630:	183b      	adds	r3, r7, r0
 8004632:	49c5      	ldr	r1, [pc, #788]	; (8004948 <USB_EPStartXfer+0x3d0>)
 8004634:	400a      	ands	r2, r1
 8004636:	801a      	strh	r2, [r3, #0]
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	18d3      	adds	r3, r2, r3
 8004642:	183a      	adds	r2, r7, r0
 8004644:	8812      	ldrh	r2, [r2, #0]
 8004646:	49c1      	ldr	r1, [pc, #772]	; (800494c <USB_EPStartXfer+0x3d4>)
 8004648:	430a      	orrs	r2, r1
 800464a:	b292      	uxth	r2, r2
 800464c:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	6a1a      	ldr	r2, [r3, #32]
 8004652:	2386      	movs	r3, #134	; 0x86
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	18fb      	adds	r3, r7, r3
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	1ad2      	subs	r2, r2, r3
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	18d3      	adds	r3, r2, r3
 800466a:	881b      	ldrh	r3, [r3, #0]
 800466c:	b29b      	uxth	r3, r3
 800466e:	001a      	movs	r2, r3
 8004670:	2340      	movs	r3, #64	; 0x40
 8004672:	4013      	ands	r3, r2
 8004674:	d100      	bne.n	8004678 <USB_EPStartXfer+0x100>
 8004676:	e171      	b.n	800495c <USB_EPStartXfer+0x3e4>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	637b      	str	r3, [r7, #52]	; 0x34
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	785b      	ldrb	r3, [r3, #1]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d16c      	bne.n	800475e <USB_EPStartXfer+0x1e6>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2250      	movs	r2, #80	; 0x50
 800468c:	5a9b      	ldrh	r3, [r3, r2]
 800468e:	b29b      	uxth	r3, r3
 8004690:	001a      	movs	r2, r3
 8004692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004694:	189b      	adds	r3, r3, r2
 8004696:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	00da      	lsls	r2, r3, #3
 800469e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a0:	18d3      	adds	r3, r2, r3
 80046a2:	4aab      	ldr	r2, [pc, #684]	; (8004950 <USB_EPStartXfer+0x3d8>)
 80046a4:	4694      	mov	ip, r2
 80046a6:	4463      	add	r3, ip
 80046a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80046aa:	2386      	movs	r3, #134	; 0x86
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	18fb      	adds	r3, r7, r3
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d110      	bne.n	80046d8 <USB_EPStartXfer+0x160>
 80046b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b8:	881b      	ldrh	r3, [r3, #0]
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	4aa5      	ldr	r2, [pc, #660]	; (8004954 <USB_EPStartXfer+0x3dc>)
 80046be:	4013      	ands	r3, r2
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c4:	801a      	strh	r2, [r3, #0]
 80046c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c8:	881b      	ldrh	r3, [r3, #0]
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	4aa2      	ldr	r2, [pc, #648]	; (8004958 <USB_EPStartXfer+0x3e0>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d4:	801a      	strh	r2, [r3, #0]
 80046d6:	e05e      	b.n	8004796 <USB_EPStartXfer+0x21e>
 80046d8:	2386      	movs	r3, #134	; 0x86
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	18fb      	adds	r3, r7, r3
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2b3e      	cmp	r3, #62	; 0x3e
 80046e2:	d81c      	bhi.n	800471e <USB_EPStartXfer+0x1a6>
 80046e4:	2286      	movs	r2, #134	; 0x86
 80046e6:	0052      	lsls	r2, r2, #1
 80046e8:	18bb      	adds	r3, r7, r2
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	085b      	lsrs	r3, r3, #1
 80046ee:	1d79      	adds	r1, r7, #5
 80046f0:	31ff      	adds	r1, #255	; 0xff
 80046f2:	600b      	str	r3, [r1, #0]
 80046f4:	18bb      	adds	r3, r7, r2
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2201      	movs	r2, #1
 80046fa:	4013      	ands	r3, r2
 80046fc:	d006      	beq.n	800470c <USB_EPStartXfer+0x194>
 80046fe:	1d7b      	adds	r3, r7, #5
 8004700:	33ff      	adds	r3, #255	; 0xff
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3301      	adds	r3, #1
 8004706:	1d7a      	adds	r2, r7, #5
 8004708:	32ff      	adds	r2, #255	; 0xff
 800470a:	6013      	str	r3, [r2, #0]
 800470c:	1d7b      	adds	r3, r7, #5
 800470e:	33ff      	adds	r3, #255	; 0xff
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	b29b      	uxth	r3, r3
 8004714:	029b      	lsls	r3, r3, #10
 8004716:	b29a      	uxth	r2, r3
 8004718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471a:	801a      	strh	r2, [r3, #0]
 800471c:	e03b      	b.n	8004796 <USB_EPStartXfer+0x21e>
 800471e:	2286      	movs	r2, #134	; 0x86
 8004720:	0052      	lsls	r2, r2, #1
 8004722:	18bb      	adds	r3, r7, r2
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	095b      	lsrs	r3, r3, #5
 8004728:	1d79      	adds	r1, r7, #5
 800472a:	31ff      	adds	r1, #255	; 0xff
 800472c:	600b      	str	r3, [r1, #0]
 800472e:	18bb      	adds	r3, r7, r2
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	221f      	movs	r2, #31
 8004734:	4013      	ands	r3, r2
 8004736:	d106      	bne.n	8004746 <USB_EPStartXfer+0x1ce>
 8004738:	1d7b      	adds	r3, r7, #5
 800473a:	33ff      	adds	r3, #255	; 0xff
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	3b01      	subs	r3, #1
 8004740:	1d7a      	adds	r2, r7, #5
 8004742:	32ff      	adds	r2, #255	; 0xff
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	1d7b      	adds	r3, r7, #5
 8004748:	33ff      	adds	r3, #255	; 0xff
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	b29b      	uxth	r3, r3
 800474e:	029b      	lsls	r3, r3, #10
 8004750:	b29b      	uxth	r3, r3
 8004752:	4a81      	ldr	r2, [pc, #516]	; (8004958 <USB_EPStartXfer+0x3e0>)
 8004754:	4313      	orrs	r3, r2
 8004756:	b29a      	uxth	r2, r3
 8004758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475a:	801a      	strh	r2, [r3, #0]
 800475c:	e01b      	b.n	8004796 <USB_EPStartXfer+0x21e>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	785b      	ldrb	r3, [r3, #1]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d117      	bne.n	8004796 <USB_EPStartXfer+0x21e>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2250      	movs	r2, #80	; 0x50
 800476a:	5a9b      	ldrh	r3, [r3, r2]
 800476c:	b29b      	uxth	r3, r3
 800476e:	001a      	movs	r2, r3
 8004770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004772:	189b      	adds	r3, r3, r2
 8004774:	637b      	str	r3, [r7, #52]	; 0x34
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	00da      	lsls	r2, r3, #3
 800477c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800477e:	18d3      	adds	r3, r2, r3
 8004780:	4a73      	ldr	r2, [pc, #460]	; (8004950 <USB_EPStartXfer+0x3d8>)
 8004782:	4694      	mov	ip, r2
 8004784:	4463      	add	r3, ip
 8004786:	633b      	str	r3, [r7, #48]	; 0x30
 8004788:	2386      	movs	r3, #134	; 0x86
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	18fb      	adds	r3, r7, r3
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	b29a      	uxth	r2, r3
 8004792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004794:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004796:	2085      	movs	r0, #133	; 0x85
 8004798:	0040      	lsls	r0, r0, #1
 800479a:	183b      	adds	r3, r7, r0
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	8952      	ldrh	r2, [r2, #10]
 80047a0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	6959      	ldr	r1, [r3, #20]
 80047a6:	2586      	movs	r5, #134	; 0x86
 80047a8:	006d      	lsls	r5, r5, #1
 80047aa:	197b      	adds	r3, r7, r5
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	b29c      	uxth	r4, r3
 80047b0:	183b      	adds	r3, r7, r0
 80047b2:	881a      	ldrh	r2, [r3, #0]
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	0023      	movs	r3, r4
 80047b8:	f001 f96e 	bl	8005a98 <USB_WritePMA>
            ep->xfer_buff += len;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	695a      	ldr	r2, [r3, #20]
 80047c0:	197b      	adds	r3, r7, r5
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	18d2      	adds	r2, r2, r3
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	6a1a      	ldr	r2, [r3, #32]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d909      	bls.n	80047ea <USB_EPStartXfer+0x272>
            {
              ep->xfer_len_db -= len;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	6a1a      	ldr	r2, [r3, #32]
 80047da:	2386      	movs	r3, #134	; 0x86
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	18fb      	adds	r3, r7, r3
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	1ad2      	subs	r2, r2, r3
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	621a      	str	r2, [r3, #32]
 80047e8:	e008      	b.n	80047fc <USB_EPStartXfer+0x284>
            }
            else
            {
              len = ep->xfer_len_db;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	2286      	movs	r2, #134	; 0x86
 80047f0:	0052      	lsls	r2, r2, #1
 80047f2:	18ba      	adds	r2, r7, r2
 80047f4:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2200      	movs	r2, #0
 80047fa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	785b      	ldrb	r3, [r3, #1]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d16c      	bne.n	80048de <USB_EPStartXfer+0x366>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	61fb      	str	r3, [r7, #28]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2250      	movs	r2, #80	; 0x50
 800480c:	5a9b      	ldrh	r3, [r3, r2]
 800480e:	b29b      	uxth	r3, r3
 8004810:	001a      	movs	r2, r3
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	189b      	adds	r3, r3, r2
 8004816:	61fb      	str	r3, [r7, #28]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	00da      	lsls	r2, r3, #3
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	18d3      	adds	r3, r2, r3
 8004822:	4a48      	ldr	r2, [pc, #288]	; (8004944 <USB_EPStartXfer+0x3cc>)
 8004824:	4694      	mov	ip, r2
 8004826:	4463      	add	r3, ip
 8004828:	61bb      	str	r3, [r7, #24]
 800482a:	2386      	movs	r3, #134	; 0x86
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	18fb      	adds	r3, r7, r3
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d110      	bne.n	8004858 <USB_EPStartXfer+0x2e0>
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	b29b      	uxth	r3, r3
 800483c:	4a45      	ldr	r2, [pc, #276]	; (8004954 <USB_EPStartXfer+0x3dc>)
 800483e:	4013      	ands	r3, r2
 8004840:	b29a      	uxth	r2, r3
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	801a      	strh	r2, [r3, #0]
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	881b      	ldrh	r3, [r3, #0]
 800484a:	b29b      	uxth	r3, r3
 800484c:	4a42      	ldr	r2, [pc, #264]	; (8004958 <USB_EPStartXfer+0x3e0>)
 800484e:	4313      	orrs	r3, r2
 8004850:	b29a      	uxth	r2, r3
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	801a      	strh	r2, [r3, #0]
 8004856:	e060      	b.n	800491a <USB_EPStartXfer+0x3a2>
 8004858:	2386      	movs	r3, #134	; 0x86
 800485a:	005b      	lsls	r3, r3, #1
 800485c:	18fb      	adds	r3, r7, r3
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b3e      	cmp	r3, #62	; 0x3e
 8004862:	d81c      	bhi.n	800489e <USB_EPStartXfer+0x326>
 8004864:	2286      	movs	r2, #134	; 0x86
 8004866:	0052      	lsls	r2, r2, #1
 8004868:	18bb      	adds	r3, r7, r2
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	085b      	lsrs	r3, r3, #1
 800486e:	1c79      	adds	r1, r7, #1
 8004870:	31ff      	adds	r1, #255	; 0xff
 8004872:	600b      	str	r3, [r1, #0]
 8004874:	18bb      	adds	r3, r7, r2
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2201      	movs	r2, #1
 800487a:	4013      	ands	r3, r2
 800487c:	d006      	beq.n	800488c <USB_EPStartXfer+0x314>
 800487e:	1c7b      	adds	r3, r7, #1
 8004880:	33ff      	adds	r3, #255	; 0xff
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3301      	adds	r3, #1
 8004886:	1c7a      	adds	r2, r7, #1
 8004888:	32ff      	adds	r2, #255	; 0xff
 800488a:	6013      	str	r3, [r2, #0]
 800488c:	1c7b      	adds	r3, r7, #1
 800488e:	33ff      	adds	r3, #255	; 0xff
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	b29b      	uxth	r3, r3
 8004894:	029b      	lsls	r3, r3, #10
 8004896:	b29a      	uxth	r2, r3
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	801a      	strh	r2, [r3, #0]
 800489c:	e03d      	b.n	800491a <USB_EPStartXfer+0x3a2>
 800489e:	2286      	movs	r2, #134	; 0x86
 80048a0:	0052      	lsls	r2, r2, #1
 80048a2:	18bb      	adds	r3, r7, r2
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	1c79      	adds	r1, r7, #1
 80048aa:	31ff      	adds	r1, #255	; 0xff
 80048ac:	600b      	str	r3, [r1, #0]
 80048ae:	18bb      	adds	r3, r7, r2
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	221f      	movs	r2, #31
 80048b4:	4013      	ands	r3, r2
 80048b6:	d106      	bne.n	80048c6 <USB_EPStartXfer+0x34e>
 80048b8:	1c7b      	adds	r3, r7, #1
 80048ba:	33ff      	adds	r3, #255	; 0xff
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	3b01      	subs	r3, #1
 80048c0:	1c7a      	adds	r2, r7, #1
 80048c2:	32ff      	adds	r2, #255	; 0xff
 80048c4:	6013      	str	r3, [r2, #0]
 80048c6:	1c7b      	adds	r3, r7, #1
 80048c8:	33ff      	adds	r3, #255	; 0xff
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	029b      	lsls	r3, r3, #10
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	4a21      	ldr	r2, [pc, #132]	; (8004958 <USB_EPStartXfer+0x3e0>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	801a      	strh	r2, [r3, #0]
 80048dc:	e01d      	b.n	800491a <USB_EPStartXfer+0x3a2>
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	785b      	ldrb	r3, [r3, #1]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d119      	bne.n	800491a <USB_EPStartXfer+0x3a2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	627b      	str	r3, [r7, #36]	; 0x24
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2250      	movs	r2, #80	; 0x50
 80048ee:	5a9b      	ldrh	r3, [r3, r2]
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	001a      	movs	r2, r3
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	189b      	adds	r3, r3, r2
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	00da      	lsls	r2, r3, #3
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	18d3      	adds	r3, r2, r3
 8004904:	4a0f      	ldr	r2, [pc, #60]	; (8004944 <USB_EPStartXfer+0x3cc>)
 8004906:	4694      	mov	ip, r2
 8004908:	4463      	add	r3, ip
 800490a:	623b      	str	r3, [r7, #32]
 800490c:	2386      	movs	r3, #134	; 0x86
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	18fb      	adds	r3, r7, r3
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	b29a      	uxth	r2, r3
 8004916:	6a3b      	ldr	r3, [r7, #32]
 8004918:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800491a:	2085      	movs	r0, #133	; 0x85
 800491c:	0040      	lsls	r0, r0, #1
 800491e:	183b      	adds	r3, r7, r0
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	8912      	ldrh	r2, [r2, #8]
 8004924:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	6959      	ldr	r1, [r3, #20]
 800492a:	2386      	movs	r3, #134	; 0x86
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	18fb      	adds	r3, r7, r3
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	b29c      	uxth	r4, r3
 8004934:	183b      	adds	r3, r7, r0
 8004936:	881a      	ldrh	r2, [r3, #0]
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	0023      	movs	r3, r4
 800493c:	f001 f8ac 	bl	8005a98 <USB_WritePMA>
 8004940:	e346      	b.n	8004fd0 <USB_EPStartXfer+0xa58>
 8004942:	46c0      	nop			; (mov r8, r8)
 8004944:	00000402 	.word	0x00000402
 8004948:	ffff8f8f 	.word	0xffff8f8f
 800494c:	ffff8180 	.word	0xffff8180
 8004950:	00000406 	.word	0x00000406
 8004954:	ffff83ff 	.word	0xffff83ff
 8004958:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	785b      	ldrb	r3, [r3, #1]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d16a      	bne.n	8004a3a <USB_EPStartXfer+0x4c2>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2250      	movs	r2, #80	; 0x50
 800496c:	5a9b      	ldrh	r3, [r3, r2]
 800496e:	b29b      	uxth	r3, r3
 8004970:	001a      	movs	r2, r3
 8004972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004974:	189b      	adds	r3, r3, r2
 8004976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	00da      	lsls	r2, r3, #3
 800497e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004980:	18d3      	adds	r3, r2, r3
 8004982:	4aca      	ldr	r2, [pc, #808]	; (8004cac <USB_EPStartXfer+0x734>)
 8004984:	4694      	mov	ip, r2
 8004986:	4463      	add	r3, ip
 8004988:	64bb      	str	r3, [r7, #72]	; 0x48
 800498a:	2386      	movs	r3, #134	; 0x86
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	18fb      	adds	r3, r7, r3
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d110      	bne.n	80049b8 <USB_EPStartXfer+0x440>
 8004996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	b29b      	uxth	r3, r3
 800499c:	4ac4      	ldr	r2, [pc, #784]	; (8004cb0 <USB_EPStartXfer+0x738>)
 800499e:	4013      	ands	r3, r2
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049a4:	801a      	strh	r2, [r3, #0]
 80049a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049a8:	881b      	ldrh	r3, [r3, #0]
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	4ac1      	ldr	r2, [pc, #772]	; (8004cb4 <USB_EPStartXfer+0x73c>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049b4:	801a      	strh	r2, [r3, #0]
 80049b6:	e05e      	b.n	8004a76 <USB_EPStartXfer+0x4fe>
 80049b8:	2386      	movs	r3, #134	; 0x86
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	18fb      	adds	r3, r7, r3
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b3e      	cmp	r3, #62	; 0x3e
 80049c2:	d81b      	bhi.n	80049fc <USB_EPStartXfer+0x484>
 80049c4:	2286      	movs	r2, #134	; 0x86
 80049c6:	0052      	lsls	r2, r2, #1
 80049c8:	18bb      	adds	r3, r7, r2
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	085b      	lsrs	r3, r3, #1
 80049ce:	21fc      	movs	r1, #252	; 0xfc
 80049d0:	1879      	adds	r1, r7, r1
 80049d2:	600b      	str	r3, [r1, #0]
 80049d4:	18bb      	adds	r3, r7, r2
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2201      	movs	r2, #1
 80049da:	4013      	ands	r3, r2
 80049dc:	d005      	beq.n	80049ea <USB_EPStartXfer+0x472>
 80049de:	22fc      	movs	r2, #252	; 0xfc
 80049e0:	18bb      	adds	r3, r7, r2
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	3301      	adds	r3, #1
 80049e6:	18ba      	adds	r2, r7, r2
 80049e8:	6013      	str	r3, [r2, #0]
 80049ea:	23fc      	movs	r3, #252	; 0xfc
 80049ec:	18fb      	adds	r3, r7, r3
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	029b      	lsls	r3, r3, #10
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049f8:	801a      	strh	r2, [r3, #0]
 80049fa:	e03c      	b.n	8004a76 <USB_EPStartXfer+0x4fe>
 80049fc:	2286      	movs	r2, #134	; 0x86
 80049fe:	0052      	lsls	r2, r2, #1
 8004a00:	18bb      	adds	r3, r7, r2
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	21fc      	movs	r1, #252	; 0xfc
 8004a08:	1879      	adds	r1, r7, r1
 8004a0a:	600b      	str	r3, [r1, #0]
 8004a0c:	18bb      	adds	r3, r7, r2
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	221f      	movs	r2, #31
 8004a12:	4013      	ands	r3, r2
 8004a14:	d105      	bne.n	8004a22 <USB_EPStartXfer+0x4aa>
 8004a16:	22fc      	movs	r2, #252	; 0xfc
 8004a18:	18bb      	adds	r3, r7, r2
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	18ba      	adds	r2, r7, r2
 8004a20:	6013      	str	r3, [r2, #0]
 8004a22:	23fc      	movs	r3, #252	; 0xfc
 8004a24:	18fb      	adds	r3, r7, r3
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	029b      	lsls	r3, r3, #10
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	4aa1      	ldr	r2, [pc, #644]	; (8004cb4 <USB_EPStartXfer+0x73c>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a36:	801a      	strh	r2, [r3, #0]
 8004a38:	e01d      	b.n	8004a76 <USB_EPStartXfer+0x4fe>
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	785b      	ldrb	r3, [r3, #1]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d119      	bne.n	8004a76 <USB_EPStartXfer+0x4fe>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	657b      	str	r3, [r7, #84]	; 0x54
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2250      	movs	r2, #80	; 0x50
 8004a4a:	5a9b      	ldrh	r3, [r3, r2]
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	001a      	movs	r2, r3
 8004a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a52:	189b      	adds	r3, r3, r2
 8004a54:	657b      	str	r3, [r7, #84]	; 0x54
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	00da      	lsls	r2, r3, #3
 8004a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a5e:	18d3      	adds	r3, r2, r3
 8004a60:	4a92      	ldr	r2, [pc, #584]	; (8004cac <USB_EPStartXfer+0x734>)
 8004a62:	4694      	mov	ip, r2
 8004a64:	4463      	add	r3, ip
 8004a66:	653b      	str	r3, [r7, #80]	; 0x50
 8004a68:	2386      	movs	r3, #134	; 0x86
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	18fb      	adds	r3, r7, r3
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a74:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004a76:	2085      	movs	r0, #133	; 0x85
 8004a78:	0040      	lsls	r0, r0, #1
 8004a7a:	183b      	adds	r3, r7, r0
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	8912      	ldrh	r2, [r2, #8]
 8004a80:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	6959      	ldr	r1, [r3, #20]
 8004a86:	2586      	movs	r5, #134	; 0x86
 8004a88:	006d      	lsls	r5, r5, #1
 8004a8a:	197b      	adds	r3, r7, r5
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	b29c      	uxth	r4, r3
 8004a90:	183b      	adds	r3, r7, r0
 8004a92:	881a      	ldrh	r2, [r3, #0]
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	0023      	movs	r3, r4
 8004a98:	f000 fffe 	bl	8005a98 <USB_WritePMA>
            ep->xfer_buff += len;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	695a      	ldr	r2, [r3, #20]
 8004aa0:	197b      	adds	r3, r7, r5
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	18d2      	adds	r2, r2, r3
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	6a1a      	ldr	r2, [r3, #32]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d909      	bls.n	8004aca <USB_EPStartXfer+0x552>
            {
              ep->xfer_len_db -= len;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	6a1a      	ldr	r2, [r3, #32]
 8004aba:	2386      	movs	r3, #134	; 0x86
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	18fb      	adds	r3, r7, r3
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	1ad2      	subs	r2, r2, r3
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	621a      	str	r2, [r3, #32]
 8004ac8:	e008      	b.n	8004adc <USB_EPStartXfer+0x564>
            }
            else
            {
              len = ep->xfer_len_db;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	2286      	movs	r2, #134	; 0x86
 8004ad0:	0052      	lsls	r2, r2, #1
 8004ad2:	18ba      	adds	r2, r7, r2
 8004ad4:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	647b      	str	r3, [r7, #68]	; 0x44
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	785b      	ldrb	r3, [r3, #1]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d16a      	bne.n	8004bbe <USB_EPStartXfer+0x646>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2250      	movs	r2, #80	; 0x50
 8004af0:	5a9b      	ldrh	r3, [r3, r2]
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	001a      	movs	r2, r3
 8004af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004af8:	189b      	adds	r3, r3, r2
 8004afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	00da      	lsls	r2, r3, #3
 8004b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b04:	18d3      	adds	r3, r2, r3
 8004b06:	4a6c      	ldr	r2, [pc, #432]	; (8004cb8 <USB_EPStartXfer+0x740>)
 8004b08:	4694      	mov	ip, r2
 8004b0a:	4463      	add	r3, ip
 8004b0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b0e:	2386      	movs	r3, #134	; 0x86
 8004b10:	005b      	lsls	r3, r3, #1
 8004b12:	18fb      	adds	r3, r7, r3
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d110      	bne.n	8004b3c <USB_EPStartXfer+0x5c4>
 8004b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1c:	881b      	ldrh	r3, [r3, #0]
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	4a63      	ldr	r2, [pc, #396]	; (8004cb0 <USB_EPStartXfer+0x738>)
 8004b22:	4013      	ands	r3, r2
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b28:	801a      	strh	r2, [r3, #0]
 8004b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2c:	881b      	ldrh	r3, [r3, #0]
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	4a60      	ldr	r2, [pc, #384]	; (8004cb4 <USB_EPStartXfer+0x73c>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b38:	801a      	strh	r2, [r3, #0]
 8004b3a:	e05c      	b.n	8004bf6 <USB_EPStartXfer+0x67e>
 8004b3c:	2386      	movs	r3, #134	; 0x86
 8004b3e:	005b      	lsls	r3, r3, #1
 8004b40:	18fb      	adds	r3, r7, r3
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2b3e      	cmp	r3, #62	; 0x3e
 8004b46:	d81b      	bhi.n	8004b80 <USB_EPStartXfer+0x608>
 8004b48:	2286      	movs	r2, #134	; 0x86
 8004b4a:	0052      	lsls	r2, r2, #1
 8004b4c:	18bb      	adds	r3, r7, r2
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	085b      	lsrs	r3, r3, #1
 8004b52:	21f8      	movs	r1, #248	; 0xf8
 8004b54:	1879      	adds	r1, r7, r1
 8004b56:	600b      	str	r3, [r1, #0]
 8004b58:	18bb      	adds	r3, r7, r2
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	4013      	ands	r3, r2
 8004b60:	d005      	beq.n	8004b6e <USB_EPStartXfer+0x5f6>
 8004b62:	22f8      	movs	r2, #248	; 0xf8
 8004b64:	18bb      	adds	r3, r7, r2
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	18ba      	adds	r2, r7, r2
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	23f8      	movs	r3, #248	; 0xf8
 8004b70:	18fb      	adds	r3, r7, r3
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	029b      	lsls	r3, r3, #10
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7c:	801a      	strh	r2, [r3, #0]
 8004b7e:	e03a      	b.n	8004bf6 <USB_EPStartXfer+0x67e>
 8004b80:	2286      	movs	r2, #134	; 0x86
 8004b82:	0052      	lsls	r2, r2, #1
 8004b84:	18bb      	adds	r3, r7, r2
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	095b      	lsrs	r3, r3, #5
 8004b8a:	21f8      	movs	r1, #248	; 0xf8
 8004b8c:	1879      	adds	r1, r7, r1
 8004b8e:	600b      	str	r3, [r1, #0]
 8004b90:	18bb      	adds	r3, r7, r2
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	221f      	movs	r2, #31
 8004b96:	4013      	ands	r3, r2
 8004b98:	d105      	bne.n	8004ba6 <USB_EPStartXfer+0x62e>
 8004b9a:	22f8      	movs	r2, #248	; 0xf8
 8004b9c:	18bb      	adds	r3, r7, r2
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	18ba      	adds	r2, r7, r2
 8004ba4:	6013      	str	r3, [r2, #0]
 8004ba6:	23f8      	movs	r3, #248	; 0xf8
 8004ba8:	18fb      	adds	r3, r7, r3
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	029b      	lsls	r3, r3, #10
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	4a40      	ldr	r2, [pc, #256]	; (8004cb4 <USB_EPStartXfer+0x73c>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bba:	801a      	strh	r2, [r3, #0]
 8004bbc:	e01b      	b.n	8004bf6 <USB_EPStartXfer+0x67e>
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	785b      	ldrb	r3, [r3, #1]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d117      	bne.n	8004bf6 <USB_EPStartXfer+0x67e>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2250      	movs	r2, #80	; 0x50
 8004bca:	5a9b      	ldrh	r3, [r3, r2]
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	001a      	movs	r2, r3
 8004bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bd2:	189b      	adds	r3, r3, r2
 8004bd4:	647b      	str	r3, [r7, #68]	; 0x44
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	00da      	lsls	r2, r3, #3
 8004bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bde:	18d3      	adds	r3, r2, r3
 8004be0:	4a35      	ldr	r2, [pc, #212]	; (8004cb8 <USB_EPStartXfer+0x740>)
 8004be2:	4694      	mov	ip, r2
 8004be4:	4463      	add	r3, ip
 8004be6:	643b      	str	r3, [r7, #64]	; 0x40
 8004be8:	2386      	movs	r3, #134	; 0x86
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	18fb      	adds	r3, r7, r3
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bf4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004bf6:	2085      	movs	r0, #133	; 0x85
 8004bf8:	0040      	lsls	r0, r0, #1
 8004bfa:	183b      	adds	r3, r7, r0
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	8952      	ldrh	r2, [r2, #10]
 8004c00:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	6959      	ldr	r1, [r3, #20]
 8004c06:	2386      	movs	r3, #134	; 0x86
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	18fb      	adds	r3, r7, r3
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	b29c      	uxth	r4, r3
 8004c10:	183b      	adds	r3, r7, r0
 8004c12:	881a      	ldrh	r2, [r3, #0]
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	0023      	movs	r3, r4
 8004c18:	f000 ff3e 	bl	8005a98 <USB_WritePMA>
 8004c1c:	e1d8      	b.n	8004fd0 <USB_EPStartXfer+0xa58>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	2086      	movs	r0, #134	; 0x86
 8004c24:	0040      	lsls	r0, r0, #1
 8004c26:	183a      	adds	r2, r7, r0
 8004c28:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	18d3      	adds	r3, r2, r3
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	2466      	movs	r4, #102	; 0x66
 8004c3a:	193b      	adds	r3, r7, r4
 8004c3c:	491f      	ldr	r1, [pc, #124]	; (8004cbc <USB_EPStartXfer+0x744>)
 8004c3e:	400a      	ands	r2, r1
 8004c40:	801a      	strh	r2, [r3, #0]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	18d3      	adds	r3, r2, r3
 8004c4c:	193a      	adds	r2, r7, r4
 8004c4e:	8812      	ldrh	r2, [r2, #0]
 8004c50:	491b      	ldr	r1, [pc, #108]	; (8004cc0 <USB_EPStartXfer+0x748>)
 8004c52:	430a      	orrs	r2, r1
 8004c54:	b292      	uxth	r2, r2
 8004c56:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	663b      	str	r3, [r7, #96]	; 0x60
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2250      	movs	r2, #80	; 0x50
 8004c60:	5a9b      	ldrh	r3, [r3, r2]
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	001a      	movs	r2, r3
 8004c66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c68:	189b      	adds	r3, r3, r2
 8004c6a:	663b      	str	r3, [r7, #96]	; 0x60
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	00da      	lsls	r2, r3, #3
 8004c72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c74:	18d3      	adds	r3, r2, r3
 8004c76:	4a0d      	ldr	r2, [pc, #52]	; (8004cac <USB_EPStartXfer+0x734>)
 8004c78:	4694      	mov	ip, r2
 8004c7a:	4463      	add	r3, ip
 8004c7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c7e:	183b      	adds	r3, r7, r0
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c86:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004c88:	2585      	movs	r5, #133	; 0x85
 8004c8a:	006d      	lsls	r5, r5, #1
 8004c8c:	197b      	adds	r3, r7, r5
 8004c8e:	683a      	ldr	r2, [r7, #0]
 8004c90:	8912      	ldrh	r2, [r2, #8]
 8004c92:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	6959      	ldr	r1, [r3, #20]
 8004c98:	183b      	adds	r3, r7, r0
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	b29c      	uxth	r4, r3
 8004c9e:	197b      	adds	r3, r7, r5
 8004ca0:	881a      	ldrh	r2, [r3, #0]
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	0023      	movs	r3, r4
 8004ca6:	f000 fef7 	bl	8005a98 <USB_WritePMA>
 8004caa:	e191      	b.n	8004fd0 <USB_EPStartXfer+0xa58>
 8004cac:	00000402 	.word	0x00000402
 8004cb0:	ffff83ff 	.word	0xffff83ff
 8004cb4:	ffff8000 	.word	0xffff8000
 8004cb8:	00000406 	.word	0x00000406
 8004cbc:	ffff8e8f 	.word	0xffff8e8f
 8004cc0:	ffff8080 	.word	0xffff8080

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	18d3      	adds	r3, r2, r3
 8004cce:	881b      	ldrh	r3, [r3, #0]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	001a      	movs	r2, r3
 8004cd4:	2340      	movs	r3, #64	; 0x40
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	d100      	bne.n	8004cdc <USB_EPStartXfer+0x764>
 8004cda:	e093      	b.n	8004e04 <USB_EPStartXfer+0x88c>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	785b      	ldrb	r3, [r3, #1]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d16a      	bne.n	8004dbe <USB_EPStartXfer+0x846>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	673b      	str	r3, [r7, #112]	; 0x70
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2250      	movs	r2, #80	; 0x50
 8004cf0:	5a9b      	ldrh	r3, [r3, r2]
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	001a      	movs	r2, r3
 8004cf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cf8:	189b      	adds	r3, r3, r2
 8004cfa:	673b      	str	r3, [r7, #112]	; 0x70
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	00da      	lsls	r2, r3, #3
 8004d02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d04:	18d3      	adds	r3, r2, r3
 8004d06:	4ae0      	ldr	r2, [pc, #896]	; (8005088 <USB_EPStartXfer+0xb10>)
 8004d08:	4694      	mov	ip, r2
 8004d0a:	4463      	add	r3, ip
 8004d0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d0e:	2386      	movs	r3, #134	; 0x86
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	18fb      	adds	r3, r7, r3
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d110      	bne.n	8004d3c <USB_EPStartXfer+0x7c4>
 8004d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d1c:	881b      	ldrh	r3, [r3, #0]
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	4ada      	ldr	r2, [pc, #872]	; (800508c <USB_EPStartXfer+0xb14>)
 8004d22:	4013      	ands	r3, r2
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d28:	801a      	strh	r2, [r3, #0]
 8004d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d2c:	881b      	ldrh	r3, [r3, #0]
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	4ad7      	ldr	r2, [pc, #860]	; (8005090 <USB_EPStartXfer+0xb18>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d38:	801a      	strh	r2, [r3, #0]
 8004d3a:	e05c      	b.n	8004df6 <USB_EPStartXfer+0x87e>
 8004d3c:	2386      	movs	r3, #134	; 0x86
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	18fb      	adds	r3, r7, r3
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2b3e      	cmp	r3, #62	; 0x3e
 8004d46:	d81b      	bhi.n	8004d80 <USB_EPStartXfer+0x808>
 8004d48:	2286      	movs	r2, #134	; 0x86
 8004d4a:	0052      	lsls	r2, r2, #1
 8004d4c:	18bb      	adds	r3, r7, r2
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	085b      	lsrs	r3, r3, #1
 8004d52:	21f4      	movs	r1, #244	; 0xf4
 8004d54:	1879      	adds	r1, r7, r1
 8004d56:	600b      	str	r3, [r1, #0]
 8004d58:	18bb      	adds	r3, r7, r2
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	4013      	ands	r3, r2
 8004d60:	d005      	beq.n	8004d6e <USB_EPStartXfer+0x7f6>
 8004d62:	22f4      	movs	r2, #244	; 0xf4
 8004d64:	18bb      	adds	r3, r7, r2
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	18ba      	adds	r2, r7, r2
 8004d6c:	6013      	str	r3, [r2, #0]
 8004d6e:	23f4      	movs	r3, #244	; 0xf4
 8004d70:	18fb      	adds	r3, r7, r3
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	029b      	lsls	r3, r3, #10
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d7c:	801a      	strh	r2, [r3, #0]
 8004d7e:	e03a      	b.n	8004df6 <USB_EPStartXfer+0x87e>
 8004d80:	2286      	movs	r2, #134	; 0x86
 8004d82:	0052      	lsls	r2, r2, #1
 8004d84:	18bb      	adds	r3, r7, r2
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	095b      	lsrs	r3, r3, #5
 8004d8a:	21f4      	movs	r1, #244	; 0xf4
 8004d8c:	1879      	adds	r1, r7, r1
 8004d8e:	600b      	str	r3, [r1, #0]
 8004d90:	18bb      	adds	r3, r7, r2
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	221f      	movs	r2, #31
 8004d96:	4013      	ands	r3, r2
 8004d98:	d105      	bne.n	8004da6 <USB_EPStartXfer+0x82e>
 8004d9a:	22f4      	movs	r2, #244	; 0xf4
 8004d9c:	18bb      	adds	r3, r7, r2
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3b01      	subs	r3, #1
 8004da2:	18ba      	adds	r2, r7, r2
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	23f4      	movs	r3, #244	; 0xf4
 8004da8:	18fb      	adds	r3, r7, r3
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	029b      	lsls	r3, r3, #10
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	4ab7      	ldr	r2, [pc, #732]	; (8005090 <USB_EPStartXfer+0xb18>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dba:	801a      	strh	r2, [r3, #0]
 8004dbc:	e01b      	b.n	8004df6 <USB_EPStartXfer+0x87e>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	785b      	ldrb	r3, [r3, #1]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d117      	bne.n	8004df6 <USB_EPStartXfer+0x87e>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2250      	movs	r2, #80	; 0x50
 8004dca:	5a9b      	ldrh	r3, [r3, r2]
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	001a      	movs	r2, r3
 8004dd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dd2:	189b      	adds	r3, r3, r2
 8004dd4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	00da      	lsls	r2, r3, #3
 8004ddc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dde:	18d3      	adds	r3, r2, r3
 8004de0:	4aa9      	ldr	r2, [pc, #676]	; (8005088 <USB_EPStartXfer+0xb10>)
 8004de2:	4694      	mov	ip, r2
 8004de4:	4463      	add	r3, ip
 8004de6:	677b      	str	r3, [r7, #116]	; 0x74
 8004de8:	2386      	movs	r3, #134	; 0x86
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	18fb      	adds	r3, r7, r3
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004df4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004df6:	2385      	movs	r3, #133	; 0x85
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	18fb      	adds	r3, r7, r3
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	8952      	ldrh	r2, [r2, #10]
 8004e00:	801a      	strh	r2, [r3, #0]
 8004e02:	e09f      	b.n	8004f44 <USB_EPStartXfer+0x9cc>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	785b      	ldrb	r3, [r3, #1]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d16f      	bne.n	8004eec <USB_EPStartXfer+0x974>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2180      	movs	r1, #128	; 0x80
 8004e10:	187a      	adds	r2, r7, r1
 8004e12:	6013      	str	r3, [r2, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2250      	movs	r2, #80	; 0x50
 8004e18:	5a9b      	ldrh	r3, [r3, r2]
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	001a      	movs	r2, r3
 8004e1e:	187b      	adds	r3, r7, r1
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	189b      	adds	r3, r3, r2
 8004e24:	187a      	adds	r2, r7, r1
 8004e26:	6013      	str	r3, [r2, #0]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	00da      	lsls	r2, r3, #3
 8004e2e:	187b      	adds	r3, r7, r1
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	18d3      	adds	r3, r2, r3
 8004e34:	4a97      	ldr	r2, [pc, #604]	; (8005094 <USB_EPStartXfer+0xb1c>)
 8004e36:	4694      	mov	ip, r2
 8004e38:	4463      	add	r3, ip
 8004e3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004e3c:	2386      	movs	r3, #134	; 0x86
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	18fb      	adds	r3, r7, r3
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d110      	bne.n	8004e6a <USB_EPStartXfer+0x8f2>
 8004e48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e4a:	881b      	ldrh	r3, [r3, #0]
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	4a8f      	ldr	r2, [pc, #572]	; (800508c <USB_EPStartXfer+0xb14>)
 8004e50:	4013      	ands	r3, r2
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e56:	801a      	strh	r2, [r3, #0]
 8004e58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e5a:	881b      	ldrh	r3, [r3, #0]
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	4a8c      	ldr	r2, [pc, #560]	; (8005090 <USB_EPStartXfer+0xb18>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e66:	801a      	strh	r2, [r3, #0]
 8004e68:	e066      	b.n	8004f38 <USB_EPStartXfer+0x9c0>
 8004e6a:	2386      	movs	r3, #134	; 0x86
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	18fb      	adds	r3, r7, r3
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2b3e      	cmp	r3, #62	; 0x3e
 8004e74:	d81b      	bhi.n	8004eae <USB_EPStartXfer+0x936>
 8004e76:	2286      	movs	r2, #134	; 0x86
 8004e78:	0052      	lsls	r2, r2, #1
 8004e7a:	18bb      	adds	r3, r7, r2
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	085b      	lsrs	r3, r3, #1
 8004e80:	21f0      	movs	r1, #240	; 0xf0
 8004e82:	1879      	adds	r1, r7, r1
 8004e84:	600b      	str	r3, [r1, #0]
 8004e86:	18bb      	adds	r3, r7, r2
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	d005      	beq.n	8004e9c <USB_EPStartXfer+0x924>
 8004e90:	22f0      	movs	r2, #240	; 0xf0
 8004e92:	18bb      	adds	r3, r7, r2
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	3301      	adds	r3, #1
 8004e98:	18ba      	adds	r2, r7, r2
 8004e9a:	6013      	str	r3, [r2, #0]
 8004e9c:	23f0      	movs	r3, #240	; 0xf0
 8004e9e:	18fb      	adds	r3, r7, r3
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	029b      	lsls	r3, r3, #10
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004eaa:	801a      	strh	r2, [r3, #0]
 8004eac:	e044      	b.n	8004f38 <USB_EPStartXfer+0x9c0>
 8004eae:	2286      	movs	r2, #134	; 0x86
 8004eb0:	0052      	lsls	r2, r2, #1
 8004eb2:	18bb      	adds	r3, r7, r2
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	095b      	lsrs	r3, r3, #5
 8004eb8:	21f0      	movs	r1, #240	; 0xf0
 8004eba:	1879      	adds	r1, r7, r1
 8004ebc:	600b      	str	r3, [r1, #0]
 8004ebe:	18bb      	adds	r3, r7, r2
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	221f      	movs	r2, #31
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	d105      	bne.n	8004ed4 <USB_EPStartXfer+0x95c>
 8004ec8:	22f0      	movs	r2, #240	; 0xf0
 8004eca:	18bb      	adds	r3, r7, r2
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	18ba      	adds	r2, r7, r2
 8004ed2:	6013      	str	r3, [r2, #0]
 8004ed4:	23f0      	movs	r3, #240	; 0xf0
 8004ed6:	18fb      	adds	r3, r7, r3
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	029b      	lsls	r3, r3, #10
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	4a6b      	ldr	r2, [pc, #428]	; (8005090 <USB_EPStartXfer+0xb18>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ee8:	801a      	strh	r2, [r3, #0]
 8004eea:	e025      	b.n	8004f38 <USB_EPStartXfer+0x9c0>
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	785b      	ldrb	r3, [r3, #1]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d121      	bne.n	8004f38 <USB_EPStartXfer+0x9c0>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2188      	movs	r1, #136	; 0x88
 8004ef8:	187a      	adds	r2, r7, r1
 8004efa:	6013      	str	r3, [r2, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2250      	movs	r2, #80	; 0x50
 8004f00:	5a9b      	ldrh	r3, [r3, r2]
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	001a      	movs	r2, r3
 8004f06:	187b      	adds	r3, r7, r1
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	189b      	adds	r3, r3, r2
 8004f0c:	187a      	adds	r2, r7, r1
 8004f0e:	6013      	str	r3, [r2, #0]
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	00da      	lsls	r2, r3, #3
 8004f16:	187b      	adds	r3, r7, r1
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	18d3      	adds	r3, r2, r3
 8004f1c:	4a5d      	ldr	r2, [pc, #372]	; (8005094 <USB_EPStartXfer+0xb1c>)
 8004f1e:	4694      	mov	ip, r2
 8004f20:	4463      	add	r3, ip
 8004f22:	2184      	movs	r1, #132	; 0x84
 8004f24:	187a      	adds	r2, r7, r1
 8004f26:	6013      	str	r3, [r2, #0]
 8004f28:	2386      	movs	r3, #134	; 0x86
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	18fb      	adds	r3, r7, r3
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	187b      	adds	r3, r7, r1
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004f38:	2385      	movs	r3, #133	; 0x85
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	18fb      	adds	r3, r7, r3
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	8912      	ldrh	r2, [r2, #8]
 8004f42:	801a      	strh	r2, [r3, #0]
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	6959      	ldr	r1, [r3, #20]
 8004f48:	2386      	movs	r3, #134	; 0x86
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	18fb      	adds	r3, r7, r3
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	b29c      	uxth	r4, r3
 8004f52:	2385      	movs	r3, #133	; 0x85
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	18fb      	adds	r3, r7, r3
 8004f58:	881a      	ldrh	r2, [r3, #0]
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	0023      	movs	r3, r4
 8004f5e:	f000 fd9b 	bl	8005a98 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	785b      	ldrb	r3, [r3, #1]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d117      	bne.n	8004f9a <USB_EPStartXfer+0xa22>
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	18d3      	adds	r3, r2, r3
 8004f74:	881b      	ldrh	r3, [r3, #0]
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	2068      	movs	r0, #104	; 0x68
 8004f7a:	183b      	adds	r3, r7, r0
 8004f7c:	4946      	ldr	r1, [pc, #280]	; (8005098 <USB_EPStartXfer+0xb20>)
 8004f7e:	400a      	ands	r2, r1
 8004f80:	801a      	strh	r2, [r3, #0]
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	18d3      	adds	r3, r2, r3
 8004f8c:	183a      	adds	r2, r7, r0
 8004f8e:	8812      	ldrh	r2, [r2, #0]
 8004f90:	4942      	ldr	r1, [pc, #264]	; (800509c <USB_EPStartXfer+0xb24>)
 8004f92:	430a      	orrs	r2, r1
 8004f94:	b292      	uxth	r2, r2
 8004f96:	801a      	strh	r2, [r3, #0]
 8004f98:	e01a      	b.n	8004fd0 <USB_EPStartXfer+0xa58>
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	785b      	ldrb	r3, [r3, #1]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d116      	bne.n	8004fd0 <USB_EPStartXfer+0xa58>
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	18d3      	adds	r3, r2, r3
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	206a      	movs	r0, #106	; 0x6a
 8004fb2:	183b      	adds	r3, r7, r0
 8004fb4:	4938      	ldr	r1, [pc, #224]	; (8005098 <USB_EPStartXfer+0xb20>)
 8004fb6:	400a      	ands	r2, r1
 8004fb8:	801a      	strh	r2, [r3, #0]
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	18d3      	adds	r3, r2, r3
 8004fc4:	183a      	adds	r2, r7, r0
 8004fc6:	8812      	ldrh	r2, [r2, #0]
 8004fc8:	4935      	ldr	r1, [pc, #212]	; (80050a0 <USB_EPStartXfer+0xb28>)
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	b292      	uxth	r2, r2
 8004fce:	801a      	strh	r2, [r3, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	18d3      	adds	r3, r2, r3
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	4b31      	ldr	r3, [pc, #196]	; (80050a4 <USB_EPStartXfer+0xb2c>)
 8004fe0:	2188      	movs	r1, #136	; 0x88
 8004fe2:	0049      	lsls	r1, r1, #1
 8004fe4:	468c      	mov	ip, r1
 8004fe6:	44bc      	add	ip, r7
 8004fe8:	4463      	add	r3, ip
 8004fea:	492f      	ldr	r1, [pc, #188]	; (80050a8 <USB_EPStartXfer+0xb30>)
 8004fec:	400a      	ands	r2, r1
 8004fee:	801a      	strh	r2, [r3, #0]
 8004ff0:	4b2c      	ldr	r3, [pc, #176]	; (80050a4 <USB_EPStartXfer+0xb2c>)
 8004ff2:	2288      	movs	r2, #136	; 0x88
 8004ff4:	0052      	lsls	r2, r2, #1
 8004ff6:	4694      	mov	ip, r2
 8004ff8:	44bc      	add	ip, r7
 8004ffa:	4463      	add	r3, ip
 8004ffc:	4a29      	ldr	r2, [pc, #164]	; (80050a4 <USB_EPStartXfer+0xb2c>)
 8004ffe:	2188      	movs	r1, #136	; 0x88
 8005000:	0049      	lsls	r1, r1, #1
 8005002:	468c      	mov	ip, r1
 8005004:	44bc      	add	ip, r7
 8005006:	4462      	add	r2, ip
 8005008:	8812      	ldrh	r2, [r2, #0]
 800500a:	2110      	movs	r1, #16
 800500c:	404a      	eors	r2, r1
 800500e:	801a      	strh	r2, [r3, #0]
 8005010:	4b24      	ldr	r3, [pc, #144]	; (80050a4 <USB_EPStartXfer+0xb2c>)
 8005012:	2288      	movs	r2, #136	; 0x88
 8005014:	0052      	lsls	r2, r2, #1
 8005016:	4694      	mov	ip, r2
 8005018:	44bc      	add	ip, r7
 800501a:	4463      	add	r3, ip
 800501c:	4a21      	ldr	r2, [pc, #132]	; (80050a4 <USB_EPStartXfer+0xb2c>)
 800501e:	2188      	movs	r1, #136	; 0x88
 8005020:	0049      	lsls	r1, r1, #1
 8005022:	468c      	mov	ip, r1
 8005024:	44bc      	add	ip, r7
 8005026:	4462      	add	r2, ip
 8005028:	8812      	ldrh	r2, [r2, #0]
 800502a:	2120      	movs	r1, #32
 800502c:	404a      	eors	r2, r1
 800502e:	801a      	strh	r2, [r3, #0]
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	18d3      	adds	r3, r2, r3
 800503a:	4a1a      	ldr	r2, [pc, #104]	; (80050a4 <USB_EPStartXfer+0xb2c>)
 800503c:	2188      	movs	r1, #136	; 0x88
 800503e:	0049      	lsls	r1, r1, #1
 8005040:	468c      	mov	ip, r1
 8005042:	44bc      	add	ip, r7
 8005044:	4462      	add	r2, ip
 8005046:	8812      	ldrh	r2, [r2, #0]
 8005048:	4918      	ldr	r1, [pc, #96]	; (80050ac <USB_EPStartXfer+0xb34>)
 800504a:	430a      	orrs	r2, r1
 800504c:	b292      	uxth	r2, r2
 800504e:	801a      	strh	r2, [r3, #0]
 8005050:	f000 fbdd 	bl	800580e <USB_EPStartXfer+0x1296>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	7b1b      	ldrb	r3, [r3, #12]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d000      	beq.n	800505e <USB_EPStartXfer+0xae6>
 800505c:	e0ac      	b.n	80051b8 <USB_EPStartXfer+0xc40>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	699a      	ldr	r2, [r3, #24]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	429a      	cmp	r2, r3
 8005068:	d922      	bls.n	80050b0 <USB_EPStartXfer+0xb38>
      {
        len = ep->maxpacket;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	2186      	movs	r1, #134	; 0x86
 8005070:	0049      	lsls	r1, r1, #1
 8005072:	187a      	adds	r2, r7, r1
 8005074:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	699a      	ldr	r2, [r3, #24]
 800507a:	187b      	adds	r3, r7, r1
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	1ad2      	subs	r2, r2, r3
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	619a      	str	r2, [r3, #24]
 8005084:	e01d      	b.n	80050c2 <USB_EPStartXfer+0xb4a>
 8005086:	46c0      	nop			; (mov r8, r8)
 8005088:	00000406 	.word	0x00000406
 800508c:	ffff83ff 	.word	0xffff83ff
 8005090:	ffff8000 	.word	0xffff8000
 8005094:	00000402 	.word	0x00000402
 8005098:	ffff8f8f 	.word	0xffff8f8f
 800509c:	ffff80c0 	.word	0xffff80c0
 80050a0:	ffffc080 	.word	0xffffc080
 80050a4:	fffffefe 	.word	0xfffffefe
 80050a8:	ffff8fbf 	.word	0xffff8fbf
 80050ac:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	2286      	movs	r2, #134	; 0x86
 80050b6:	0052      	lsls	r2, r2, #1
 80050b8:	18ba      	adds	r2, r7, r2
 80050ba:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	2200      	movs	r2, #0
 80050c0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2194      	movs	r1, #148	; 0x94
 80050c6:	187a      	adds	r2, r7, r1
 80050c8:	6013      	str	r3, [r2, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2250      	movs	r2, #80	; 0x50
 80050ce:	5a9b      	ldrh	r3, [r3, r2]
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	001a      	movs	r2, r3
 80050d4:	187b      	adds	r3, r7, r1
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	189b      	adds	r3, r3, r2
 80050da:	187a      	adds	r2, r7, r1
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	00da      	lsls	r2, r3, #3
 80050e4:	187b      	adds	r3, r7, r1
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	18d3      	adds	r3, r2, r3
 80050ea:	4ac2      	ldr	r2, [pc, #776]	; (80053f4 <USB_EPStartXfer+0xe7c>)
 80050ec:	4694      	mov	ip, r2
 80050ee:	4463      	add	r3, ip
 80050f0:	2290      	movs	r2, #144	; 0x90
 80050f2:	18ba      	adds	r2, r7, r2
 80050f4:	6013      	str	r3, [r2, #0]
 80050f6:	2386      	movs	r3, #134	; 0x86
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	18fb      	adds	r3, r7, r3
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d115      	bne.n	800512e <USB_EPStartXfer+0xbb6>
 8005102:	2190      	movs	r1, #144	; 0x90
 8005104:	187b      	adds	r3, r7, r1
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	881b      	ldrh	r3, [r3, #0]
 800510a:	b29b      	uxth	r3, r3
 800510c:	4aba      	ldr	r2, [pc, #744]	; (80053f8 <USB_EPStartXfer+0xe80>)
 800510e:	4013      	ands	r3, r2
 8005110:	b29a      	uxth	r2, r3
 8005112:	187b      	adds	r3, r7, r1
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	801a      	strh	r2, [r3, #0]
 8005118:	187b      	adds	r3, r7, r1
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	881b      	ldrh	r3, [r3, #0]
 800511e:	b29b      	uxth	r3, r3
 8005120:	4ab6      	ldr	r2, [pc, #728]	; (80053fc <USB_EPStartXfer+0xe84>)
 8005122:	4313      	orrs	r3, r2
 8005124:	b29a      	uxth	r2, r3
 8005126:	187b      	adds	r3, r7, r1
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	801a      	strh	r2, [r3, #0]
 800512c:	e34a      	b.n	80057c4 <USB_EPStartXfer+0x124c>
 800512e:	2386      	movs	r3, #134	; 0x86
 8005130:	005b      	lsls	r3, r3, #1
 8005132:	18fb      	adds	r3, r7, r3
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b3e      	cmp	r3, #62	; 0x3e
 8005138:	d81d      	bhi.n	8005176 <USB_EPStartXfer+0xbfe>
 800513a:	2286      	movs	r2, #134	; 0x86
 800513c:	0052      	lsls	r2, r2, #1
 800513e:	18bb      	adds	r3, r7, r2
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	085b      	lsrs	r3, r3, #1
 8005144:	21ec      	movs	r1, #236	; 0xec
 8005146:	1879      	adds	r1, r7, r1
 8005148:	600b      	str	r3, [r1, #0]
 800514a:	18bb      	adds	r3, r7, r2
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2201      	movs	r2, #1
 8005150:	4013      	ands	r3, r2
 8005152:	d005      	beq.n	8005160 <USB_EPStartXfer+0xbe8>
 8005154:	22ec      	movs	r2, #236	; 0xec
 8005156:	18bb      	adds	r3, r7, r2
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	3301      	adds	r3, #1
 800515c:	18ba      	adds	r2, r7, r2
 800515e:	6013      	str	r3, [r2, #0]
 8005160:	23ec      	movs	r3, #236	; 0xec
 8005162:	18fb      	adds	r3, r7, r3
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	b29b      	uxth	r3, r3
 8005168:	029b      	lsls	r3, r3, #10
 800516a:	b29a      	uxth	r2, r3
 800516c:	2390      	movs	r3, #144	; 0x90
 800516e:	18fb      	adds	r3, r7, r3
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	801a      	strh	r2, [r3, #0]
 8005174:	e326      	b.n	80057c4 <USB_EPStartXfer+0x124c>
 8005176:	2286      	movs	r2, #134	; 0x86
 8005178:	0052      	lsls	r2, r2, #1
 800517a:	18bb      	adds	r3, r7, r2
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	095b      	lsrs	r3, r3, #5
 8005180:	21ec      	movs	r1, #236	; 0xec
 8005182:	1879      	adds	r1, r7, r1
 8005184:	600b      	str	r3, [r1, #0]
 8005186:	18bb      	adds	r3, r7, r2
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	221f      	movs	r2, #31
 800518c:	4013      	ands	r3, r2
 800518e:	d105      	bne.n	800519c <USB_EPStartXfer+0xc24>
 8005190:	22ec      	movs	r2, #236	; 0xec
 8005192:	18bb      	adds	r3, r7, r2
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	3b01      	subs	r3, #1
 8005198:	18ba      	adds	r2, r7, r2
 800519a:	6013      	str	r3, [r2, #0]
 800519c:	23ec      	movs	r3, #236	; 0xec
 800519e:	18fb      	adds	r3, r7, r3
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	029b      	lsls	r3, r3, #10
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	4a94      	ldr	r2, [pc, #592]	; (80053fc <USB_EPStartXfer+0xe84>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	2390      	movs	r3, #144	; 0x90
 80051b0:	18fb      	adds	r3, r7, r3
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	801a      	strh	r2, [r3, #0]
 80051b6:	e305      	b.n	80057c4 <USB_EPStartXfer+0x124c>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	78db      	ldrb	r3, [r3, #3]
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d000      	beq.n	80051c2 <USB_EPStartXfer+0xc4a>
 80051c0:	e182      	b.n	80054c8 <USB_EPStartXfer+0xf50>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	785b      	ldrb	r3, [r3, #1]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d000      	beq.n	80051cc <USB_EPStartXfer+0xc54>
 80051ca:	e072      	b.n	80052b2 <USB_EPStartXfer+0xd3a>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	21b0      	movs	r1, #176	; 0xb0
 80051d0:	187a      	adds	r2, r7, r1
 80051d2:	6013      	str	r3, [r2, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2250      	movs	r2, #80	; 0x50
 80051d8:	5a9b      	ldrh	r3, [r3, r2]
 80051da:	b29b      	uxth	r3, r3
 80051dc:	001a      	movs	r2, r3
 80051de:	187b      	adds	r3, r7, r1
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	189b      	adds	r3, r3, r2
 80051e4:	187a      	adds	r2, r7, r1
 80051e6:	6013      	str	r3, [r2, #0]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	00da      	lsls	r2, r3, #3
 80051ee:	187b      	adds	r3, r7, r1
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	18d3      	adds	r3, r2, r3
 80051f4:	4a82      	ldr	r2, [pc, #520]	; (8005400 <USB_EPStartXfer+0xe88>)
 80051f6:	4694      	mov	ip, r2
 80051f8:	4463      	add	r3, ip
 80051fa:	22ac      	movs	r2, #172	; 0xac
 80051fc:	18ba      	adds	r2, r7, r2
 80051fe:	6013      	str	r3, [r2, #0]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d115      	bne.n	8005234 <USB_EPStartXfer+0xcbc>
 8005208:	21ac      	movs	r1, #172	; 0xac
 800520a:	187b      	adds	r3, r7, r1
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	881b      	ldrh	r3, [r3, #0]
 8005210:	b29b      	uxth	r3, r3
 8005212:	4a79      	ldr	r2, [pc, #484]	; (80053f8 <USB_EPStartXfer+0xe80>)
 8005214:	4013      	ands	r3, r2
 8005216:	b29a      	uxth	r2, r3
 8005218:	187b      	adds	r3, r7, r1
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	801a      	strh	r2, [r3, #0]
 800521e:	187b      	adds	r3, r7, r1
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	881b      	ldrh	r3, [r3, #0]
 8005224:	b29b      	uxth	r3, r3
 8005226:	4a75      	ldr	r2, [pc, #468]	; (80053fc <USB_EPStartXfer+0xe84>)
 8005228:	4313      	orrs	r3, r2
 800522a:	b29a      	uxth	r2, r3
 800522c:	187b      	adds	r3, r7, r1
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	801a      	strh	r2, [r3, #0]
 8005232:	e062      	b.n	80052fa <USB_EPStartXfer+0xd82>
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	2b3e      	cmp	r3, #62	; 0x3e
 800523a:	d81b      	bhi.n	8005274 <USB_EPStartXfer+0xcfc>
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	085b      	lsrs	r3, r3, #1
 8005242:	22e8      	movs	r2, #232	; 0xe8
 8005244:	18ba      	adds	r2, r7, r2
 8005246:	6013      	str	r3, [r2, #0]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	2201      	movs	r2, #1
 800524e:	4013      	ands	r3, r2
 8005250:	d005      	beq.n	800525e <USB_EPStartXfer+0xce6>
 8005252:	22e8      	movs	r2, #232	; 0xe8
 8005254:	18bb      	adds	r3, r7, r2
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	3301      	adds	r3, #1
 800525a:	18ba      	adds	r2, r7, r2
 800525c:	6013      	str	r3, [r2, #0]
 800525e:	23e8      	movs	r3, #232	; 0xe8
 8005260:	18fb      	adds	r3, r7, r3
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	b29b      	uxth	r3, r3
 8005266:	029b      	lsls	r3, r3, #10
 8005268:	b29a      	uxth	r2, r3
 800526a:	23ac      	movs	r3, #172	; 0xac
 800526c:	18fb      	adds	r3, r7, r3
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	801a      	strh	r2, [r3, #0]
 8005272:	e042      	b.n	80052fa <USB_EPStartXfer+0xd82>
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	095b      	lsrs	r3, r3, #5
 800527a:	22e8      	movs	r2, #232	; 0xe8
 800527c:	18ba      	adds	r2, r7, r2
 800527e:	6013      	str	r3, [r2, #0]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	221f      	movs	r2, #31
 8005286:	4013      	ands	r3, r2
 8005288:	d105      	bne.n	8005296 <USB_EPStartXfer+0xd1e>
 800528a:	22e8      	movs	r2, #232	; 0xe8
 800528c:	18bb      	adds	r3, r7, r2
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3b01      	subs	r3, #1
 8005292:	18ba      	adds	r2, r7, r2
 8005294:	6013      	str	r3, [r2, #0]
 8005296:	23e8      	movs	r3, #232	; 0xe8
 8005298:	18fb      	adds	r3, r7, r3
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	b29b      	uxth	r3, r3
 800529e:	029b      	lsls	r3, r3, #10
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	4a56      	ldr	r2, [pc, #344]	; (80053fc <USB_EPStartXfer+0xe84>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	23ac      	movs	r3, #172	; 0xac
 80052aa:	18fb      	adds	r3, r7, r3
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	801a      	strh	r2, [r3, #0]
 80052b0:	e023      	b.n	80052fa <USB_EPStartXfer+0xd82>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	785b      	ldrb	r3, [r3, #1]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d11f      	bne.n	80052fa <USB_EPStartXfer+0xd82>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	21b8      	movs	r1, #184	; 0xb8
 80052be:	187a      	adds	r2, r7, r1
 80052c0:	6013      	str	r3, [r2, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2250      	movs	r2, #80	; 0x50
 80052c6:	5a9b      	ldrh	r3, [r3, r2]
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	001a      	movs	r2, r3
 80052cc:	187b      	adds	r3, r7, r1
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	189b      	adds	r3, r3, r2
 80052d2:	187a      	adds	r2, r7, r1
 80052d4:	6013      	str	r3, [r2, #0]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	00da      	lsls	r2, r3, #3
 80052dc:	187b      	adds	r3, r7, r1
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	18d3      	adds	r3, r2, r3
 80052e2:	4a47      	ldr	r2, [pc, #284]	; (8005400 <USB_EPStartXfer+0xe88>)
 80052e4:	4694      	mov	ip, r2
 80052e6:	4463      	add	r3, ip
 80052e8:	21b4      	movs	r1, #180	; 0xb4
 80052ea:	187a      	adds	r2, r7, r1
 80052ec:	6013      	str	r3, [r2, #0]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	187b      	adds	r3, r7, r1
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	801a      	strh	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	22a8      	movs	r2, #168	; 0xa8
 80052fe:	18ba      	adds	r2, r7, r2
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	785b      	ldrb	r3, [r3, #1]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d000      	beq.n	800530c <USB_EPStartXfer+0xd94>
 800530a:	e07b      	b.n	8005404 <USB_EPStartXfer+0xe8c>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	21a0      	movs	r1, #160	; 0xa0
 8005310:	187a      	adds	r2, r7, r1
 8005312:	6013      	str	r3, [r2, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2250      	movs	r2, #80	; 0x50
 8005318:	5a9b      	ldrh	r3, [r3, r2]
 800531a:	b29b      	uxth	r3, r3
 800531c:	001a      	movs	r2, r3
 800531e:	187b      	adds	r3, r7, r1
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	189b      	adds	r3, r3, r2
 8005324:	187a      	adds	r2, r7, r1
 8005326:	6013      	str	r3, [r2, #0]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	00da      	lsls	r2, r3, #3
 800532e:	187b      	adds	r3, r7, r1
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	18d3      	adds	r3, r2, r3
 8005334:	4a2f      	ldr	r2, [pc, #188]	; (80053f4 <USB_EPStartXfer+0xe7c>)
 8005336:	4694      	mov	ip, r2
 8005338:	4463      	add	r3, ip
 800533a:	229c      	movs	r2, #156	; 0x9c
 800533c:	18ba      	adds	r2, r7, r2
 800533e:	6013      	str	r3, [r2, #0]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d115      	bne.n	8005374 <USB_EPStartXfer+0xdfc>
 8005348:	219c      	movs	r1, #156	; 0x9c
 800534a:	187b      	adds	r3, r7, r1
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	881b      	ldrh	r3, [r3, #0]
 8005350:	b29b      	uxth	r3, r3
 8005352:	4a29      	ldr	r2, [pc, #164]	; (80053f8 <USB_EPStartXfer+0xe80>)
 8005354:	4013      	ands	r3, r2
 8005356:	b29a      	uxth	r2, r3
 8005358:	187b      	adds	r3, r7, r1
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	801a      	strh	r2, [r3, #0]
 800535e:	187b      	adds	r3, r7, r1
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	b29b      	uxth	r3, r3
 8005366:	4a25      	ldr	r2, [pc, #148]	; (80053fc <USB_EPStartXfer+0xe84>)
 8005368:	4313      	orrs	r3, r2
 800536a:	b29a      	uxth	r2, r3
 800536c:	187b      	adds	r3, r7, r1
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	801a      	strh	r2, [r3, #0]
 8005372:	e068      	b.n	8005446 <USB_EPStartXfer+0xece>
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	2b3e      	cmp	r3, #62	; 0x3e
 800537a:	d81b      	bhi.n	80053b4 <USB_EPStartXfer+0xe3c>
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	085b      	lsrs	r3, r3, #1
 8005382:	22e4      	movs	r2, #228	; 0xe4
 8005384:	18ba      	adds	r2, r7, r2
 8005386:	6013      	str	r3, [r2, #0]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	2201      	movs	r2, #1
 800538e:	4013      	ands	r3, r2
 8005390:	d005      	beq.n	800539e <USB_EPStartXfer+0xe26>
 8005392:	22e4      	movs	r2, #228	; 0xe4
 8005394:	18bb      	adds	r3, r7, r2
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3301      	adds	r3, #1
 800539a:	18ba      	adds	r2, r7, r2
 800539c:	6013      	str	r3, [r2, #0]
 800539e:	23e4      	movs	r3, #228	; 0xe4
 80053a0:	18fb      	adds	r3, r7, r3
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	029b      	lsls	r3, r3, #10
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	239c      	movs	r3, #156	; 0x9c
 80053ac:	18fb      	adds	r3, r7, r3
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	801a      	strh	r2, [r3, #0]
 80053b2:	e048      	b.n	8005446 <USB_EPStartXfer+0xece>
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	095b      	lsrs	r3, r3, #5
 80053ba:	22e4      	movs	r2, #228	; 0xe4
 80053bc:	18ba      	adds	r2, r7, r2
 80053be:	6013      	str	r3, [r2, #0]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	221f      	movs	r2, #31
 80053c6:	4013      	ands	r3, r2
 80053c8:	d105      	bne.n	80053d6 <USB_EPStartXfer+0xe5e>
 80053ca:	22e4      	movs	r2, #228	; 0xe4
 80053cc:	18bb      	adds	r3, r7, r2
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	3b01      	subs	r3, #1
 80053d2:	18ba      	adds	r2, r7, r2
 80053d4:	6013      	str	r3, [r2, #0]
 80053d6:	23e4      	movs	r3, #228	; 0xe4
 80053d8:	18fb      	adds	r3, r7, r3
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	b29b      	uxth	r3, r3
 80053de:	029b      	lsls	r3, r3, #10
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	4a06      	ldr	r2, [pc, #24]	; (80053fc <USB_EPStartXfer+0xe84>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	239c      	movs	r3, #156	; 0x9c
 80053ea:	18fb      	adds	r3, r7, r3
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	801a      	strh	r2, [r3, #0]
 80053f0:	e029      	b.n	8005446 <USB_EPStartXfer+0xece>
 80053f2:	46c0      	nop			; (mov r8, r8)
 80053f4:	00000406 	.word	0x00000406
 80053f8:	ffff83ff 	.word	0xffff83ff
 80053fc:	ffff8000 	.word	0xffff8000
 8005400:	00000402 	.word	0x00000402
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	785b      	ldrb	r3, [r3, #1]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d11c      	bne.n	8005446 <USB_EPStartXfer+0xece>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2250      	movs	r2, #80	; 0x50
 8005410:	5a9b      	ldrh	r3, [r3, r2]
 8005412:	b29b      	uxth	r3, r3
 8005414:	001a      	movs	r2, r3
 8005416:	21a8      	movs	r1, #168	; 0xa8
 8005418:	187b      	adds	r3, r7, r1
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	189b      	adds	r3, r3, r2
 800541e:	187a      	adds	r2, r7, r1
 8005420:	6013      	str	r3, [r2, #0]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	00da      	lsls	r2, r3, #3
 8005428:	187b      	adds	r3, r7, r1
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	18d3      	adds	r3, r2, r3
 800542e:	4acc      	ldr	r2, [pc, #816]	; (8005760 <USB_EPStartXfer+0x11e8>)
 8005430:	4694      	mov	ip, r2
 8005432:	4463      	add	r3, ip
 8005434:	21a4      	movs	r1, #164	; 0xa4
 8005436:	187a      	adds	r2, r7, r1
 8005438:	6013      	str	r3, [r2, #0]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	b29a      	uxth	r2, r3
 8005440:	187b      	adds	r3, r7, r1
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d100      	bne.n	8005450 <USB_EPStartXfer+0xed8>
 800544e:	e1b9      	b.n	80057c4 <USB_EPStartXfer+0x124c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	18d2      	adds	r2, r2, r3
 800545a:	219a      	movs	r1, #154	; 0x9a
 800545c:	187b      	adds	r3, r7, r1
 800545e:	8812      	ldrh	r2, [r2, #0]
 8005460:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005462:	187b      	adds	r3, r7, r1
 8005464:	881a      	ldrh	r2, [r3, #0]
 8005466:	2380      	movs	r3, #128	; 0x80
 8005468:	01db      	lsls	r3, r3, #7
 800546a:	4013      	ands	r3, r2
 800546c:	d005      	beq.n	800547a <USB_EPStartXfer+0xf02>
 800546e:	239a      	movs	r3, #154	; 0x9a
 8005470:	18fb      	adds	r3, r7, r3
 8005472:	881b      	ldrh	r3, [r3, #0]
 8005474:	2240      	movs	r2, #64	; 0x40
 8005476:	4013      	ands	r3, r2
 8005478:	d10e      	bne.n	8005498 <USB_EPStartXfer+0xf20>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800547a:	239a      	movs	r3, #154	; 0x9a
 800547c:	18fb      	adds	r3, r7, r3
 800547e:	881a      	ldrh	r2, [r3, #0]
 8005480:	2380      	movs	r3, #128	; 0x80
 8005482:	01db      	lsls	r3, r3, #7
 8005484:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005486:	d000      	beq.n	800548a <USB_EPStartXfer+0xf12>
 8005488:	e19c      	b.n	80057c4 <USB_EPStartXfer+0x124c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800548a:	239a      	movs	r3, #154	; 0x9a
 800548c:	18fb      	adds	r3, r7, r3
 800548e:	881b      	ldrh	r3, [r3, #0]
 8005490:	2240      	movs	r2, #64	; 0x40
 8005492:	4013      	ands	r3, r2
 8005494:	d000      	beq.n	8005498 <USB_EPStartXfer+0xf20>
 8005496:	e195      	b.n	80057c4 <USB_EPStartXfer+0x124c>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	18d3      	adds	r3, r2, r3
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	2098      	movs	r0, #152	; 0x98
 80054a8:	183b      	adds	r3, r7, r0
 80054aa:	49ae      	ldr	r1, [pc, #696]	; (8005764 <USB_EPStartXfer+0x11ec>)
 80054ac:	400a      	ands	r2, r1
 80054ae:	801a      	strh	r2, [r3, #0]
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	18d3      	adds	r3, r2, r3
 80054ba:	183a      	adds	r2, r7, r0
 80054bc:	8812      	ldrh	r2, [r2, #0]
 80054be:	49aa      	ldr	r1, [pc, #680]	; (8005768 <USB_EPStartXfer+0x11f0>)
 80054c0:	430a      	orrs	r2, r1
 80054c2:	b292      	uxth	r2, r2
 80054c4:	801a      	strh	r2, [r3, #0]
 80054c6:	e17d      	b.n	80057c4 <USB_EPStartXfer+0x124c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	78db      	ldrb	r3, [r3, #3]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d000      	beq.n	80054d2 <USB_EPStartXfer+0xf5a>
 80054d0:	e176      	b.n	80057c0 <USB_EPStartXfer+0x1248>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	699a      	ldr	r2, [r3, #24]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d90d      	bls.n	80054fa <USB_EPStartXfer+0xf82>
        {
          len = ep->maxpacket;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	2186      	movs	r1, #134	; 0x86
 80054e4:	0049      	lsls	r1, r1, #1
 80054e6:	187a      	adds	r2, r7, r1
 80054e8:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	699a      	ldr	r2, [r3, #24]
 80054ee:	187b      	adds	r3, r7, r1
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	1ad2      	subs	r2, r2, r3
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	619a      	str	r2, [r3, #24]
 80054f8:	e008      	b.n	800550c <USB_EPStartXfer+0xf94>
        }
        else
        {
          len = ep->xfer_len;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	2286      	movs	r2, #134	; 0x86
 8005500:	0052      	lsls	r2, r2, #1
 8005502:	18ba      	adds	r2, r7, r2
 8005504:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2200      	movs	r2, #0
 800550a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	785b      	ldrb	r3, [r3, #1]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d000      	beq.n	8005516 <USB_EPStartXfer+0xf9e>
 8005514:	e07a      	b.n	800560c <USB_EPStartXfer+0x1094>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	21d0      	movs	r1, #208	; 0xd0
 800551a:	187a      	adds	r2, r7, r1
 800551c:	6013      	str	r3, [r2, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2250      	movs	r2, #80	; 0x50
 8005522:	5a9b      	ldrh	r3, [r3, r2]
 8005524:	b29b      	uxth	r3, r3
 8005526:	001a      	movs	r2, r3
 8005528:	187b      	adds	r3, r7, r1
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	189b      	adds	r3, r3, r2
 800552e:	187a      	adds	r2, r7, r1
 8005530:	6013      	str	r3, [r2, #0]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	00da      	lsls	r2, r3, #3
 8005538:	187b      	adds	r3, r7, r1
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	18d3      	adds	r3, r2, r3
 800553e:	4a8b      	ldr	r2, [pc, #556]	; (800576c <USB_EPStartXfer+0x11f4>)
 8005540:	4694      	mov	ip, r2
 8005542:	4463      	add	r3, ip
 8005544:	22cc      	movs	r2, #204	; 0xcc
 8005546:	18ba      	adds	r2, r7, r2
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	2386      	movs	r3, #134	; 0x86
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	18fb      	adds	r3, r7, r3
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d115      	bne.n	8005582 <USB_EPStartXfer+0x100a>
 8005556:	21cc      	movs	r1, #204	; 0xcc
 8005558:	187b      	adds	r3, r7, r1
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	881b      	ldrh	r3, [r3, #0]
 800555e:	b29b      	uxth	r3, r3
 8005560:	4a83      	ldr	r2, [pc, #524]	; (8005770 <USB_EPStartXfer+0x11f8>)
 8005562:	4013      	ands	r3, r2
 8005564:	b29a      	uxth	r2, r3
 8005566:	187b      	adds	r3, r7, r1
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	801a      	strh	r2, [r3, #0]
 800556c:	187b      	adds	r3, r7, r1
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	881b      	ldrh	r3, [r3, #0]
 8005572:	b29b      	uxth	r3, r3
 8005574:	4a7f      	ldr	r2, [pc, #508]	; (8005774 <USB_EPStartXfer+0x11fc>)
 8005576:	4313      	orrs	r3, r2
 8005578:	b29a      	uxth	r2, r3
 800557a:	187b      	adds	r3, r7, r1
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	801a      	strh	r2, [r3, #0]
 8005580:	e06a      	b.n	8005658 <USB_EPStartXfer+0x10e0>
 8005582:	2386      	movs	r3, #134	; 0x86
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	18fb      	adds	r3, r7, r3
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2b3e      	cmp	r3, #62	; 0x3e
 800558c:	d81d      	bhi.n	80055ca <USB_EPStartXfer+0x1052>
 800558e:	2286      	movs	r2, #134	; 0x86
 8005590:	0052      	lsls	r2, r2, #1
 8005592:	18bb      	adds	r3, r7, r2
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	085b      	lsrs	r3, r3, #1
 8005598:	21e0      	movs	r1, #224	; 0xe0
 800559a:	1879      	adds	r1, r7, r1
 800559c:	600b      	str	r3, [r1, #0]
 800559e:	18bb      	adds	r3, r7, r2
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2201      	movs	r2, #1
 80055a4:	4013      	ands	r3, r2
 80055a6:	d005      	beq.n	80055b4 <USB_EPStartXfer+0x103c>
 80055a8:	22e0      	movs	r2, #224	; 0xe0
 80055aa:	18bb      	adds	r3, r7, r2
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	3301      	adds	r3, #1
 80055b0:	18ba      	adds	r2, r7, r2
 80055b2:	6013      	str	r3, [r2, #0]
 80055b4:	23e0      	movs	r3, #224	; 0xe0
 80055b6:	18fb      	adds	r3, r7, r3
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	029b      	lsls	r3, r3, #10
 80055be:	b29a      	uxth	r2, r3
 80055c0:	23cc      	movs	r3, #204	; 0xcc
 80055c2:	18fb      	adds	r3, r7, r3
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	801a      	strh	r2, [r3, #0]
 80055c8:	e046      	b.n	8005658 <USB_EPStartXfer+0x10e0>
 80055ca:	2286      	movs	r2, #134	; 0x86
 80055cc:	0052      	lsls	r2, r2, #1
 80055ce:	18bb      	adds	r3, r7, r2
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	095b      	lsrs	r3, r3, #5
 80055d4:	21e0      	movs	r1, #224	; 0xe0
 80055d6:	1879      	adds	r1, r7, r1
 80055d8:	600b      	str	r3, [r1, #0]
 80055da:	18bb      	adds	r3, r7, r2
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	221f      	movs	r2, #31
 80055e0:	4013      	ands	r3, r2
 80055e2:	d105      	bne.n	80055f0 <USB_EPStartXfer+0x1078>
 80055e4:	22e0      	movs	r2, #224	; 0xe0
 80055e6:	18bb      	adds	r3, r7, r2
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	3b01      	subs	r3, #1
 80055ec:	18ba      	adds	r2, r7, r2
 80055ee:	6013      	str	r3, [r2, #0]
 80055f0:	23e0      	movs	r3, #224	; 0xe0
 80055f2:	18fb      	adds	r3, r7, r3
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	029b      	lsls	r3, r3, #10
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	4a5d      	ldr	r2, [pc, #372]	; (8005774 <USB_EPStartXfer+0x11fc>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	b29a      	uxth	r2, r3
 8005602:	23cc      	movs	r3, #204	; 0xcc
 8005604:	18fb      	adds	r3, r7, r3
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	801a      	strh	r2, [r3, #0]
 800560a:	e025      	b.n	8005658 <USB_EPStartXfer+0x10e0>
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	785b      	ldrb	r3, [r3, #1]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d121      	bne.n	8005658 <USB_EPStartXfer+0x10e0>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	21d8      	movs	r1, #216	; 0xd8
 8005618:	187a      	adds	r2, r7, r1
 800561a:	6013      	str	r3, [r2, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2250      	movs	r2, #80	; 0x50
 8005620:	5a9b      	ldrh	r3, [r3, r2]
 8005622:	b29b      	uxth	r3, r3
 8005624:	001a      	movs	r2, r3
 8005626:	187b      	adds	r3, r7, r1
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	189b      	adds	r3, r3, r2
 800562c:	187a      	adds	r2, r7, r1
 800562e:	6013      	str	r3, [r2, #0]
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	00da      	lsls	r2, r3, #3
 8005636:	187b      	adds	r3, r7, r1
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	18d3      	adds	r3, r2, r3
 800563c:	4a4b      	ldr	r2, [pc, #300]	; (800576c <USB_EPStartXfer+0x11f4>)
 800563e:	4694      	mov	ip, r2
 8005640:	4463      	add	r3, ip
 8005642:	21d4      	movs	r1, #212	; 0xd4
 8005644:	187a      	adds	r2, r7, r1
 8005646:	6013      	str	r3, [r2, #0]
 8005648:	2386      	movs	r3, #134	; 0x86
 800564a:	005b      	lsls	r3, r3, #1
 800564c:	18fb      	adds	r3, r7, r3
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	b29a      	uxth	r2, r3
 8005652:	187b      	adds	r3, r7, r1
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	801a      	strh	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	22c8      	movs	r2, #200	; 0xc8
 800565c:	18ba      	adds	r2, r7, r2
 800565e:	6013      	str	r3, [r2, #0]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	785b      	ldrb	r3, [r3, #1]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d000      	beq.n	800566a <USB_EPStartXfer+0x10f2>
 8005668:	e086      	b.n	8005778 <USB_EPStartXfer+0x1200>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	21c0      	movs	r1, #192	; 0xc0
 800566e:	187a      	adds	r2, r7, r1
 8005670:	6013      	str	r3, [r2, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2250      	movs	r2, #80	; 0x50
 8005676:	5a9b      	ldrh	r3, [r3, r2]
 8005678:	b29b      	uxth	r3, r3
 800567a:	001a      	movs	r2, r3
 800567c:	187b      	adds	r3, r7, r1
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	189b      	adds	r3, r3, r2
 8005682:	187a      	adds	r2, r7, r1
 8005684:	6013      	str	r3, [r2, #0]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	00da      	lsls	r2, r3, #3
 800568c:	187b      	adds	r3, r7, r1
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	18d3      	adds	r3, r2, r3
 8005692:	4a33      	ldr	r2, [pc, #204]	; (8005760 <USB_EPStartXfer+0x11e8>)
 8005694:	4694      	mov	ip, r2
 8005696:	4463      	add	r3, ip
 8005698:	22bc      	movs	r2, #188	; 0xbc
 800569a:	18ba      	adds	r2, r7, r2
 800569c:	6013      	str	r3, [r2, #0]
 800569e:	2386      	movs	r3, #134	; 0x86
 80056a0:	005b      	lsls	r3, r3, #1
 80056a2:	18fb      	adds	r3, r7, r3
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d115      	bne.n	80056d6 <USB_EPStartXfer+0x115e>
 80056aa:	21bc      	movs	r1, #188	; 0xbc
 80056ac:	187b      	adds	r3, r7, r1
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	4a2e      	ldr	r2, [pc, #184]	; (8005770 <USB_EPStartXfer+0x11f8>)
 80056b6:	4013      	ands	r3, r2
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	187b      	adds	r3, r7, r1
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	801a      	strh	r2, [r3, #0]
 80056c0:	187b      	adds	r3, r7, r1
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	881b      	ldrh	r3, [r3, #0]
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	4a2a      	ldr	r2, [pc, #168]	; (8005774 <USB_EPStartXfer+0x11fc>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	187b      	adds	r3, r7, r1
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	801a      	strh	r2, [r3, #0]
 80056d4:	e076      	b.n	80057c4 <USB_EPStartXfer+0x124c>
 80056d6:	2386      	movs	r3, #134	; 0x86
 80056d8:	005b      	lsls	r3, r3, #1
 80056da:	18fb      	adds	r3, r7, r3
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b3e      	cmp	r3, #62	; 0x3e
 80056e0:	d81d      	bhi.n	800571e <USB_EPStartXfer+0x11a6>
 80056e2:	2286      	movs	r2, #134	; 0x86
 80056e4:	0052      	lsls	r2, r2, #1
 80056e6:	18bb      	adds	r3, r7, r2
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	085b      	lsrs	r3, r3, #1
 80056ec:	21dc      	movs	r1, #220	; 0xdc
 80056ee:	1879      	adds	r1, r7, r1
 80056f0:	600b      	str	r3, [r1, #0]
 80056f2:	18bb      	adds	r3, r7, r2
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2201      	movs	r2, #1
 80056f8:	4013      	ands	r3, r2
 80056fa:	d005      	beq.n	8005708 <USB_EPStartXfer+0x1190>
 80056fc:	22dc      	movs	r2, #220	; 0xdc
 80056fe:	18bb      	adds	r3, r7, r2
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	3301      	adds	r3, #1
 8005704:	18ba      	adds	r2, r7, r2
 8005706:	6013      	str	r3, [r2, #0]
 8005708:	23dc      	movs	r3, #220	; 0xdc
 800570a:	18fb      	adds	r3, r7, r3
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	b29b      	uxth	r3, r3
 8005710:	029b      	lsls	r3, r3, #10
 8005712:	b29a      	uxth	r2, r3
 8005714:	23bc      	movs	r3, #188	; 0xbc
 8005716:	18fb      	adds	r3, r7, r3
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	801a      	strh	r2, [r3, #0]
 800571c:	e052      	b.n	80057c4 <USB_EPStartXfer+0x124c>
 800571e:	2286      	movs	r2, #134	; 0x86
 8005720:	0052      	lsls	r2, r2, #1
 8005722:	18bb      	adds	r3, r7, r2
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	095b      	lsrs	r3, r3, #5
 8005728:	21dc      	movs	r1, #220	; 0xdc
 800572a:	1879      	adds	r1, r7, r1
 800572c:	600b      	str	r3, [r1, #0]
 800572e:	18bb      	adds	r3, r7, r2
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	221f      	movs	r2, #31
 8005734:	4013      	ands	r3, r2
 8005736:	d105      	bne.n	8005744 <USB_EPStartXfer+0x11cc>
 8005738:	22dc      	movs	r2, #220	; 0xdc
 800573a:	18bb      	adds	r3, r7, r2
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	3b01      	subs	r3, #1
 8005740:	18ba      	adds	r2, r7, r2
 8005742:	6013      	str	r3, [r2, #0]
 8005744:	23dc      	movs	r3, #220	; 0xdc
 8005746:	18fb      	adds	r3, r7, r3
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	b29b      	uxth	r3, r3
 800574c:	029b      	lsls	r3, r3, #10
 800574e:	b29b      	uxth	r3, r3
 8005750:	4a08      	ldr	r2, [pc, #32]	; (8005774 <USB_EPStartXfer+0x11fc>)
 8005752:	4313      	orrs	r3, r2
 8005754:	b29a      	uxth	r2, r3
 8005756:	23bc      	movs	r3, #188	; 0xbc
 8005758:	18fb      	adds	r3, r7, r3
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	801a      	strh	r2, [r3, #0]
 800575e:	e031      	b.n	80057c4 <USB_EPStartXfer+0x124c>
 8005760:	00000406 	.word	0x00000406
 8005764:	ffff8f8f 	.word	0xffff8f8f
 8005768:	ffff80c0 	.word	0xffff80c0
 800576c:	00000402 	.word	0x00000402
 8005770:	ffff83ff 	.word	0xffff83ff
 8005774:	ffff8000 	.word	0xffff8000
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	785b      	ldrb	r3, [r3, #1]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d121      	bne.n	80057c4 <USB_EPStartXfer+0x124c>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2250      	movs	r2, #80	; 0x50
 8005784:	5a9b      	ldrh	r3, [r3, r2]
 8005786:	b29b      	uxth	r3, r3
 8005788:	001a      	movs	r2, r3
 800578a:	21c8      	movs	r1, #200	; 0xc8
 800578c:	187b      	adds	r3, r7, r1
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	189b      	adds	r3, r3, r2
 8005792:	187a      	adds	r2, r7, r1
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	00da      	lsls	r2, r3, #3
 800579c:	187b      	adds	r3, r7, r1
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	18d3      	adds	r3, r2, r3
 80057a2:	4a1d      	ldr	r2, [pc, #116]	; (8005818 <USB_EPStartXfer+0x12a0>)
 80057a4:	4694      	mov	ip, r2
 80057a6:	4463      	add	r3, ip
 80057a8:	21c4      	movs	r1, #196	; 0xc4
 80057aa:	187a      	adds	r2, r7, r1
 80057ac:	6013      	str	r3, [r2, #0]
 80057ae:	2386      	movs	r3, #134	; 0x86
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	18fb      	adds	r3, r7, r3
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	187b      	adds	r3, r7, r1
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	801a      	strh	r2, [r3, #0]
 80057be:	e001      	b.n	80057c4 <USB_EPStartXfer+0x124c>
      }
      else
      {
        return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e025      	b.n	8005810 <USB_EPStartXfer+0x1298>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	18d3      	adds	r3, r2, r3
 80057ce:	881b      	ldrh	r3, [r3, #0]
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	208e      	movs	r0, #142	; 0x8e
 80057d4:	183b      	adds	r3, r7, r0
 80057d6:	4911      	ldr	r1, [pc, #68]	; (800581c <USB_EPStartXfer+0x12a4>)
 80057d8:	400a      	ands	r2, r1
 80057da:	801a      	strh	r2, [r3, #0]
 80057dc:	183b      	adds	r3, r7, r0
 80057de:	183a      	adds	r2, r7, r0
 80057e0:	8812      	ldrh	r2, [r2, #0]
 80057e2:	2180      	movs	r1, #128	; 0x80
 80057e4:	0149      	lsls	r1, r1, #5
 80057e6:	404a      	eors	r2, r1
 80057e8:	801a      	strh	r2, [r3, #0]
 80057ea:	183b      	adds	r3, r7, r0
 80057ec:	183a      	adds	r2, r7, r0
 80057ee:	8812      	ldrh	r2, [r2, #0]
 80057f0:	2180      	movs	r1, #128	; 0x80
 80057f2:	0189      	lsls	r1, r1, #6
 80057f4:	404a      	eors	r2, r1
 80057f6:	801a      	strh	r2, [r3, #0]
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	18d3      	adds	r3, r2, r3
 8005802:	183a      	adds	r2, r7, r0
 8005804:	8812      	ldrh	r2, [r2, #0]
 8005806:	4906      	ldr	r1, [pc, #24]	; (8005820 <USB_EPStartXfer+0x12a8>)
 8005808:	430a      	orrs	r2, r1
 800580a:	b292      	uxth	r2, r2
 800580c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	0018      	movs	r0, r3
 8005812:	46bd      	mov	sp, r7
 8005814:	b044      	add	sp, #272	; 0x110
 8005816:	bdb0      	pop	{r4, r5, r7, pc}
 8005818:	00000406 	.word	0x00000406
 800581c:	ffffbf8f 	.word	0xffffbf8f
 8005820:	ffff8080 	.word	0xffff8080

08005824 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	785b      	ldrb	r3, [r3, #1]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d01d      	beq.n	8005872 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	18d3      	adds	r3, r2, r3
 8005840:	881b      	ldrh	r3, [r3, #0]
 8005842:	b29a      	uxth	r2, r3
 8005844:	200c      	movs	r0, #12
 8005846:	183b      	adds	r3, r7, r0
 8005848:	491b      	ldr	r1, [pc, #108]	; (80058b8 <USB_EPSetStall+0x94>)
 800584a:	400a      	ands	r2, r1
 800584c:	801a      	strh	r2, [r3, #0]
 800584e:	183b      	adds	r3, r7, r0
 8005850:	183a      	adds	r2, r7, r0
 8005852:	8812      	ldrh	r2, [r2, #0]
 8005854:	2110      	movs	r1, #16
 8005856:	404a      	eors	r2, r1
 8005858:	801a      	strh	r2, [r3, #0]
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	18d3      	adds	r3, r2, r3
 8005864:	183a      	adds	r2, r7, r0
 8005866:	8812      	ldrh	r2, [r2, #0]
 8005868:	4914      	ldr	r1, [pc, #80]	; (80058bc <USB_EPSetStall+0x98>)
 800586a:	430a      	orrs	r2, r1
 800586c:	b292      	uxth	r2, r2
 800586e:	801a      	strh	r2, [r3, #0]
 8005870:	e01d      	b.n	80058ae <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	18d3      	adds	r3, r2, r3
 800587c:	881b      	ldrh	r3, [r3, #0]
 800587e:	b29a      	uxth	r2, r3
 8005880:	200e      	movs	r0, #14
 8005882:	183b      	adds	r3, r7, r0
 8005884:	490e      	ldr	r1, [pc, #56]	; (80058c0 <USB_EPSetStall+0x9c>)
 8005886:	400a      	ands	r2, r1
 8005888:	801a      	strh	r2, [r3, #0]
 800588a:	183b      	adds	r3, r7, r0
 800588c:	183a      	adds	r2, r7, r0
 800588e:	8812      	ldrh	r2, [r2, #0]
 8005890:	2180      	movs	r1, #128	; 0x80
 8005892:	0149      	lsls	r1, r1, #5
 8005894:	404a      	eors	r2, r1
 8005896:	801a      	strh	r2, [r3, #0]
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	18d3      	adds	r3, r2, r3
 80058a2:	183a      	adds	r2, r7, r0
 80058a4:	8812      	ldrh	r2, [r2, #0]
 80058a6:	4905      	ldr	r1, [pc, #20]	; (80058bc <USB_EPSetStall+0x98>)
 80058a8:	430a      	orrs	r2, r1
 80058aa:	b292      	uxth	r2, r2
 80058ac:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	0018      	movs	r0, r3
 80058b2:	46bd      	mov	sp, r7
 80058b4:	b004      	add	sp, #16
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	ffff8fbf 	.word	0xffff8fbf
 80058bc:	ffff8080 	.word	0xffff8080
 80058c0:	ffffbf8f 	.word	0xffffbf8f

080058c4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	7b1b      	ldrb	r3, [r3, #12]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d000      	beq.n	80058d8 <USB_EPClearStall+0x14>
 80058d6:	e095      	b.n	8005a04 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	785b      	ldrb	r3, [r3, #1]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d046      	beq.n	800596e <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	18d2      	adds	r2, r2, r3
 80058ea:	2110      	movs	r1, #16
 80058ec:	187b      	adds	r3, r7, r1
 80058ee:	8812      	ldrh	r2, [r2, #0]
 80058f0:	801a      	strh	r2, [r3, #0]
 80058f2:	187b      	adds	r3, r7, r1
 80058f4:	881b      	ldrh	r3, [r3, #0]
 80058f6:	2240      	movs	r2, #64	; 0x40
 80058f8:	4013      	ands	r3, r2
 80058fa:	d016      	beq.n	800592a <USB_EPClearStall+0x66>
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	18d3      	adds	r3, r2, r3
 8005906:	881b      	ldrh	r3, [r3, #0]
 8005908:	b29a      	uxth	r2, r3
 800590a:	200e      	movs	r0, #14
 800590c:	183b      	adds	r3, r7, r0
 800590e:	4940      	ldr	r1, [pc, #256]	; (8005a10 <USB_EPClearStall+0x14c>)
 8005910:	400a      	ands	r2, r1
 8005912:	801a      	strh	r2, [r3, #0]
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	18d3      	adds	r3, r2, r3
 800591e:	183a      	adds	r2, r7, r0
 8005920:	8812      	ldrh	r2, [r2, #0]
 8005922:	493c      	ldr	r1, [pc, #240]	; (8005a14 <USB_EPClearStall+0x150>)
 8005924:	430a      	orrs	r2, r1
 8005926:	b292      	uxth	r2, r2
 8005928:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	78db      	ldrb	r3, [r3, #3]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d068      	beq.n	8005a04 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	18d3      	adds	r3, r2, r3
 800593c:	881b      	ldrh	r3, [r3, #0]
 800593e:	b29a      	uxth	r2, r3
 8005940:	200c      	movs	r0, #12
 8005942:	183b      	adds	r3, r7, r0
 8005944:	4934      	ldr	r1, [pc, #208]	; (8005a18 <USB_EPClearStall+0x154>)
 8005946:	400a      	ands	r2, r1
 8005948:	801a      	strh	r2, [r3, #0]
 800594a:	183b      	adds	r3, r7, r0
 800594c:	183a      	adds	r2, r7, r0
 800594e:	8812      	ldrh	r2, [r2, #0]
 8005950:	2120      	movs	r1, #32
 8005952:	404a      	eors	r2, r1
 8005954:	801a      	strh	r2, [r3, #0]
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	18d3      	adds	r3, r2, r3
 8005960:	183a      	adds	r2, r7, r0
 8005962:	8812      	ldrh	r2, [r2, #0]
 8005964:	492d      	ldr	r1, [pc, #180]	; (8005a1c <USB_EPClearStall+0x158>)
 8005966:	430a      	orrs	r2, r1
 8005968:	b292      	uxth	r2, r2
 800596a:	801a      	strh	r2, [r3, #0]
 800596c:	e04a      	b.n	8005a04 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	18d2      	adds	r2, r2, r3
 8005978:	2116      	movs	r1, #22
 800597a:	187b      	adds	r3, r7, r1
 800597c:	8812      	ldrh	r2, [r2, #0]
 800597e:	801a      	strh	r2, [r3, #0]
 8005980:	187b      	adds	r3, r7, r1
 8005982:	881a      	ldrh	r2, [r3, #0]
 8005984:	2380      	movs	r3, #128	; 0x80
 8005986:	01db      	lsls	r3, r3, #7
 8005988:	4013      	ands	r3, r2
 800598a:	d016      	beq.n	80059ba <USB_EPClearStall+0xf6>
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	18d3      	adds	r3, r2, r3
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	b29a      	uxth	r2, r3
 800599a:	2014      	movs	r0, #20
 800599c:	183b      	adds	r3, r7, r0
 800599e:	491c      	ldr	r1, [pc, #112]	; (8005a10 <USB_EPClearStall+0x14c>)
 80059a0:	400a      	ands	r2, r1
 80059a2:	801a      	strh	r2, [r3, #0]
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	18d3      	adds	r3, r2, r3
 80059ae:	183a      	adds	r2, r7, r0
 80059b0:	8812      	ldrh	r2, [r2, #0]
 80059b2:	491b      	ldr	r1, [pc, #108]	; (8005a20 <USB_EPClearStall+0x15c>)
 80059b4:	430a      	orrs	r2, r1
 80059b6:	b292      	uxth	r2, r2
 80059b8:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	18d3      	adds	r3, r2, r3
 80059c4:	881b      	ldrh	r3, [r3, #0]
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	2012      	movs	r0, #18
 80059ca:	183b      	adds	r3, r7, r0
 80059cc:	4915      	ldr	r1, [pc, #84]	; (8005a24 <USB_EPClearStall+0x160>)
 80059ce:	400a      	ands	r2, r1
 80059d0:	801a      	strh	r2, [r3, #0]
 80059d2:	183b      	adds	r3, r7, r0
 80059d4:	183a      	adds	r2, r7, r0
 80059d6:	8812      	ldrh	r2, [r2, #0]
 80059d8:	2180      	movs	r1, #128	; 0x80
 80059da:	0149      	lsls	r1, r1, #5
 80059dc:	404a      	eors	r2, r1
 80059de:	801a      	strh	r2, [r3, #0]
 80059e0:	183b      	adds	r3, r7, r0
 80059e2:	183a      	adds	r2, r7, r0
 80059e4:	8812      	ldrh	r2, [r2, #0]
 80059e6:	2180      	movs	r1, #128	; 0x80
 80059e8:	0189      	lsls	r1, r1, #6
 80059ea:	404a      	eors	r2, r1
 80059ec:	801a      	strh	r2, [r3, #0]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	18d3      	adds	r3, r2, r3
 80059f8:	183a      	adds	r2, r7, r0
 80059fa:	8812      	ldrh	r2, [r2, #0]
 80059fc:	4907      	ldr	r1, [pc, #28]	; (8005a1c <USB_EPClearStall+0x158>)
 80059fe:	430a      	orrs	r2, r1
 8005a00:	b292      	uxth	r2, r2
 8005a02:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	0018      	movs	r0, r3
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	b006      	add	sp, #24
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	46c0      	nop			; (mov r8, r8)
 8005a10:	ffff8f8f 	.word	0xffff8f8f
 8005a14:	ffff80c0 	.word	0xffff80c0
 8005a18:	ffff8fbf 	.word	0xffff8fbf
 8005a1c:	ffff8080 	.word	0xffff8080
 8005a20:	ffffc080 	.word	0xffffc080
 8005a24:	ffffbf8f 	.word	0xffffbf8f

08005a28 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	000a      	movs	r2, r1
 8005a32:	1cfb      	adds	r3, r7, #3
 8005a34:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8005a36:	1cfb      	adds	r3, r7, #3
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d103      	bne.n	8005a46 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	224c      	movs	r2, #76	; 0x4c
 8005a42:	2180      	movs	r1, #128	; 0x80
 8005a44:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	0018      	movs	r0, r3
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	b002      	add	sp, #8
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2258      	movs	r2, #88	; 0x58
 8005a5c:	5a9b      	ldrh	r3, [r3, r2]
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	4a05      	ldr	r2, [pc, #20]	; (8005a78 <USB_DevConnect+0x28>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	b299      	uxth	r1, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2258      	movs	r2, #88	; 0x58
 8005a6a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	0018      	movs	r0, r3
 8005a70:	46bd      	mov	sp, r7
 8005a72:	b002      	add	sp, #8
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	46c0      	nop			; (mov r8, r8)
 8005a78:	ffff8000 	.word	0xffff8000

08005a7c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2244      	movs	r2, #68	; 0x44
 8005a88:	5a9b      	ldrh	r3, [r3, r2]
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
}
 8005a90:	0018      	movs	r0, r3
 8005a92:	46bd      	mov	sp, r7
 8005a94:	b004      	add	sp, #16
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b08c      	sub	sp, #48	; 0x30
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	0019      	movs	r1, r3
 8005aa4:	1dbb      	adds	r3, r7, #6
 8005aa6:	801a      	strh	r2, [r3, #0]
 8005aa8:	1d3b      	adds	r3, r7, #4
 8005aaa:	1c0a      	adds	r2, r1, #0
 8005aac:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005aae:	1d3b      	adds	r3, r7, #4
 8005ab0:	881b      	ldrh	r3, [r3, #0]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	085b      	lsrs	r3, r3, #1
 8005ab6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005ac0:	1dbb      	adds	r3, r7, #6
 8005ac2:	881a      	ldrh	r2, [r3, #0]
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	18d3      	adds	r3, r2, r3
 8005ac8:	2280      	movs	r2, #128	; 0x80
 8005aca:	00d2      	lsls	r2, r2, #3
 8005acc:	4694      	mov	ip, r2
 8005ace:	4463      	add	r3, ip
 8005ad0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ad6:	e01b      	b.n	8005b10 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	021b      	lsls	r3, r3, #8
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	001a      	movs	r2, r3
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b00:	3302      	adds	r3, #2
 8005b02:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	3301      	adds	r3, #1
 8005b08:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1e0      	bne.n	8005ad8 <USB_WritePMA+0x40>
  }
}
 8005b16:	46c0      	nop			; (mov r8, r8)
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	b00c      	add	sp, #48	; 0x30
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b08a      	sub	sp, #40	; 0x28
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	60f8      	str	r0, [r7, #12]
 8005b26:	60b9      	str	r1, [r7, #8]
 8005b28:	0019      	movs	r1, r3
 8005b2a:	1dbb      	adds	r3, r7, #6
 8005b2c:	801a      	strh	r2, [r3, #0]
 8005b2e:	1d3b      	adds	r3, r7, #4
 8005b30:	1c0a      	adds	r2, r1, #0
 8005b32:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005b34:	1d3b      	adds	r3, r7, #4
 8005b36:	881b      	ldrh	r3, [r3, #0]
 8005b38:	085b      	lsrs	r3, r3, #1
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005b46:	1dbb      	adds	r3, r7, #6
 8005b48:	881a      	ldrh	r2, [r3, #0]
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	18d3      	adds	r3, r2, r3
 8005b4e:	2280      	movs	r2, #128	; 0x80
 8005b50:	00d2      	lsls	r2, r2, #3
 8005b52:	4694      	mov	ip, r2
 8005b54:	4463      	add	r3, ip
 8005b56:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b5c:	e018      	b.n	8005b90 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005b5e:	6a3b      	ldr	r3, [r7, #32]
 8005b60:	881b      	ldrh	r3, [r3, #0]
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	3302      	adds	r3, #2
 8005b6a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	b2da      	uxtb	r2, r3
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	3301      	adds	r3, #1
 8005b78:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	0a1b      	lsrs	r3, r3, #8
 8005b7e:	b2da      	uxtb	r2, r3
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	3301      	adds	r3, #1
 8005b88:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1e3      	bne.n	8005b5e <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005b96:	1d3b      	adds	r3, r7, #4
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d007      	beq.n	8005bb4 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
 8005ba6:	881b      	ldrh	r3, [r3, #0]
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	b2da      	uxtb	r2, r3
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	701a      	strb	r2, [r3, #0]
  }
}
 8005bb4:	46c0      	nop			; (mov r8, r8)
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	b00a      	add	sp, #40	; 0x28
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	000a      	movs	r2, r1
 8005bc6:	1cfb      	adds	r3, r7, #3
 8005bc8:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8005bca:	230f      	movs	r3, #15
 8005bcc:	18fb      	adds	r3, r7, r3
 8005bce:	2200      	movs	r2, #0
 8005bd0:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	7c1b      	ldrb	r3, [r3, #16]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d116      	bne.n	8005c08 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005bda:	2380      	movs	r3, #128	; 0x80
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	2202      	movs	r2, #2
 8005be2:	2181      	movs	r1, #129	; 0x81
 8005be4:	f001 ffee 	bl	8007bc4 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005bee:	2380      	movs	r3, #128	; 0x80
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	2202      	movs	r2, #2
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	f001 ffe4 	bl	8007bc4 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	23ac      	movs	r3, #172	; 0xac
 8005c00:	005b      	lsls	r3, r3, #1
 8005c02:	2101      	movs	r1, #1
 8005c04:	50d1      	str	r1, [r2, r3]
 8005c06:	e013      	b.n	8005c30 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	2340      	movs	r3, #64	; 0x40
 8005c0c:	2202      	movs	r2, #2
 8005c0e:	2181      	movs	r1, #129	; 0x81
 8005c10:	f001 ffd8 	bl	8007bc4 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	2340      	movs	r3, #64	; 0x40
 8005c1e:	2202      	movs	r2, #2
 8005c20:	2101      	movs	r1, #1
 8005c22:	f001 ffcf 	bl	8007bc4 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	23ac      	movs	r3, #172	; 0xac
 8005c2a:	005b      	lsls	r3, r3, #1
 8005c2c:	2101      	movs	r1, #1
 8005c2e:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	2308      	movs	r3, #8
 8005c34:	2203      	movs	r2, #3
 8005c36:	2182      	movs	r1, #130	; 0x82
 8005c38:	f001 ffc4 	bl	8007bc4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8005c42:	2387      	movs	r3, #135	; 0x87
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	0018      	movs	r0, r3
 8005c48:	f002 f95a 	bl	8007f00 <USBD_static_malloc>
 8005c4c:	0001      	movs	r1, r0
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	23a4      	movs	r3, #164	; 0xa4
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	50d1      	str	r1, [r2, r3]

  if(pdev->pClassData == NULL)
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	23a4      	movs	r3, #164	; 0xa4
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	58d3      	ldr	r3, [r2, r3]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d104      	bne.n	8005c6c <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8005c62:	230f      	movs	r3, #15
 8005c64:	18fb      	adds	r3, r7, r3
 8005c66:	2201      	movs	r2, #1
 8005c68:	701a      	strb	r2, [r3, #0]
 8005c6a:	e02c      	b.n	8005cc6 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	23a4      	movs	r3, #164	; 0xa4
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	58d3      	ldr	r3, [r2, r3]
 8005c74:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	23a5      	movs	r3, #165	; 0xa5
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	58d3      	ldr	r3, [r2, r3]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	2385      	movs	r3, #133	; 0x85
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	2100      	movs	r1, #0
 8005c8a:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	2386      	movs	r3, #134	; 0x86
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	2100      	movs	r1, #0
 8005c94:	50d1      	str	r1, [r2, r3]

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	7c1b      	ldrb	r3, [r3, #16]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10a      	bne.n	8005cb4 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	2381      	movs	r3, #129	; 0x81
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	58d2      	ldr	r2, [r2, r3]
 8005ca6:	2380      	movs	r3, #128	; 0x80
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	2101      	movs	r1, #1
 8005cae:	f002 f8d9 	bl	8007e64 <USBD_LL_PrepareReceive>
 8005cb2:	e008      	b.n	8005cc6 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	2381      	movs	r3, #129	; 0x81
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	58d2      	ldr	r2, [r2, r3]
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	2340      	movs	r3, #64	; 0x40
 8005cc0:	2101      	movs	r1, #1
 8005cc2:	f002 f8cf 	bl	8007e64 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005cc6:	230f      	movs	r3, #15
 8005cc8:	18fb      	adds	r3, r7, r3
 8005cca:	781b      	ldrb	r3, [r3, #0]
}
 8005ccc:	0018      	movs	r0, r3
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	b004      	add	sp, #16
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	000a      	movs	r2, r1
 8005cde:	1cfb      	adds	r3, r7, #3
 8005ce0:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8005ce2:	230f      	movs	r3, #15
 8005ce4:	18fb      	adds	r3, r7, r3
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2181      	movs	r1, #129	; 0x81
 8005cee:	0018      	movs	r0, r3
 8005cf0:	f001 ff9f 	bl	8007c32 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	0018      	movs	r0, r3
 8005d00:	f001 ff97 	bl	8007c32 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	23ac      	movs	r3, #172	; 0xac
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2182      	movs	r1, #130	; 0x82
 8005d12:	0018      	movs	r0, r3
 8005d14:	f001 ff8d 	bl	8007c32 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	23a4      	movs	r3, #164	; 0xa4
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	58d3      	ldr	r3, [r2, r3]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d011      	beq.n	8005d4e <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	23a5      	movs	r3, #165	; 0xa5
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	58d3      	ldr	r3, [r2, r3]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	23a4      	movs	r3, #164	; 0xa4
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	58d3      	ldr	r3, [r2, r3]
 8005d3e:	0018      	movs	r0, r3
 8005d40:	f002 f8ea 	bl	8007f18 <USBD_static_free>
    pdev->pClassData = NULL;
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	23a4      	movs	r3, #164	; 0xa4
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8005d4e:	230f      	movs	r3, #15
 8005d50:	18fb      	adds	r3, r7, r3
 8005d52:	781b      	ldrb	r3, [r3, #0]
}
 8005d54:	0018      	movs	r0, r3
 8005d56:	46bd      	mov	sp, r7
 8005d58:	b004      	add	sp, #16
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	23a4      	movs	r3, #164	; 0xa4
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	58d3      	ldr	r3, [r2, r3]
 8005d6e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005d70:	230f      	movs	r3, #15
 8005d72:	18fb      	adds	r3, r7, r3
 8005d74:	2200      	movs	r2, #0
 8005d76:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8005d78:	230c      	movs	r3, #12
 8005d7a:	18fb      	adds	r3, r7, r3
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8005d80:	2317      	movs	r3, #23
 8005d82:	18fb      	adds	r3, r7, r3
 8005d84:	2200      	movs	r2, #0
 8005d86:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	001a      	movs	r2, r3
 8005d8e:	2360      	movs	r3, #96	; 0x60
 8005d90:	4013      	ands	r3, r2
 8005d92:	d03d      	beq.n	8005e10 <USBD_CDC_Setup+0xb4>
 8005d94:	2b20      	cmp	r3, #32
 8005d96:	d000      	beq.n	8005d9a <USBD_CDC_Setup+0x3e>
 8005d98:	e092      	b.n	8005ec0 <USBD_CDC_Setup+0x164>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	88db      	ldrh	r3, [r3, #6]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d02b      	beq.n	8005dfa <USBD_CDC_Setup+0x9e>
    {
      if (req->bmRequest & 0x80U)
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	b25b      	sxtb	r3, r3
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	da12      	bge.n	8005dd2 <USBD_CDC_Setup+0x76>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	23a5      	movs	r3, #165	; 0xa5
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	58d3      	ldr	r3, [r2, r3]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8005dba:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	88d2      	ldrh	r2, [r2, #6]
 8005dc0:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005dc2:	6939      	ldr	r1, [r7, #16]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	88da      	ldrh	r2, [r3, #6]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	0018      	movs	r0, r3
 8005dcc:	f001 fb14 	bl	80073f8 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8005dd0:	e081      	b.n	8005ed6 <USBD_CDC_Setup+0x17a>
        hcdc->CmdOpCode = req->bRequest;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	7859      	ldrb	r1, [r3, #1]
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	2380      	movs	r3, #128	; 0x80
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	54d1      	strb	r1, [r2, r3]
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	88db      	ldrh	r3, [r3, #6]
 8005de2:	b2d9      	uxtb	r1, r3
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	4a3f      	ldr	r2, [pc, #252]	; (8005ee4 <USBD_CDC_Setup+0x188>)
 8005de8:	5499      	strb	r1, [r3, r2]
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005dea:	6939      	ldr	r1, [r7, #16]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	88da      	ldrh	r2, [r3, #6]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	0018      	movs	r0, r3
 8005df4:	f001 fb33 	bl	800745e <USBD_CtlPrepareRx>
    break;
 8005df8:	e06d      	b.n	8005ed6 <USBD_CDC_Setup+0x17a>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	23a5      	movs	r3, #165	; 0xa5
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	58d3      	ldr	r3, [r2, r3]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	7850      	ldrb	r0, [r2, #1]
 8005e08:	6839      	ldr	r1, [r7, #0]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	4798      	blx	r3
    break;
 8005e0e:	e062      	b.n	8005ed6 <USBD_CDC_Setup+0x17a>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	785b      	ldrb	r3, [r3, #1]
 8005e14:	2b0a      	cmp	r3, #10
 8005e16:	d01c      	beq.n	8005e52 <USBD_CDC_Setup+0xf6>
 8005e18:	2b0b      	cmp	r3, #11
 8005e1a:	d033      	beq.n	8005e84 <USBD_CDC_Setup+0x128>
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d142      	bne.n	8005ea6 <USBD_CDC_Setup+0x14a>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	239d      	movs	r3, #157	; 0x9d
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	5cd3      	ldrb	r3, [r2, r3]
 8005e28:	2b03      	cmp	r3, #3
 8005e2a:	d107      	bne.n	8005e3c <USBD_CDC_Setup+0xe0>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8005e2c:	230c      	movs	r3, #12
 8005e2e:	18f9      	adds	r1, r7, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2202      	movs	r2, #2
 8005e34:	0018      	movs	r0, r3
 8005e36:	f001 fadf 	bl	80073f8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8005e3a:	e040      	b.n	8005ebe <USBD_CDC_Setup+0x162>
        USBD_CtlError (pdev, req);
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	0011      	movs	r1, r2
 8005e42:	0018      	movs	r0, r3
 8005e44:	f001 fa59 	bl	80072fa <USBD_CtlError>
			  ret = USBD_FAIL;
 8005e48:	2317      	movs	r3, #23
 8005e4a:	18fb      	adds	r3, r7, r3
 8005e4c:	2202      	movs	r2, #2
 8005e4e:	701a      	strb	r2, [r3, #0]
      break;
 8005e50:	e035      	b.n	8005ebe <USBD_CDC_Setup+0x162>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	239d      	movs	r3, #157	; 0x9d
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	5cd3      	ldrb	r3, [r2, r3]
 8005e5a:	2b03      	cmp	r3, #3
 8005e5c:	d107      	bne.n	8005e6e <USBD_CDC_Setup+0x112>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8005e5e:	230f      	movs	r3, #15
 8005e60:	18f9      	adds	r1, r7, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2201      	movs	r2, #1
 8005e66:	0018      	movs	r0, r3
 8005e68:	f001 fac6 	bl	80073f8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8005e6c:	e027      	b.n	8005ebe <USBD_CDC_Setup+0x162>
        USBD_CtlError (pdev, req);
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	0011      	movs	r1, r2
 8005e74:	0018      	movs	r0, r3
 8005e76:	f001 fa40 	bl	80072fa <USBD_CtlError>
			  ret = USBD_FAIL;
 8005e7a:	2317      	movs	r3, #23
 8005e7c:	18fb      	adds	r3, r7, r3
 8005e7e:	2202      	movs	r2, #2
 8005e80:	701a      	strb	r2, [r3, #0]
      break;
 8005e82:	e01c      	b.n	8005ebe <USBD_CDC_Setup+0x162>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	239d      	movs	r3, #157	; 0x9d
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	5cd3      	ldrb	r3, [r2, r3]
 8005e8c:	2b03      	cmp	r3, #3
 8005e8e:	d015      	beq.n	8005ebc <USBD_CDC_Setup+0x160>
      {
        USBD_CtlError (pdev, req);
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	0011      	movs	r1, r2
 8005e96:	0018      	movs	r0, r3
 8005e98:	f001 fa2f 	bl	80072fa <USBD_CtlError>
			  ret = USBD_FAIL;
 8005e9c:	2317      	movs	r3, #23
 8005e9e:	18fb      	adds	r3, r7, r3
 8005ea0:	2202      	movs	r2, #2
 8005ea2:	701a      	strb	r2, [r3, #0]
      }
      break;
 8005ea4:	e00a      	b.n	8005ebc <USBD_CDC_Setup+0x160>

    default:
      USBD_CtlError (pdev, req);
 8005ea6:	683a      	ldr	r2, [r7, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	0011      	movs	r1, r2
 8005eac:	0018      	movs	r0, r3
 8005eae:	f001 fa24 	bl	80072fa <USBD_CtlError>
      ret = USBD_FAIL;
 8005eb2:	2317      	movs	r3, #23
 8005eb4:	18fb      	adds	r3, r7, r3
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	701a      	strb	r2, [r3, #0]
      break;
 8005eba:	e000      	b.n	8005ebe <USBD_CDC_Setup+0x162>
      break;
 8005ebc:	46c0      	nop			; (mov r8, r8)
    }
    break;
 8005ebe:	e00a      	b.n	8005ed6 <USBD_CDC_Setup+0x17a>

  default:
    USBD_CtlError (pdev, req);
 8005ec0:	683a      	ldr	r2, [r7, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	0011      	movs	r1, r2
 8005ec6:	0018      	movs	r0, r3
 8005ec8:	f001 fa17 	bl	80072fa <USBD_CtlError>
    ret = USBD_FAIL;
 8005ecc:	2317      	movs	r3, #23
 8005ece:	18fb      	adds	r3, r7, r3
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	701a      	strb	r2, [r3, #0]
    break;
 8005ed4:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8005ed6:	2317      	movs	r3, #23
 8005ed8:	18fb      	adds	r3, r7, r3
 8005eda:	781b      	ldrb	r3, [r3, #0]
}
 8005edc:	0018      	movs	r0, r3
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	b006      	add	sp, #24
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	00000201 	.word	0x00000201

08005ee8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	000a      	movs	r2, r1
 8005ef2:	1cfb      	adds	r3, r7, #3
 8005ef4:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	23a4      	movs	r3, #164	; 0xa4
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	58d3      	ldr	r3, [r2, r3]
 8005efe:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	23a6      	movs	r3, #166	; 0xa6
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	58d3      	ldr	r3, [r2, r3]
 8005f08:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	23a4      	movs	r3, #164	; 0xa4
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	58d3      	ldr	r3, [r2, r3]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d03e      	beq.n	8005f94 <USBD_CDC_DataIn+0xac>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005f16:	1cfb      	adds	r3, r7, #3
 8005f18:	781a      	ldrb	r2, [r3, #0]
 8005f1a:	6879      	ldr	r1, [r7, #4]
 8005f1c:	0013      	movs	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	189b      	adds	r3, r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	18cb      	adds	r3, r1, r3
 8005f26:	331c      	adds	r3, #28
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d02b      	beq.n	8005f86 <USBD_CDC_DataIn+0x9e>
 8005f2e:	1cfb      	adds	r3, r7, #3
 8005f30:	781a      	ldrb	r2, [r3, #0]
 8005f32:	6879      	ldr	r1, [r7, #4]
 8005f34:	0013      	movs	r3, r2
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	189b      	adds	r3, r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	18cb      	adds	r3, r1, r3
 8005f3e:	331c      	adds	r3, #28
 8005f40:	6818      	ldr	r0, [r3, #0]
 8005f42:	1cfb      	adds	r3, r7, #3
 8005f44:	781a      	ldrb	r2, [r3, #0]
 8005f46:	68b9      	ldr	r1, [r7, #8]
 8005f48:	0013      	movs	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	189b      	adds	r3, r3, r2
 8005f4e:	00db      	lsls	r3, r3, #3
 8005f50:	18cb      	adds	r3, r1, r3
 8005f52:	3338      	adds	r3, #56	; 0x38
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	0019      	movs	r1, r3
 8005f58:	f7fa f95c 	bl	8000214 <__aeabi_uidivmod>
 8005f5c:	1e0b      	subs	r3, r1, #0
 8005f5e:	d112      	bne.n	8005f86 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005f60:	1cfb      	adds	r3, r7, #3
 8005f62:	781a      	ldrb	r2, [r3, #0]
 8005f64:	6879      	ldr	r1, [r7, #4]
 8005f66:	0013      	movs	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	189b      	adds	r3, r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	18cb      	adds	r3, r1, r3
 8005f70:	331c      	adds	r3, #28
 8005f72:	2200      	movs	r2, #0
 8005f74:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8005f76:	1cfb      	adds	r3, r7, #3
 8005f78:	7819      	ldrb	r1, [r3, #0]
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f001 ff38 	bl	8007df4 <USBD_LL_Transmit>
 8005f84:	e004      	b.n	8005f90 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	2385      	movs	r3, #133	; 0x85
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8005f90:	2300      	movs	r3, #0
 8005f92:	e000      	b.n	8005f96 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8005f94:	2302      	movs	r3, #2
  }
}
 8005f96:	0018      	movs	r0, r3
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	b004      	add	sp, #16
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b084      	sub	sp, #16
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
 8005fa6:	000a      	movs	r2, r1
 8005fa8:	1cfb      	adds	r3, r7, #3
 8005faa:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	23a4      	movs	r3, #164	; 0xa4
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	58d3      	ldr	r3, [r2, r3]
 8005fb4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8005fb6:	1cfb      	adds	r3, r7, #3
 8005fb8:	781a      	ldrb	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	0011      	movs	r1, r2
 8005fbe:	0018      	movs	r0, r3
 8005fc0:	f001 ff88 	bl	8007ed4 <USBD_LL_GetRxDataSize>
 8005fc4:	0001      	movs	r1, r0
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	2383      	movs	r3, #131	; 0x83
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	23a4      	movs	r3, #164	; 0xa4
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	58d3      	ldr	r3, [r2, r3]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d011      	beq.n	8005ffe <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	23a5      	movs	r3, #165	; 0xa5
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	58d3      	ldr	r3, [r2, r3]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	68f9      	ldr	r1, [r7, #12]
 8005fe6:	2281      	movs	r2, #129	; 0x81
 8005fe8:	0092      	lsls	r2, r2, #2
 8005fea:	5888      	ldr	r0, [r1, r2]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	2183      	movs	r1, #131	; 0x83
 8005ff0:	0089      	lsls	r1, r1, #2
 8005ff2:	468c      	mov	ip, r1
 8005ff4:	4462      	add	r2, ip
 8005ff6:	0011      	movs	r1, r2
 8005ff8:	4798      	blx	r3

    return USBD_OK;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	e000      	b.n	8006000 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8005ffe:	2302      	movs	r3, #2
  }
}
 8006000:	0018      	movs	r0, r3
 8006002:	46bd      	mov	sp, r7
 8006004:	b004      	add	sp, #16
 8006006:	bd80      	pop	{r7, pc}

08006008 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8006008:	b590      	push	{r4, r7, lr}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	23a4      	movs	r3, #164	; 0xa4
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	58d3      	ldr	r3, [r2, r3]
 8006018:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	23a5      	movs	r3, #165	; 0xa5
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	58d3      	ldr	r3, [r2, r3]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d01a      	beq.n	800605c <USBD_CDC_EP0_RxReady+0x54>
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	2380      	movs	r3, #128	; 0x80
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	5cd3      	ldrb	r3, [r2, r3]
 800602e:	2bff      	cmp	r3, #255	; 0xff
 8006030:	d014      	beq.n	800605c <USBD_CDC_EP0_RxReady+0x54>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	23a5      	movs	r3, #165	; 0xa5
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	58d3      	ldr	r3, [r2, r3]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	68f9      	ldr	r1, [r7, #12]
 800603e:	2280      	movs	r2, #128	; 0x80
 8006040:	0092      	lsls	r2, r2, #2
 8006042:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8006044:	68fc      	ldr	r4, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	4907      	ldr	r1, [pc, #28]	; (8006068 <USBD_CDC_EP0_RxReady+0x60>)
 800604a:	5c52      	ldrb	r2, [r2, r1]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800604c:	b292      	uxth	r2, r2
 800604e:	0021      	movs	r1, r4
 8006050:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	2380      	movs	r3, #128	; 0x80
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	21ff      	movs	r1, #255	; 0xff
 800605a:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	0018      	movs	r0, r3
 8006060:	46bd      	mov	sp, r7
 8006062:	b005      	add	sp, #20
 8006064:	bd90      	pop	{r4, r7, pc}
 8006066:	46c0      	nop			; (mov r8, r8)
 8006068:	00000201 	.word	0x00000201

0800606c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2243      	movs	r2, #67	; 0x43
 8006078:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800607a:	4b02      	ldr	r3, [pc, #8]	; (8006084 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800607c:	0018      	movs	r0, r3
 800607e:	46bd      	mov	sp, r7
 8006080:	b002      	add	sp, #8
 8006082:	bd80      	pop	{r7, pc}
 8006084:	20000098 	.word	0x20000098

08006088 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2243      	movs	r2, #67	; 0x43
 8006094:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006096:	4b02      	ldr	r3, [pc, #8]	; (80060a0 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8006098:	0018      	movs	r0, r3
 800609a:	46bd      	mov	sp, r7
 800609c:	b002      	add	sp, #8
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	20000054 	.word	0x20000054

080060a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2243      	movs	r2, #67	; 0x43
 80060b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80060b2:	4b02      	ldr	r3, [pc, #8]	; (80060bc <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 80060b4:	0018      	movs	r0, r3
 80060b6:	46bd      	mov	sp, r7
 80060b8:	b002      	add	sp, #8
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	200000dc 	.word	0x200000dc

080060c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	220a      	movs	r2, #10
 80060cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80060ce:	4b02      	ldr	r3, [pc, #8]	; (80060d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 80060d0:	0018      	movs	r0, r3
 80060d2:	46bd      	mov	sp, r7
 80060d4:	b002      	add	sp, #8
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	20000010 	.word	0x20000010

080060dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80060e6:	230f      	movs	r3, #15
 80060e8:	18fb      	adds	r3, r7, r3
 80060ea:	2202      	movs	r2, #2
 80060ec:	701a      	strb	r2, [r3, #0]

  if(fops != NULL)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d008      	beq.n	8006106 <USBD_CDC_RegisterInterface+0x2a>
  {
    pdev->pUserData= fops;
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	23a5      	movs	r3, #165	; 0xa5
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	6839      	ldr	r1, [r7, #0]
 80060fc:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 80060fe:	230f      	movs	r3, #15
 8006100:	18fb      	adds	r3, r7, r3
 8006102:	2200      	movs	r2, #0
 8006104:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8006106:	230f      	movs	r3, #15
 8006108:	18fb      	adds	r3, r7, r3
 800610a:	781b      	ldrb	r3, [r3, #0]
}
 800610c:	0018      	movs	r0, r3
 800610e:	46bd      	mov	sp, r7
 8006110:	b004      	add	sp, #16
 8006112:	bd80      	pop	{r7, pc}

08006114 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	1dbb      	adds	r3, r7, #6
 8006120:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	23a4      	movs	r3, #164	; 0xa4
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	58d3      	ldr	r3, [r2, r3]
 800612a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	2382      	movs	r3, #130	; 0x82
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	68b9      	ldr	r1, [r7, #8]
 8006134:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8006136:	1dbb      	adds	r3, r7, #6
 8006138:	8819      	ldrh	r1, [r3, #0]
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	2384      	movs	r3, #132	; 0x84
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	0018      	movs	r0, r3
 8006146:	46bd      	mov	sp, r7
 8006148:	b006      	add	sp, #24
 800614a:	bd80      	pop	{r7, pc}

0800614c <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	23a4      	movs	r3, #164	; 0xa4
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	58d3      	ldr	r3, [r2, r3]
 800615e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	2381      	movs	r3, #129	; 0x81
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	6839      	ldr	r1, [r7, #0]
 8006168:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	0018      	movs	r0, r3
 800616e:	46bd      	mov	sp, r7
 8006170:	b004      	add	sp, #16
 8006172:	bd80      	pop	{r7, pc}

08006174 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	23a4      	movs	r3, #164	; 0xa4
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	58d3      	ldr	r3, [r2, r3]
 8006184:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	23a4      	movs	r3, #164	; 0xa4
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	58d3      	ldr	r3, [r2, r3]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d022      	beq.n	80061d8 <USBD_CDC_TransmitPacket+0x64>
  {
    if(hcdc->TxState == 0U)
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	2385      	movs	r3, #133	; 0x85
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	58d3      	ldr	r3, [r2, r3]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d11a      	bne.n	80061d4 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	2385      	movs	r3, #133	; 0x85
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	2101      	movs	r1, #1
 80061a6:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	2384      	movs	r3, #132	; 0x84
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	58d2      	ldr	r2, [r2, r3]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	2382      	movs	r3, #130	; 0x82
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	2384      	movs	r3, #132	; 0x84
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	000a      	movs	r2, r1
 80061ca:	2181      	movs	r1, #129	; 0x81
 80061cc:	f001 fe12 	bl	8007df4 <USBD_LL_Transmit>

      return USBD_OK;
 80061d0:	2300      	movs	r3, #0
 80061d2:	e002      	b.n	80061da <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e000      	b.n	80061da <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 80061d8:	2302      	movs	r3, #2
  }
}
 80061da:	0018      	movs	r0, r3
 80061dc:	46bd      	mov	sp, r7
 80061de:	b004      	add	sp, #16
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b084      	sub	sp, #16
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	23a4      	movs	r3, #164	; 0xa4
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	58d3      	ldr	r3, [r2, r3]
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	23a4      	movs	r3, #164	; 0xa4
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	58d3      	ldr	r3, [r2, r3]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d019      	beq.n	8006234 <USBD_CDC_ReceivePacket+0x52>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	7c1b      	ldrb	r3, [r3, #16]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10a      	bne.n	800621e <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	2381      	movs	r3, #129	; 0x81
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	58d2      	ldr	r2, [r2, r3]
 8006210:	2380      	movs	r3, #128	; 0x80
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	2101      	movs	r1, #1
 8006218:	f001 fe24 	bl	8007e64 <USBD_LL_PrepareReceive>
 800621c:	e008      	b.n	8006230 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	2381      	movs	r3, #129	; 0x81
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	58d2      	ldr	r2, [r2, r3]
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	2340      	movs	r3, #64	; 0x40
 800622a:	2101      	movs	r1, #1
 800622c:	f001 fe1a 	bl	8007e64 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006230:	2300      	movs	r3, #0
 8006232:	e000      	b.n	8006236 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8006234:	2302      	movs	r3, #2
  }
}
 8006236:	0018      	movs	r0, r3
 8006238:	46bd      	mov	sp, r7
 800623a:	b004      	add	sp, #16
 800623c:	bd80      	pop	{r7, pc}

0800623e <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b084      	sub	sp, #16
 8006242:	af00      	add	r7, sp, #0
 8006244:	60f8      	str	r0, [r7, #12]
 8006246:	60b9      	str	r1, [r7, #8]
 8006248:	1dfb      	adds	r3, r7, #7
 800624a:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006252:	2302      	movs	r3, #2
 8006254:	e020      	b.n	8006298 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	23a3      	movs	r3, #163	; 0xa3
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	58d3      	ldr	r3, [r2, r3]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d004      	beq.n	800626c <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	23a3      	movs	r3, #163	; 0xa3
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	2100      	movs	r1, #0
 800626a:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d004      	beq.n	800627c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	23a2      	movs	r3, #162	; 0xa2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	68b9      	ldr	r1, [r7, #8]
 800627a:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	239d      	movs	r3, #157	; 0x9d
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	2101      	movs	r1, #1
 8006284:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	1dfa      	adds	r2, r7, #7
 800628a:	7812      	ldrb	r2, [r2, #0]
 800628c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	0018      	movs	r0, r3
 8006292:	f001 fc0d 	bl	8007ab0 <USBD_LL_Init>

  return USBD_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	0018      	movs	r0, r3
 800629a:	46bd      	mov	sp, r7
 800629c:	b004      	add	sp, #16
 800629e:	bd80      	pop	{r7, pc}

080062a0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80062aa:	230f      	movs	r3, #15
 80062ac:	18fb      	adds	r3, r7, r3
 80062ae:	2200      	movs	r2, #0
 80062b0:	701a      	strb	r2, [r3, #0]
  if(pclass != 0)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d009      	beq.n	80062cc <USBD_RegisterClass+0x2c>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	23a3      	movs	r3, #163	; 0xa3
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	6839      	ldr	r1, [r7, #0]
 80062c0:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 80062c2:	230f      	movs	r3, #15
 80062c4:	18fb      	adds	r3, r7, r3
 80062c6:	2200      	movs	r2, #0
 80062c8:	701a      	strb	r2, [r3, #0]
 80062ca:	e003      	b.n	80062d4 <USBD_RegisterClass+0x34>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80062cc:	230f      	movs	r3, #15
 80062ce:	18fb      	adds	r3, r7, r3
 80062d0:	2202      	movs	r2, #2
 80062d2:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80062d4:	230f      	movs	r3, #15
 80062d6:	18fb      	adds	r3, r7, r3
 80062d8:	781b      	ldrb	r3, [r3, #0]
}
 80062da:	0018      	movs	r0, r3
 80062dc:	46bd      	mov	sp, r7
 80062de:	b004      	add	sp, #16
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b082      	sub	sp, #8
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	0018      	movs	r0, r3
 80062ee:	f001 fc43 	bl	8007b78 <USBD_LL_Start>

  return USBD_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	0018      	movs	r0, r3
 80062f6:	46bd      	mov	sp, r7
 80062f8:	b002      	add	sp, #8
 80062fa:	bd80      	pop	{r7, pc}

080062fc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	0018      	movs	r0, r3
 8006308:	46bd      	mov	sp, r7
 800630a:	b002      	add	sp, #8
 800630c:	bd80      	pop	{r7, pc}

0800630e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b084      	sub	sp, #16
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
 8006316:	000a      	movs	r2, r1
 8006318:	1cfb      	adds	r3, r7, #3
 800631a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800631c:	230f      	movs	r3, #15
 800631e:	18fb      	adds	r3, r7, r3
 8006320:	2202      	movs	r2, #2
 8006322:	701a      	strb	r2, [r3, #0]

  if(pdev->pClass != NULL)
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	23a3      	movs	r3, #163	; 0xa3
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	58d3      	ldr	r3, [r2, r3]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00f      	beq.n	8006350 <USBD_SetClassConfig+0x42>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	23a3      	movs	r3, #163	; 0xa3
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	58d3      	ldr	r3, [r2, r3]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	1cfa      	adds	r2, r7, #3
 800633c:	7811      	ldrb	r1, [r2, #0]
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	0010      	movs	r0, r2
 8006342:	4798      	blx	r3
 8006344:	1e03      	subs	r3, r0, #0
 8006346:	d103      	bne.n	8006350 <USBD_SetClassConfig+0x42>
    {
      ret = USBD_OK;
 8006348:	230f      	movs	r3, #15
 800634a:	18fb      	adds	r3, r7, r3
 800634c:	2200      	movs	r2, #0
 800634e:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8006350:	230f      	movs	r3, #15
 8006352:	18fb      	adds	r3, r7, r3
 8006354:	781b      	ldrb	r3, [r3, #0]
}
 8006356:	0018      	movs	r0, r3
 8006358:	46bd      	mov	sp, r7
 800635a:	b004      	add	sp, #16
 800635c:	bd80      	pop	{r7, pc}

0800635e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800635e:	b580      	push	{r7, lr}
 8006360:	b082      	sub	sp, #8
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
 8006366:	000a      	movs	r2, r1
 8006368:	1cfb      	adds	r3, r7, #3
 800636a:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	23a3      	movs	r3, #163	; 0xa3
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	58d3      	ldr	r3, [r2, r3]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	1cfa      	adds	r2, r7, #3
 8006378:	7811      	ldrb	r1, [r2, #0]
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	0010      	movs	r0, r2
 800637e:	4798      	blx	r3
  return USBD_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	0018      	movs	r0, r3
 8006384:	46bd      	mov	sp, r7
 8006386:	b002      	add	sp, #8
 8006388:	bd80      	pop	{r7, pc}
	...

0800638c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	22a0      	movs	r2, #160	; 0xa0
 800639a:	0092      	lsls	r2, r2, #2
 800639c:	4694      	mov	ip, r2
 800639e:	4463      	add	r3, ip
 80063a0:	683a      	ldr	r2, [r7, #0]
 80063a2:	0011      	movs	r1, r2
 80063a4:	0018      	movs	r0, r3
 80063a6:	f000 ff6d 	bl	8007284 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	239b      	movs	r3, #155	; 0x9b
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	2101      	movs	r1, #1
 80063b2:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a22      	ldr	r2, [pc, #136]	; (8006440 <USBD_LL_SetupStage+0xb4>)
 80063b8:	5a9b      	ldrh	r3, [r3, r2]
 80063ba:	0019      	movs	r1, r3
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	239c      	movs	r3, #156	; 0x9c
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	23a0      	movs	r3, #160	; 0xa0
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	5cd3      	ldrb	r3, [r2, r3]
 80063cc:	001a      	movs	r2, r3
 80063ce:	231f      	movs	r3, #31
 80063d0:	4013      	ands	r3, r2
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d00d      	beq.n	80063f2 <USBD_LL_SetupStage+0x66>
 80063d6:	d302      	bcc.n	80063de <USBD_LL_SetupStage+0x52>
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d014      	beq.n	8006406 <USBD_LL_SetupStage+0x7a>
 80063dc:	e01d      	b.n	800641a <USBD_LL_SetupStage+0x8e>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	22a0      	movs	r2, #160	; 0xa0
 80063e2:	0092      	lsls	r2, r2, #2
 80063e4:	189a      	adds	r2, r3, r2
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	0011      	movs	r1, r2
 80063ea:	0018      	movs	r0, r3
 80063ec:	f000 fa0a 	bl	8006804 <USBD_StdDevReq>
    break;
 80063f0:	e020      	b.n	8006434 <USBD_LL_SetupStage+0xa8>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	22a0      	movs	r2, #160	; 0xa0
 80063f6:	0092      	lsls	r2, r2, #2
 80063f8:	189a      	adds	r2, r3, r2
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	0011      	movs	r1, r2
 80063fe:	0018      	movs	r0, r3
 8006400:	f000 fa72 	bl	80068e8 <USBD_StdItfReq>
    break;
 8006404:	e016      	b.n	8006434 <USBD_LL_SetupStage+0xa8>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	22a0      	movs	r2, #160	; 0xa0
 800640a:	0092      	lsls	r2, r2, #2
 800640c:	189a      	adds	r2, r3, r2
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	0011      	movs	r1, r2
 8006412:	0018      	movs	r0, r3
 8006414:	f000 fabf 	bl	8006996 <USBD_StdEPReq>
    break;
 8006418:	e00c      	b.n	8006434 <USBD_LL_SetupStage+0xa8>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	23a0      	movs	r3, #160	; 0xa0
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	5cd3      	ldrb	r3, [r2, r3]
 8006422:	227f      	movs	r2, #127	; 0x7f
 8006424:	4393      	bics	r3, r2
 8006426:	b2da      	uxtb	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	0011      	movs	r1, r2
 800642c:	0018      	movs	r0, r3
 800642e:	f001 fc2c 	bl	8007c8a <USBD_LL_StallEP>
    break;
 8006432:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	0018      	movs	r0, r3
 8006438:	46bd      	mov	sp, r7
 800643a:	b002      	add	sp, #8
 800643c:	bd80      	pop	{r7, pc}
 800643e:	46c0      	nop			; (mov r8, r8)
 8006440:	00000286 	.word	0x00000286

08006444 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	607a      	str	r2, [r7, #4]
 800644e:	200b      	movs	r0, #11
 8006450:	183b      	adds	r3, r7, r0
 8006452:	1c0a      	adds	r2, r1, #0
 8006454:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8006456:	183b      	adds	r3, r7, r0
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d154      	bne.n	8006508 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	3341      	adds	r3, #65	; 0x41
 8006462:	33ff      	adds	r3, #255	; 0xff
 8006464:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	239b      	movs	r3, #155	; 0x9b
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	58d3      	ldr	r3, [r2, r3]
 800646e:	2b03      	cmp	r3, #3
 8006470:	d139      	bne.n	80064e6 <USBD_LL_DataOutStage+0xa2>
    {
      if(pep->rem_length > pep->maxpacket)
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	68da      	ldr	r2, [r3, #12]
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	429a      	cmp	r2, r3
 800647c:	d919      	bls.n	80064b2 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -=  pep->maxpacket;
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	68da      	ldr	r2, [r3, #12]
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	1ad2      	subs	r2, r2, r3
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	68da      	ldr	r2, [r3, #12]
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006494:	429a      	cmp	r2, r3
 8006496:	d203      	bcs.n	80064a0 <USBD_LL_DataOutStage+0x5c>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800649c:	b29b      	uxth	r3, r3
 800649e:	e002      	b.n	80064a6 <USBD_LL_DataOutStage+0x62>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	6879      	ldr	r1, [r7, #4]
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	001a      	movs	r2, r3
 80064ac:	f000 fffb 	bl	80074a6 <USBD_CtlContinueRx>
 80064b0:	e045      	b.n	800653e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	23a3      	movs	r3, #163	; 0xa3
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	58d3      	ldr	r3, [r2, r3]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00d      	beq.n	80064dc <USBD_LL_DataOutStage+0x98>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	239d      	movs	r3, #157	; 0x9d
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	5cd3      	ldrb	r3, [r2, r3]
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80064c8:	2b03      	cmp	r3, #3
 80064ca:	d107      	bne.n	80064dc <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	23a3      	movs	r3, #163	; 0xa3
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	58d3      	ldr	r3, [r2, r3]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	0010      	movs	r0, r2
 80064da:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	0018      	movs	r0, r3
 80064e0:	f000 fff4 	bl	80074cc <USBD_CtlSendStatus>
 80064e4:	e02b      	b.n	800653e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	239b      	movs	r3, #155	; 0x9b
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	58d3      	ldr	r3, [r2, r3]
 80064ee:	2b05      	cmp	r3, #5
 80064f0:	d125      	bne.n	800653e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	239b      	movs	r3, #155	; 0x9b
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	2100      	movs	r1, #0
 80064fa:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2100      	movs	r1, #0
 8006500:	0018      	movs	r0, r3
 8006502:	f001 fbc2 	bl	8007c8a <USBD_LL_StallEP>
 8006506:	e01a      	b.n	800653e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	23a3      	movs	r3, #163	; 0xa3
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	58d3      	ldr	r3, [r2, r3]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d011      	beq.n	800653a <USBD_LL_DataOutStage+0xf6>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	239d      	movs	r3, #157	; 0x9d
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataOut != NULL) &&
 800651e:	2b03      	cmp	r3, #3
 8006520:	d10b      	bne.n	800653a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	23a3      	movs	r3, #163	; 0xa3
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	58d3      	ldr	r3, [r2, r3]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	220b      	movs	r2, #11
 800652e:	18ba      	adds	r2, r7, r2
 8006530:	7811      	ldrb	r1, [r2, #0]
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	0010      	movs	r0, r2
 8006536:	4798      	blx	r3
 8006538:	e001      	b.n	800653e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800653a:	2302      	movs	r3, #2
 800653c:	e000      	b.n	8006540 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	0018      	movs	r0, r3
 8006542:	46bd      	mov	sp, r7
 8006544:	b006      	add	sp, #24
 8006546:	bd80      	pop	{r7, pc}

08006548 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	607a      	str	r2, [r7, #4]
 8006552:	200b      	movs	r0, #11
 8006554:	183b      	adds	r3, r7, r0
 8006556:	1c0a      	adds	r2, r1, #0
 8006558:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800655a:	183b      	adds	r3, r7, r0
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d000      	beq.n	8006564 <USBD_LL_DataInStage+0x1c>
 8006562:	e08e      	b.n	8006682 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	3314      	adds	r3, #20
 8006568:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	239b      	movs	r3, #155	; 0x9b
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	58d3      	ldr	r3, [r2, r3]
 8006572:	2b02      	cmp	r3, #2
 8006574:	d164      	bne.n	8006640 <USBD_LL_DataInStage+0xf8>
    {
      if(pep->rem_length > pep->maxpacket)
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	68da      	ldr	r2, [r3, #12]
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	429a      	cmp	r2, r3
 8006580:	d915      	bls.n	80065ae <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	68da      	ldr	r2, [r3, #12]
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	1ad2      	subs	r2, r2, r3
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	b29a      	uxth	r2, r3
 8006596:	6879      	ldr	r1, [r7, #4]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	0018      	movs	r0, r3
 800659c:	f000 ff4c 	bl	8007438 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	2300      	movs	r3, #0
 80065a4:	2200      	movs	r2, #0
 80065a6:	2100      	movs	r1, #0
 80065a8:	f001 fc5c 	bl	8007e64 <USBD_LL_PrepareReceive>
 80065ac:	e059      	b.n	8006662 <USBD_LL_DataInStage+0x11a>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	689a      	ldr	r2, [r3, #8]
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	0019      	movs	r1, r3
 80065b8:	0010      	movs	r0, r2
 80065ba:	f7f9 fe2b 	bl	8000214 <__aeabi_uidivmod>
 80065be:	1e0b      	subs	r3, r1, #0
 80065c0:	d11f      	bne.n	8006602 <USBD_LL_DataInStage+0xba>
           (pep->total_length >= pep->maxpacket) &&
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	689a      	ldr	r2, [r3, #8]
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d319      	bcc.n	8006602 <USBD_LL_DataInStage+0xba>
           (pep->total_length < pdev->ep0_data_len))
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	689a      	ldr	r2, [r3, #8]
 80065d2:	68f9      	ldr	r1, [r7, #12]
 80065d4:	239c      	movs	r3, #156	; 0x9c
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	58cb      	ldr	r3, [r1, r3]
           (pep->total_length >= pep->maxpacket) &&
 80065da:	429a      	cmp	r2, r3
 80065dc:	d211      	bcs.n	8006602 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	2100      	movs	r1, #0
 80065e4:	0018      	movs	r0, r3
 80065e6:	f000 ff27 	bl	8007438 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	239c      	movs	r3, #156	; 0x9c
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	2100      	movs	r1, #0
 80065f2:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	2300      	movs	r3, #0
 80065f8:	2200      	movs	r2, #0
 80065fa:	2100      	movs	r1, #0
 80065fc:	f001 fc32 	bl	8007e64 <USBD_LL_PrepareReceive>
 8006600:	e02f      	b.n	8006662 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	23a3      	movs	r3, #163	; 0xa3
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	58d3      	ldr	r3, [r2, r3]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00d      	beq.n	800662c <USBD_LL_DataInStage+0xe4>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	239d      	movs	r3, #157	; 0x9d
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	5cd3      	ldrb	r3, [r2, r3]
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006618:	2b03      	cmp	r3, #3
 800661a:	d107      	bne.n	800662c <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	23a3      	movs	r3, #163	; 0xa3
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	58d3      	ldr	r3, [r2, r3]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	0010      	movs	r0, r2
 800662a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2180      	movs	r1, #128	; 0x80
 8006630:	0018      	movs	r0, r3
 8006632:	f001 fb2a 	bl	8007c8a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	0018      	movs	r0, r3
 800663a:	f000 ff5b 	bl	80074f4 <USBD_CtlReceiveStatus>
 800663e:	e010      	b.n	8006662 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	239b      	movs	r3, #155	; 0x9b
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	58d3      	ldr	r3, [r2, r3]
 8006648:	2b04      	cmp	r3, #4
 800664a:	d005      	beq.n	8006658 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	239b      	movs	r3, #155	; 0x9b
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006654:	2b00      	cmp	r3, #0
 8006656:	d104      	bne.n	8006662 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2180      	movs	r1, #128	; 0x80
 800665c:	0018      	movs	r0, r3
 800665e:	f001 fb14 	bl	8007c8a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	239e      	movs	r3, #158	; 0x9e
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	5cd3      	ldrb	r3, [r2, r3]
 800666a:	2b01      	cmp	r3, #1
 800666c:	d124      	bne.n	80066b8 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	0018      	movs	r0, r3
 8006672:	f7ff fe43 	bl	80062fc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	239e      	movs	r3, #158	; 0x9e
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	2100      	movs	r1, #0
 800667e:	54d1      	strb	r1, [r2, r3]
 8006680:	e01a      	b.n	80066b8 <USBD_LL_DataInStage+0x170>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	23a3      	movs	r3, #163	; 0xa3
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	58d3      	ldr	r3, [r2, r3]
 800668a:	695b      	ldr	r3, [r3, #20]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d011      	beq.n	80066b4 <USBD_LL_DataInStage+0x16c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	239d      	movs	r3, #157	; 0x9d
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataIn != NULL) &&
 8006698:	2b03      	cmp	r3, #3
 800669a:	d10b      	bne.n	80066b4 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	23a3      	movs	r3, #163	; 0xa3
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	58d3      	ldr	r3, [r2, r3]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	220b      	movs	r2, #11
 80066a8:	18ba      	adds	r2, r7, r2
 80066aa:	7811      	ldrb	r1, [r2, #0]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	0010      	movs	r0, r2
 80066b0:	4798      	blx	r3
 80066b2:	e001      	b.n	80066b8 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80066b4:	2302      	movs	r3, #2
 80066b6:	e000      	b.n	80066ba <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	0018      	movs	r0, r3
 80066bc:	46bd      	mov	sp, r7
 80066be:	b006      	add	sp, #24
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b082      	sub	sp, #8
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	2340      	movs	r3, #64	; 0x40
 80066ce:	2200      	movs	r2, #0
 80066d0:	2100      	movs	r1, #0
 80066d2:	f001 fa77 	bl	8007bc4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	23a2      	movs	r3, #162	; 0xa2
 80066da:	005b      	lsls	r3, r3, #1
 80066dc:	2101      	movs	r1, #1
 80066de:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	23a8      	movs	r3, #168	; 0xa8
 80066e4:	005b      	lsls	r3, r3, #1
 80066e6:	2140      	movs	r1, #64	; 0x40
 80066e8:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	2340      	movs	r3, #64	; 0x40
 80066ee:	2200      	movs	r2, #0
 80066f0:	2180      	movs	r1, #128	; 0x80
 80066f2:	f001 fa67 	bl	8007bc4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2240      	movs	r2, #64	; 0x40
 8006700:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	239d      	movs	r3, #157	; 0x9d
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	2101      	movs	r1, #1
 800670a:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	239b      	movs	r3, #155	; 0x9b
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	2100      	movs	r1, #0
 8006714:	50d1      	str	r1, [r2, r3]
  pdev->dev_config= 0U;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	239f      	movs	r3, #159	; 0x9f
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	2100      	movs	r1, #0
 8006724:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	23a4      	movs	r3, #164	; 0xa4
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	58d3      	ldr	r3, [r2, r3]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00a      	beq.n	8006748 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	23a3      	movs	r3, #163	; 0xa3
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	58d3      	ldr	r3, [r2, r3]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	b2d9      	uxtb	r1, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	0018      	movs	r0, r3
 8006746:	4790      	blx	r2
  }

  return USBD_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	0018      	movs	r0, r3
 800674c:	46bd      	mov	sp, r7
 800674e:	b002      	add	sp, #8
 8006750:	bd80      	pop	{r7, pc}

08006752 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b082      	sub	sp, #8
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
 800675a:	000a      	movs	r2, r1
 800675c:	1cfb      	adds	r3, r7, #3
 800675e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	1cfa      	adds	r2, r7, #3
 8006764:	7812      	ldrb	r2, [r2, #0]
 8006766:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	0018      	movs	r0, r3
 800676c:	46bd      	mov	sp, r7
 800676e:	b002      	add	sp, #8
 8006770:	bd80      	pop	{r7, pc}
	...

08006774 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	239d      	movs	r3, #157	; 0x9d
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	5cd1      	ldrb	r1, [r2, r3]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a06      	ldr	r2, [pc, #24]	; (80067a0 <USBD_LL_Suspend+0x2c>)
 8006788:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	239d      	movs	r3, #157	; 0x9d
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	2104      	movs	r1, #4
 8006792:	54d1      	strb	r1, [r2, r3]
  return USBD_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	0018      	movs	r0, r3
 8006798:	46bd      	mov	sp, r7
 800679a:	b002      	add	sp, #8
 800679c:	bd80      	pop	{r7, pc}
 800679e:	46c0      	nop			; (mov r8, r8)
 80067a0:	00000275 	.word	0x00000275

080067a4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a05      	ldr	r2, [pc, #20]	; (80067c4 <USBD_LL_Resume+0x20>)
 80067b0:	5c99      	ldrb	r1, [r3, r2]
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	239d      	movs	r3, #157	; 0x9d
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	54d1      	strb	r1, [r2, r3]
  return USBD_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	0018      	movs	r0, r3
 80067be:	46bd      	mov	sp, r7
 80067c0:	b002      	add	sp, #8
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	00000275 	.word	0x00000275

080067c8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	239d      	movs	r3, #157	; 0x9d
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	5cd3      	ldrb	r3, [r2, r3]
 80067d8:	2b03      	cmp	r3, #3
 80067da:	d10e      	bne.n	80067fa <USBD_LL_SOF+0x32>
  {
    if(pdev->pClass->SOF != NULL)
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	23a3      	movs	r3, #163	; 0xa3
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	58d3      	ldr	r3, [r2, r3]
 80067e4:	69db      	ldr	r3, [r3, #28]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d007      	beq.n	80067fa <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	23a3      	movs	r3, #163	; 0xa3
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	58d3      	ldr	r3, [r2, r3]
 80067f2:	69db      	ldr	r3, [r3, #28]
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	0010      	movs	r0, r2
 80067f8:	4798      	blx	r3
    }
  }
  return USBD_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	0018      	movs	r0, r3
 80067fe:	46bd      	mov	sp, r7
 8006800:	b002      	add	sp, #8
 8006802:	bd80      	pop	{r7, pc}

08006804 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800680e:	230f      	movs	r3, #15
 8006810:	18fb      	adds	r3, r7, r3
 8006812:	2200      	movs	r2, #0
 8006814:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	001a      	movs	r2, r3
 800681c:	2360      	movs	r3, #96	; 0x60
 800681e:	4013      	ands	r3, r2
 8006820:	2b20      	cmp	r3, #32
 8006822:	d004      	beq.n	800682e <USBD_StdDevReq+0x2a>
 8006824:	2b40      	cmp	r3, #64	; 0x40
 8006826:	d002      	beq.n	800682e <USBD_StdDevReq+0x2a>
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00a      	beq.n	8006842 <USBD_StdDevReq+0x3e>
 800682c:	e04b      	b.n	80068c6 <USBD_StdDevReq+0xc2>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	23a3      	movs	r3, #163	; 0xa3
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	58d3      	ldr	r3, [r2, r3]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	6839      	ldr	r1, [r7, #0]
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	0010      	movs	r0, r2
 800683e:	4798      	blx	r3
    break;
 8006840:	e048      	b.n	80068d4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	785b      	ldrb	r3, [r3, #1]
 8006846:	2b09      	cmp	r3, #9
 8006848:	d835      	bhi.n	80068b6 <USBD_StdDevReq+0xb2>
 800684a:	009a      	lsls	r2, r3, #2
 800684c:	4b25      	ldr	r3, [pc, #148]	; (80068e4 <USBD_StdDevReq+0xe0>)
 800684e:	18d3      	adds	r3, r2, r3
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	469f      	mov	pc, r3
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8006854:	683a      	ldr	r2, [r7, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	0011      	movs	r1, r2
 800685a:	0018      	movs	r0, r3
 800685c:	f000 fa58 	bl	8006d10 <USBD_GetDescriptor>
      break;
 8006860:	e030      	b.n	80068c4 <USBD_StdDevReq+0xc0>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	0011      	movs	r1, r2
 8006868:	0018      	movs	r0, r3
 800686a:	f000 fb63 	bl	8006f34 <USBD_SetAddress>
      break;
 800686e:	e029      	b.n	80068c4 <USBD_StdDevReq+0xc0>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8006870:	683a      	ldr	r2, [r7, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	0011      	movs	r1, r2
 8006876:	0018      	movs	r0, r3
 8006878:	f000 fbb0 	bl	8006fdc <USBD_SetConfig>
      break;
 800687c:	e022      	b.n	80068c4 <USBD_StdDevReq+0xc0>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800687e:	683a      	ldr	r2, [r7, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	0011      	movs	r1, r2
 8006884:	0018      	movs	r0, r3
 8006886:	f000 fc4d 	bl	8007124 <USBD_GetConfig>
      break;
 800688a:	e01b      	b.n	80068c4 <USBD_StdDevReq+0xc0>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800688c:	683a      	ldr	r2, [r7, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	0011      	movs	r1, r2
 8006892:	0018      	movs	r0, r3
 8006894:	f000 fc80 	bl	8007198 <USBD_GetStatus>
      break;
 8006898:	e014      	b.n	80068c4 <USBD_StdDevReq+0xc0>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800689a:	683a      	ldr	r2, [r7, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	0011      	movs	r1, r2
 80068a0:	0018      	movs	r0, r3
 80068a2:	f000 fcb3 	bl	800720c <USBD_SetFeature>
      break;
 80068a6:	e00d      	b.n	80068c4 <USBD_StdDevReq+0xc0>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80068a8:	683a      	ldr	r2, [r7, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	0011      	movs	r1, r2
 80068ae:	0018      	movs	r0, r3
 80068b0:	f000 fcc2 	bl	8007238 <USBD_ClrFeature>
      break;
 80068b4:	e006      	b.n	80068c4 <USBD_StdDevReq+0xc0>

    default:
      USBD_CtlError(pdev, req);
 80068b6:	683a      	ldr	r2, [r7, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	0011      	movs	r1, r2
 80068bc:	0018      	movs	r0, r3
 80068be:	f000 fd1c 	bl	80072fa <USBD_CtlError>
      break;
 80068c2:	46c0      	nop			; (mov r8, r8)
    }
    break;
 80068c4:	e006      	b.n	80068d4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80068c6:	683a      	ldr	r2, [r7, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	0011      	movs	r1, r2
 80068cc:	0018      	movs	r0, r3
 80068ce:	f000 fd14 	bl	80072fa <USBD_CtlError>
    break;
 80068d2:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80068d4:	230f      	movs	r3, #15
 80068d6:	18fb      	adds	r3, r7, r3
 80068d8:	781b      	ldrb	r3, [r3, #0]
}
 80068da:	0018      	movs	r0, r3
 80068dc:	46bd      	mov	sp, r7
 80068de:	b004      	add	sp, #16
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	46c0      	nop			; (mov r8, r8)
 80068e4:	08008078 	.word	0x08008078

080068e8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80068e8:	b590      	push	{r4, r7, lr}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068f2:	230f      	movs	r3, #15
 80068f4:	18fb      	adds	r3, r7, r3
 80068f6:	2200      	movs	r2, #0
 80068f8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	001a      	movs	r2, r3
 8006900:	2360      	movs	r3, #96	; 0x60
 8006902:	4013      	ands	r3, r2
 8006904:	2b20      	cmp	r3, #32
 8006906:	d003      	beq.n	8006910 <USBD_StdItfReq+0x28>
 8006908:	2b40      	cmp	r3, #64	; 0x40
 800690a:	d001      	beq.n	8006910 <USBD_StdItfReq+0x28>
 800690c:	2b00      	cmp	r3, #0
 800690e:	d136      	bne.n	800697e <USBD_StdItfReq+0x96>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	239d      	movs	r3, #157	; 0x9d
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	5cd3      	ldrb	r3, [r2, r3]
 8006918:	3b01      	subs	r3, #1
 800691a:	2b02      	cmp	r3, #2
 800691c:	d826      	bhi.n	800696c <USBD_StdItfReq+0x84>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	889b      	ldrh	r3, [r3, #4]
 8006922:	b2db      	uxtb	r3, r3
 8006924:	2b01      	cmp	r3, #1
 8006926:	d81a      	bhi.n	800695e <USBD_StdItfReq+0x76>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	23a3      	movs	r3, #163	; 0xa3
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	58d3      	ldr	r3, [r2, r3]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	220f      	movs	r2, #15
 8006934:	18bc      	adds	r4, r7, r2
 8006936:	6839      	ldr	r1, [r7, #0]
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	0010      	movs	r0, r2
 800693c:	4798      	blx	r3
 800693e:	0003      	movs	r3, r0
 8006940:	7023      	strb	r3, [r4, #0]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	88db      	ldrh	r3, [r3, #6]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d117      	bne.n	800697a <USBD_StdItfReq+0x92>
 800694a:	230f      	movs	r3, #15
 800694c:	18fb      	adds	r3, r7, r3
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d112      	bne.n	800697a <USBD_StdItfReq+0x92>
        {
          USBD_CtlSendStatus(pdev);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	0018      	movs	r0, r3
 8006958:	f000 fdb8 	bl	80074cc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800695c:	e00d      	b.n	800697a <USBD_StdItfReq+0x92>
        USBD_CtlError(pdev, req);
 800695e:	683a      	ldr	r2, [r7, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	0011      	movs	r1, r2
 8006964:	0018      	movs	r0, r3
 8006966:	f000 fcc8 	bl	80072fa <USBD_CtlError>
      break;
 800696a:	e006      	b.n	800697a <USBD_StdItfReq+0x92>

    default:
      USBD_CtlError(pdev, req);
 800696c:	683a      	ldr	r2, [r7, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	0011      	movs	r1, r2
 8006972:	0018      	movs	r0, r3
 8006974:	f000 fcc1 	bl	80072fa <USBD_CtlError>
      break;
 8006978:	e000      	b.n	800697c <USBD_StdItfReq+0x94>
      break;
 800697a:	46c0      	nop			; (mov r8, r8)
    }
    break;
 800697c:	e006      	b.n	800698c <USBD_StdItfReq+0xa4>

  default:
    USBD_CtlError(pdev, req);
 800697e:	683a      	ldr	r2, [r7, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	0011      	movs	r1, r2
 8006984:	0018      	movs	r0, r3
 8006986:	f000 fcb8 	bl	80072fa <USBD_CtlError>
    break;
 800698a:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	0018      	movs	r0, r3
 8006990:	46bd      	mov	sp, r7
 8006992:	b005      	add	sp, #20
 8006994:	bd90      	pop	{r4, r7, pc}

08006996 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006996:	b5b0      	push	{r4, r5, r7, lr}
 8006998:	b084      	sub	sp, #16
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
 800699e:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80069a0:	230f      	movs	r3, #15
 80069a2:	18fb      	adds	r3, r7, r3
 80069a4:	2200      	movs	r2, #0
 80069a6:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	889a      	ldrh	r2, [r3, #4]
 80069ac:	230e      	movs	r3, #14
 80069ae:	18fb      	adds	r3, r7, r3
 80069b0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	001a      	movs	r2, r3
 80069b8:	2360      	movs	r3, #96	; 0x60
 80069ba:	4013      	ands	r3, r2
 80069bc:	2b20      	cmp	r3, #32
 80069be:	d004      	beq.n	80069ca <USBD_StdEPReq+0x34>
 80069c0:	2b40      	cmp	r3, #64	; 0x40
 80069c2:	d002      	beq.n	80069ca <USBD_StdEPReq+0x34>
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00a      	beq.n	80069de <USBD_StdEPReq+0x48>
 80069c8:	e193      	b.n	8006cf2 <USBD_StdEPReq+0x35c>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	23a3      	movs	r3, #163	; 0xa3
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	58d3      	ldr	r3, [r2, r3]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	6839      	ldr	r1, [r7, #0]
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	0010      	movs	r0, r2
 80069da:	4798      	blx	r3
    break;
 80069dc:	e190      	b.n	8006d00 <USBD_StdEPReq+0x36a>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	001a      	movs	r2, r3
 80069e4:	2360      	movs	r3, #96	; 0x60
 80069e6:	4013      	ands	r3, r2
 80069e8:	2b20      	cmp	r3, #32
 80069ea:	d10f      	bne.n	8006a0c <USBD_StdEPReq+0x76>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	23a3      	movs	r3, #163	; 0xa3
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	58d3      	ldr	r3, [r2, r3]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	250f      	movs	r5, #15
 80069f8:	197c      	adds	r4, r7, r5
 80069fa:	6839      	ldr	r1, [r7, #0]
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	0010      	movs	r0, r2
 8006a00:	4798      	blx	r3
 8006a02:	0003      	movs	r3, r0
 8006a04:	7023      	strb	r3, [r4, #0]

      return ret;
 8006a06:	197b      	adds	r3, r7, r5
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	e17c      	b.n	8006d06 <USBD_StdEPReq+0x370>
    }

    switch (req->bRequest)
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	785b      	ldrb	r3, [r3, #1]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d054      	beq.n	8006abe <USBD_StdEPReq+0x128>
 8006a14:	2b03      	cmp	r3, #3
 8006a16:	d003      	beq.n	8006a20 <USBD_StdEPReq+0x8a>
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d100      	bne.n	8006a1e <USBD_StdEPReq+0x88>
 8006a1c:	e097      	b.n	8006b4e <USBD_StdEPReq+0x1b8>
 8006a1e:	e160      	b.n	8006ce2 <USBD_StdEPReq+0x34c>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	239d      	movs	r3, #157	; 0x9d
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	5cd3      	ldrb	r3, [r2, r3]
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d002      	beq.n	8006a32 <USBD_StdEPReq+0x9c>
 8006a2c:	2b03      	cmp	r3, #3
 8006a2e:	d01f      	beq.n	8006a70 <USBD_StdEPReq+0xda>
 8006a30:	e03d      	b.n	8006aae <USBD_StdEPReq+0x118>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a32:	230e      	movs	r3, #14
 8006a34:	18fb      	adds	r3, r7, r3
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d012      	beq.n	8006a62 <USBD_StdEPReq+0xcc>
 8006a3c:	230e      	movs	r3, #14
 8006a3e:	18fb      	adds	r3, r7, r3
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	2b80      	cmp	r3, #128	; 0x80
 8006a44:	d00d      	beq.n	8006a62 <USBD_StdEPReq+0xcc>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006a46:	230e      	movs	r3, #14
 8006a48:	18fb      	adds	r3, r7, r3
 8006a4a:	781a      	ldrb	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	0011      	movs	r1, r2
 8006a50:	0018      	movs	r0, r3
 8006a52:	f001 f91a 	bl	8007c8a <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2180      	movs	r1, #128	; 0x80
 8006a5a:	0018      	movs	r0, r3
 8006a5c:	f001 f915 	bl	8007c8a <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006a60:	e02c      	b.n	8006abc <USBD_StdEPReq+0x126>
          USBD_CtlError(pdev, req);
 8006a62:	683a      	ldr	r2, [r7, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	0011      	movs	r1, r2
 8006a68:	0018      	movs	r0, r3
 8006a6a:	f000 fc46 	bl	80072fa <USBD_CtlError>
        break;
 8006a6e:	e025      	b.n	8006abc <USBD_StdEPReq+0x126>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	885b      	ldrh	r3, [r3, #2]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d115      	bne.n	8006aa4 <USBD_StdEPReq+0x10e>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006a78:	230e      	movs	r3, #14
 8006a7a:	18fb      	adds	r3, r7, r3
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d010      	beq.n	8006aa4 <USBD_StdEPReq+0x10e>
 8006a82:	230e      	movs	r3, #14
 8006a84:	18fb      	adds	r3, r7, r3
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	2b80      	cmp	r3, #128	; 0x80
 8006a8a:	d00b      	beq.n	8006aa4 <USBD_StdEPReq+0x10e>
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	88db      	ldrh	r3, [r3, #6]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d107      	bne.n	8006aa4 <USBD_StdEPReq+0x10e>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8006a94:	230e      	movs	r3, #14
 8006a96:	18fb      	adds	r3, r7, r3
 8006a98:	781a      	ldrb	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	0011      	movs	r1, r2
 8006a9e:	0018      	movs	r0, r3
 8006aa0:	f001 f8f3 	bl	8007c8a <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	0018      	movs	r0, r3
 8006aa8:	f000 fd10 	bl	80074cc <USBD_CtlSendStatus>

        break;
 8006aac:	e006      	b.n	8006abc <USBD_StdEPReq+0x126>

      default:
        USBD_CtlError(pdev, req);
 8006aae:	683a      	ldr	r2, [r7, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	0011      	movs	r1, r2
 8006ab4:	0018      	movs	r0, r3
 8006ab6:	f000 fc20 	bl	80072fa <USBD_CtlError>
        break;
 8006aba:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006abc:	e118      	b.n	8006cf0 <USBD_StdEPReq+0x35a>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	239d      	movs	r3, #157	; 0x9d
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	5cd3      	ldrb	r3, [r2, r3]
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d002      	beq.n	8006ad0 <USBD_StdEPReq+0x13a>
 8006aca:	2b03      	cmp	r3, #3
 8006acc:	d01f      	beq.n	8006b0e <USBD_StdEPReq+0x178>
 8006ace:	e035      	b.n	8006b3c <USBD_StdEPReq+0x1a6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ad0:	230e      	movs	r3, #14
 8006ad2:	18fb      	adds	r3, r7, r3
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d012      	beq.n	8006b00 <USBD_StdEPReq+0x16a>
 8006ada:	230e      	movs	r3, #14
 8006adc:	18fb      	adds	r3, r7, r3
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	2b80      	cmp	r3, #128	; 0x80
 8006ae2:	d00d      	beq.n	8006b00 <USBD_StdEPReq+0x16a>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006ae4:	230e      	movs	r3, #14
 8006ae6:	18fb      	adds	r3, r7, r3
 8006ae8:	781a      	ldrb	r2, [r3, #0]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	0011      	movs	r1, r2
 8006aee:	0018      	movs	r0, r3
 8006af0:	f001 f8cb 	bl	8007c8a <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2180      	movs	r1, #128	; 0x80
 8006af8:	0018      	movs	r0, r3
 8006afa:	f001 f8c6 	bl	8007c8a <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006afe:	e025      	b.n	8006b4c <USBD_StdEPReq+0x1b6>
          USBD_CtlError(pdev, req);
 8006b00:	683a      	ldr	r2, [r7, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	0011      	movs	r1, r2
 8006b06:	0018      	movs	r0, r3
 8006b08:	f000 fbf7 	bl	80072fa <USBD_CtlError>
        break;
 8006b0c:	e01e      	b.n	8006b4c <USBD_StdEPReq+0x1b6>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	885b      	ldrh	r3, [r3, #2]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d119      	bne.n	8006b4a <USBD_StdEPReq+0x1b4>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006b16:	230e      	movs	r3, #14
 8006b18:	18fb      	adds	r3, r7, r3
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	227f      	movs	r2, #127	; 0x7f
 8006b1e:	4013      	ands	r3, r2
 8006b20:	d007      	beq.n	8006b32 <USBD_StdEPReq+0x19c>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8006b22:	230e      	movs	r3, #14
 8006b24:	18fb      	adds	r3, r7, r3
 8006b26:	781a      	ldrb	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	0011      	movs	r1, r2
 8006b2c:	0018      	movs	r0, r3
 8006b2e:	f001 f8d8 	bl	8007ce2 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	0018      	movs	r0, r3
 8006b36:	f000 fcc9 	bl	80074cc <USBD_CtlSendStatus>
        }
        break;
 8006b3a:	e006      	b.n	8006b4a <USBD_StdEPReq+0x1b4>

      default:
        USBD_CtlError(pdev, req);
 8006b3c:	683a      	ldr	r2, [r7, #0]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	0011      	movs	r1, r2
 8006b42:	0018      	movs	r0, r3
 8006b44:	f000 fbd9 	bl	80072fa <USBD_CtlError>
        break;
 8006b48:	e000      	b.n	8006b4c <USBD_StdEPReq+0x1b6>
        break;
 8006b4a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006b4c:	e0d0      	b.n	8006cf0 <USBD_StdEPReq+0x35a>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	239d      	movs	r3, #157	; 0x9d
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	5cd3      	ldrb	r3, [r2, r3]
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d002      	beq.n	8006b60 <USBD_StdEPReq+0x1ca>
 8006b5a:	2b03      	cmp	r3, #3
 8006b5c:	d03d      	beq.n	8006bda <USBD_StdEPReq+0x244>
 8006b5e:	e0b8      	b.n	8006cd2 <USBD_StdEPReq+0x33c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b60:	230e      	movs	r3, #14
 8006b62:	18fb      	adds	r3, r7, r3
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00b      	beq.n	8006b82 <USBD_StdEPReq+0x1ec>
 8006b6a:	230e      	movs	r3, #14
 8006b6c:	18fb      	adds	r3, r7, r3
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	2b80      	cmp	r3, #128	; 0x80
 8006b72:	d006      	beq.n	8006b82 <USBD_StdEPReq+0x1ec>
        {
          USBD_CtlError(pdev, req);
 8006b74:	683a      	ldr	r2, [r7, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	0011      	movs	r1, r2
 8006b7a:	0018      	movs	r0, r3
 8006b7c:	f000 fbbd 	bl	80072fa <USBD_CtlError>
          break;
 8006b80:	e0ae      	b.n	8006ce0 <USBD_StdEPReq+0x34a>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006b82:	230e      	movs	r3, #14
 8006b84:	18fb      	adds	r3, r7, r3
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	b25b      	sxtb	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	da0d      	bge.n	8006baa <USBD_StdEPReq+0x214>
 8006b8e:	230e      	movs	r3, #14
 8006b90:	18fb      	adds	r3, r7, r3
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	227f      	movs	r2, #127	; 0x7f
 8006b96:	401a      	ands	r2, r3
 8006b98:	0013      	movs	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	189b      	adds	r3, r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	3310      	adds	r3, #16
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	18d3      	adds	r3, r2, r3
 8006ba6:	3304      	adds	r3, #4
 8006ba8:	e00c      	b.n	8006bc4 <USBD_StdEPReq+0x22e>
          &pdev->ep_out[ep_addr & 0x7FU];
 8006baa:	230e      	movs	r3, #14
 8006bac:	18fb      	adds	r3, r7, r3
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	227f      	movs	r2, #127	; 0x7f
 8006bb2:	401a      	ands	r2, r3
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006bb4:	0013      	movs	r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	189b      	adds	r3, r3, r2
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	3341      	adds	r3, #65	; 0x41
 8006bbe:	33ff      	adds	r3, #255	; 0xff
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	18d3      	adds	r3, r2, r3
 8006bc4:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006bcc:	68b9      	ldr	r1, [r7, #8]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2202      	movs	r2, #2
 8006bd2:	0018      	movs	r0, r3
 8006bd4:	f000 fc10 	bl	80073f8 <USBD_CtlSendData>
          break;
 8006bd8:	e082      	b.n	8006ce0 <USBD_StdEPReq+0x34a>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8006bda:	230e      	movs	r3, #14
 8006bdc:	18fb      	adds	r3, r7, r3
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	b25b      	sxtb	r3, r3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	da15      	bge.n	8006c12 <USBD_StdEPReq+0x27c>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006be6:	230e      	movs	r3, #14
 8006be8:	18fb      	adds	r3, r7, r3
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	220f      	movs	r2, #15
 8006bee:	401a      	ands	r2, r3
 8006bf0:	6879      	ldr	r1, [r7, #4]
 8006bf2:	0013      	movs	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	189b      	adds	r3, r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	18cb      	adds	r3, r1, r3
 8006bfc:	3318      	adds	r3, #24
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d11e      	bne.n	8006c42 <USBD_StdEPReq+0x2ac>
          {
            USBD_CtlError(pdev, req);
 8006c04:	683a      	ldr	r2, [r7, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	0011      	movs	r1, r2
 8006c0a:	0018      	movs	r0, r3
 8006c0c:	f000 fb75 	bl	80072fa <USBD_CtlError>
            break;
 8006c10:	e066      	b.n	8006ce0 <USBD_StdEPReq+0x34a>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006c12:	230e      	movs	r3, #14
 8006c14:	18fb      	adds	r3, r7, r3
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	220f      	movs	r2, #15
 8006c1a:	401a      	ands	r2, r3
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	23a2      	movs	r3, #162	; 0xa2
 8006c20:	0059      	lsls	r1, r3, #1
 8006c22:	0013      	movs	r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	189b      	adds	r3, r3, r2
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	18c3      	adds	r3, r0, r3
 8006c2c:	185b      	adds	r3, r3, r1
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d106      	bne.n	8006c42 <USBD_StdEPReq+0x2ac>
          {
            USBD_CtlError(pdev, req);
 8006c34:	683a      	ldr	r2, [r7, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	0011      	movs	r1, r2
 8006c3a:	0018      	movs	r0, r3
 8006c3c:	f000 fb5d 	bl	80072fa <USBD_CtlError>
            break;
 8006c40:	e04e      	b.n	8006ce0 <USBD_StdEPReq+0x34a>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006c42:	230e      	movs	r3, #14
 8006c44:	18fb      	adds	r3, r7, r3
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	b25b      	sxtb	r3, r3
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	da0d      	bge.n	8006c6a <USBD_StdEPReq+0x2d4>
 8006c4e:	230e      	movs	r3, #14
 8006c50:	18fb      	adds	r3, r7, r3
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	227f      	movs	r2, #127	; 0x7f
 8006c56:	401a      	ands	r2, r3
 8006c58:	0013      	movs	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	189b      	adds	r3, r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	3310      	adds	r3, #16
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	18d3      	adds	r3, r2, r3
 8006c66:	3304      	adds	r3, #4
 8006c68:	e00c      	b.n	8006c84 <USBD_StdEPReq+0x2ee>
          &pdev->ep_out[ep_addr & 0x7FU];
 8006c6a:	230e      	movs	r3, #14
 8006c6c:	18fb      	adds	r3, r7, r3
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	227f      	movs	r2, #127	; 0x7f
 8006c72:	401a      	ands	r2, r3
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006c74:	0013      	movs	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	189b      	adds	r3, r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	3341      	adds	r3, #65	; 0x41
 8006c7e:	33ff      	adds	r3, #255	; 0xff
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	18d3      	adds	r3, r2, r3
 8006c84:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006c86:	230e      	movs	r3, #14
 8006c88:	18fb      	adds	r3, r7, r3
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d004      	beq.n	8006c9a <USBD_StdEPReq+0x304>
 8006c90:	230e      	movs	r3, #14
 8006c92:	18fb      	adds	r3, r7, r3
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	2b80      	cmp	r3, #128	; 0x80
 8006c98:	d103      	bne.n	8006ca2 <USBD_StdEPReq+0x30c>
          {
            pep->status = 0x0000U;
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	601a      	str	r2, [r3, #0]
 8006ca0:	e010      	b.n	8006cc4 <USBD_StdEPReq+0x32e>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8006ca2:	230e      	movs	r3, #14
 8006ca4:	18fb      	adds	r3, r7, r3
 8006ca6:	781a      	ldrb	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	0011      	movs	r1, r2
 8006cac:	0018      	movs	r0, r3
 8006cae:	f001 f844 	bl	8007d3a <USBD_LL_IsStallEP>
 8006cb2:	1e03      	subs	r3, r0, #0
 8006cb4:	d003      	beq.n	8006cbe <USBD_StdEPReq+0x328>
          {
            pep->status = 0x0001U;
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	601a      	str	r2, [r3, #0]
 8006cbc:	e002      	b.n	8006cc4 <USBD_StdEPReq+0x32e>
          }
          else
          {
            pep->status = 0x0000U;
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006cc4:	68b9      	ldr	r1, [r7, #8]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2202      	movs	r2, #2
 8006cca:	0018      	movs	r0, r3
 8006ccc:	f000 fb94 	bl	80073f8 <USBD_CtlSendData>
          break;
 8006cd0:	e006      	b.n	8006ce0 <USBD_StdEPReq+0x34a>

      default:
        USBD_CtlError(pdev, req);
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	0011      	movs	r1, r2
 8006cd8:	0018      	movs	r0, r3
 8006cda:	f000 fb0e 	bl	80072fa <USBD_CtlError>
        break;
 8006cde:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006ce0:	e006      	b.n	8006cf0 <USBD_StdEPReq+0x35a>

    default:
      USBD_CtlError(pdev, req);
 8006ce2:	683a      	ldr	r2, [r7, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	0011      	movs	r1, r2
 8006ce8:	0018      	movs	r0, r3
 8006cea:	f000 fb06 	bl	80072fa <USBD_CtlError>
      break;
 8006cee:	46c0      	nop			; (mov r8, r8)
    }
    break;
 8006cf0:	e006      	b.n	8006d00 <USBD_StdEPReq+0x36a>

  default:
    USBD_CtlError(pdev, req);
 8006cf2:	683a      	ldr	r2, [r7, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	0011      	movs	r1, r2
 8006cf8:	0018      	movs	r0, r3
 8006cfa:	f000 fafe 	bl	80072fa <USBD_CtlError>
    break;
 8006cfe:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8006d00:	230f      	movs	r3, #15
 8006d02:	18fb      	adds	r3, r7, r3
 8006d04:	781b      	ldrb	r3, [r3, #0]
}
 8006d06:	0018      	movs	r0, r3
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	b004      	add	sp, #16
 8006d0c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006d10 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	885b      	ldrh	r3, [r3, #2]
 8006d1e:	0a1b      	lsrs	r3, r3, #8
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	2b07      	cmp	r3, #7
 8006d24:	d900      	bls.n	8006d28 <USBD_GetDescriptor+0x18>
 8006d26:	e0ce      	b.n	8006ec6 <USBD_GetDescriptor+0x1b6>
 8006d28:	009a      	lsls	r2, r3, #2
 8006d2a:	4b80      	ldr	r3, [pc, #512]	; (8006f2c <USBD_GetDescriptor+0x21c>)
 8006d2c:	18d3      	adds	r3, r2, r3
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	469f      	mov	pc, r3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	23a2      	movs	r3, #162	; 0xa2
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	58d3      	ldr	r3, [r2, r3]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	7c12      	ldrb	r2, [r2, #16]
 8006d40:	210a      	movs	r1, #10
 8006d42:	1879      	adds	r1, r7, r1
 8006d44:	0010      	movs	r0, r2
 8006d46:	4798      	blx	r3
 8006d48:	0003      	movs	r3, r0
 8006d4a:	60fb      	str	r3, [r7, #12]
    break;
 8006d4c:	e0c2      	b.n	8006ed4 <USBD_GetDescriptor+0x1c4>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	7c1b      	ldrb	r3, [r3, #16]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d10f      	bne.n	8006d76 <USBD_GetDescriptor+0x66>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	23a3      	movs	r3, #163	; 0xa3
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	58d3      	ldr	r3, [r2, r3]
 8006d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d60:	220a      	movs	r2, #10
 8006d62:	18ba      	adds	r2, r7, r2
 8006d64:	0010      	movs	r0, r2
 8006d66:	4798      	blx	r3
 8006d68:	0003      	movs	r3, r0
 8006d6a:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	2202      	movs	r2, #2
 8006d72:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006d74:	e0ae      	b.n	8006ed4 <USBD_GetDescriptor+0x1c4>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	23a3      	movs	r3, #163	; 0xa3
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	58d3      	ldr	r3, [r2, r3]
 8006d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d80:	220a      	movs	r2, #10
 8006d82:	18ba      	adds	r2, r7, r2
 8006d84:	0010      	movs	r0, r2
 8006d86:	4798      	blx	r3
 8006d88:	0003      	movs	r3, r0
 8006d8a:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	2202      	movs	r2, #2
 8006d92:	701a      	strb	r2, [r3, #0]
    break;
 8006d94:	e09e      	b.n	8006ed4 <USBD_GetDescriptor+0x1c4>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	885b      	ldrh	r3, [r3, #2]
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b05      	cmp	r3, #5
 8006d9e:	d858      	bhi.n	8006e52 <USBD_GetDescriptor+0x142>
 8006da0:	009a      	lsls	r2, r3, #2
 8006da2:	4b63      	ldr	r3, [pc, #396]	; (8006f30 <USBD_GetDescriptor+0x220>)
 8006da4:	18d3      	adds	r3, r2, r3
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	469f      	mov	pc, r3
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	23a2      	movs	r3, #162	; 0xa2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	58d3      	ldr	r3, [r2, r3]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	7c12      	ldrb	r2, [r2, #16]
 8006db8:	210a      	movs	r1, #10
 8006dba:	1879      	adds	r1, r7, r1
 8006dbc:	0010      	movs	r0, r2
 8006dbe:	4798      	blx	r3
 8006dc0:	0003      	movs	r3, r0
 8006dc2:	60fb      	str	r3, [r7, #12]
      break;
 8006dc4:	e04c      	b.n	8006e60 <USBD_GetDescriptor+0x150>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	23a2      	movs	r3, #162	; 0xa2
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	58d3      	ldr	r3, [r2, r3]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	7c12      	ldrb	r2, [r2, #16]
 8006dd4:	210a      	movs	r1, #10
 8006dd6:	1879      	adds	r1, r7, r1
 8006dd8:	0010      	movs	r0, r2
 8006dda:	4798      	blx	r3
 8006ddc:	0003      	movs	r3, r0
 8006dde:	60fb      	str	r3, [r7, #12]
      break;
 8006de0:	e03e      	b.n	8006e60 <USBD_GetDescriptor+0x150>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	23a2      	movs	r3, #162	; 0xa2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	58d3      	ldr	r3, [r2, r3]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	7c12      	ldrb	r2, [r2, #16]
 8006df0:	210a      	movs	r1, #10
 8006df2:	1879      	adds	r1, r7, r1
 8006df4:	0010      	movs	r0, r2
 8006df6:	4798      	blx	r3
 8006df8:	0003      	movs	r3, r0
 8006dfa:	60fb      	str	r3, [r7, #12]
      break;
 8006dfc:	e030      	b.n	8006e60 <USBD_GetDescriptor+0x150>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	23a2      	movs	r3, #162	; 0xa2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	58d3      	ldr	r3, [r2, r3]
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	7c12      	ldrb	r2, [r2, #16]
 8006e0c:	210a      	movs	r1, #10
 8006e0e:	1879      	adds	r1, r7, r1
 8006e10:	0010      	movs	r0, r2
 8006e12:	4798      	blx	r3
 8006e14:	0003      	movs	r3, r0
 8006e16:	60fb      	str	r3, [r7, #12]
      break;
 8006e18:	e022      	b.n	8006e60 <USBD_GetDescriptor+0x150>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	23a2      	movs	r3, #162	; 0xa2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	58d3      	ldr	r3, [r2, r3]
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	7c12      	ldrb	r2, [r2, #16]
 8006e28:	210a      	movs	r1, #10
 8006e2a:	1879      	adds	r1, r7, r1
 8006e2c:	0010      	movs	r0, r2
 8006e2e:	4798      	blx	r3
 8006e30:	0003      	movs	r3, r0
 8006e32:	60fb      	str	r3, [r7, #12]
      break;
 8006e34:	e014      	b.n	8006e60 <USBD_GetDescriptor+0x150>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	23a2      	movs	r3, #162	; 0xa2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	58d3      	ldr	r3, [r2, r3]
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	7c12      	ldrb	r2, [r2, #16]
 8006e44:	210a      	movs	r1, #10
 8006e46:	1879      	adds	r1, r7, r1
 8006e48:	0010      	movs	r0, r2
 8006e4a:	4798      	blx	r3
 8006e4c:	0003      	movs	r3, r0
 8006e4e:	60fb      	str	r3, [r7, #12]
      break;
 8006e50:	e006      	b.n	8006e60 <USBD_GetDescriptor+0x150>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8006e52:	683a      	ldr	r2, [r7, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	0011      	movs	r1, r2
 8006e58:	0018      	movs	r0, r3
 8006e5a:	f000 fa4e 	bl	80072fa <USBD_CtlError>
      return;
 8006e5e:	e061      	b.n	8006f24 <USBD_GetDescriptor+0x214>
#endif
    }
    break;
 8006e60:	e038      	b.n	8006ed4 <USBD_GetDescriptor+0x1c4>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	7c1b      	ldrb	r3, [r3, #16]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10b      	bne.n	8006e82 <USBD_GetDescriptor+0x172>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	23a3      	movs	r3, #163	; 0xa3
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	58d3      	ldr	r3, [r2, r3]
 8006e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e74:	220a      	movs	r2, #10
 8006e76:	18ba      	adds	r2, r7, r2
 8006e78:	0010      	movs	r0, r2
 8006e7a:	4798      	blx	r3
 8006e7c:	0003      	movs	r3, r0
 8006e7e:	60fb      	str	r3, [r7, #12]
      break;
 8006e80:	e028      	b.n	8006ed4 <USBD_GetDescriptor+0x1c4>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006e82:	683a      	ldr	r2, [r7, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	0011      	movs	r1, r2
 8006e88:	0018      	movs	r0, r3
 8006e8a:	f000 fa36 	bl	80072fa <USBD_CtlError>
      return;
 8006e8e:	e049      	b.n	8006f24 <USBD_GetDescriptor+0x214>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	7c1b      	ldrb	r3, [r3, #16]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d10f      	bne.n	8006eb8 <USBD_GetDescriptor+0x1a8>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	23a3      	movs	r3, #163	; 0xa3
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	58d3      	ldr	r3, [r2, r3]
 8006ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea2:	220a      	movs	r2, #10
 8006ea4:	18ba      	adds	r2, r7, r2
 8006ea6:	0010      	movs	r0, r2
 8006ea8:	4798      	blx	r3
 8006eaa:	0003      	movs	r3, r0
 8006eac:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	2207      	movs	r2, #7
 8006eb4:	701a      	strb	r2, [r3, #0]
      break;
 8006eb6:	e00d      	b.n	8006ed4 <USBD_GetDescriptor+0x1c4>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	0011      	movs	r1, r2
 8006ebe:	0018      	movs	r0, r3
 8006ec0:	f000 fa1b 	bl	80072fa <USBD_CtlError>
      return;
 8006ec4:	e02e      	b.n	8006f24 <USBD_GetDescriptor+0x214>
    }

  default:
     USBD_CtlError(pdev , req);
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	0011      	movs	r1, r2
 8006ecc:	0018      	movs	r0, r3
 8006ece:	f000 fa14 	bl	80072fa <USBD_CtlError>
    return;
 8006ed2:	e027      	b.n	8006f24 <USBD_GetDescriptor+0x214>
  }

  if((len != 0U) && (req->wLength != 0U))
 8006ed4:	230a      	movs	r3, #10
 8006ed6:	18fb      	adds	r3, r7, r3
 8006ed8:	881b      	ldrh	r3, [r3, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d01a      	beq.n	8006f14 <USBD_GetDescriptor+0x204>
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	88db      	ldrh	r3, [r3, #6]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d016      	beq.n	8006f14 <USBD_GetDescriptor+0x204>
  {

    len = MIN(len, req->wLength);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	88da      	ldrh	r2, [r3, #6]
 8006eea:	230a      	movs	r3, #10
 8006eec:	18fb      	adds	r3, r7, r3
 8006eee:	881b      	ldrh	r3, [r3, #0]
 8006ef0:	1c18      	adds	r0, r3, #0
 8006ef2:	1c11      	adds	r1, r2, #0
 8006ef4:	b28a      	uxth	r2, r1
 8006ef6:	b283      	uxth	r3, r0
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d900      	bls.n	8006efe <USBD_GetDescriptor+0x1ee>
 8006efc:	1c01      	adds	r1, r0, #0
 8006efe:	b28a      	uxth	r2, r1
 8006f00:	210a      	movs	r1, #10
 8006f02:	187b      	adds	r3, r7, r1
 8006f04:	801a      	strh	r2, [r3, #0]

    USBD_CtlSendData (pdev, pbuf, len);
 8006f06:	187b      	adds	r3, r7, r1
 8006f08:	881a      	ldrh	r2, [r3, #0]
 8006f0a:	68f9      	ldr	r1, [r7, #12]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	0018      	movs	r0, r3
 8006f10:	f000 fa72 	bl	80073f8 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	88db      	ldrh	r3, [r3, #6]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d103      	bne.n	8006f24 <USBD_GetDescriptor+0x214>
  {
   USBD_CtlSendStatus(pdev);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	0018      	movs	r0, r3
 8006f20:	f000 fad4 	bl	80074cc <USBD_CtlSendStatus>
  }
}
 8006f24:	46bd      	mov	sp, r7
 8006f26:	b004      	add	sp, #16
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	46c0      	nop			; (mov r8, r8)
 8006f2c:	080080a0 	.word	0x080080a0
 8006f30:	080080c0 	.word	0x080080c0

08006f34 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006f34:	b590      	push	{r4, r7, lr}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	889b      	ldrh	r3, [r3, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d13d      	bne.n	8006fc2 <USBD_SetAddress+0x8e>
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	88db      	ldrh	r3, [r3, #6]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d139      	bne.n	8006fc2 <USBD_SetAddress+0x8e>
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	885b      	ldrh	r3, [r3, #2]
 8006f52:	2b7f      	cmp	r3, #127	; 0x7f
 8006f54:	d835      	bhi.n	8006fc2 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	885b      	ldrh	r3, [r3, #2]
 8006f5a:	b2da      	uxtb	r2, r3
 8006f5c:	230f      	movs	r3, #15
 8006f5e:	18fb      	adds	r3, r7, r3
 8006f60:	217f      	movs	r1, #127	; 0x7f
 8006f62:	400a      	ands	r2, r1
 8006f64:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	239d      	movs	r3, #157	; 0x9d
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	5cd3      	ldrb	r3, [r2, r3]
 8006f6e:	2b03      	cmp	r3, #3
 8006f70:	d106      	bne.n	8006f80 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev , req);
 8006f72:	683a      	ldr	r2, [r7, #0]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	0011      	movs	r1, r2
 8006f78:	0018      	movs	r0, r3
 8006f7a:	f000 f9be 	bl	80072fa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f7e:	e026      	b.n	8006fce <USBD_SetAddress+0x9a>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	240f      	movs	r4, #15
 8006f84:	193a      	adds	r2, r7, r4
 8006f86:	4914      	ldr	r1, [pc, #80]	; (8006fd8 <USBD_SetAddress+0xa4>)
 8006f88:	7812      	ldrb	r2, [r2, #0]
 8006f8a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006f8c:	193b      	adds	r3, r7, r4
 8006f8e:	781a      	ldrb	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	0011      	movs	r1, r2
 8006f94:	0018      	movs	r0, r3
 8006f96:	f000 ff01 	bl	8007d9c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	0018      	movs	r0, r3
 8006f9e:	f000 fa95 	bl	80074cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006fa2:	193b      	adds	r3, r7, r4
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d005      	beq.n	8006fb6 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	239d      	movs	r3, #157	; 0x9d
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	2102      	movs	r1, #2
 8006fb2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fb4:	e00b      	b.n	8006fce <USBD_SetAddress+0x9a>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	239d      	movs	r3, #157	; 0x9d
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	2101      	movs	r1, #1
 8006fbe:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fc0:	e005      	b.n	8006fce <USBD_SetAddress+0x9a>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	0011      	movs	r1, r2
 8006fc8:	0018      	movs	r0, r3
 8006fca:	f000 f996 	bl	80072fa <USBD_CtlError>
  }
}
 8006fce:	46c0      	nop			; (mov r8, r8)
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	b005      	add	sp, #20
 8006fd4:	bd90      	pop	{r4, r7, pc}
 8006fd6:	46c0      	nop			; (mov r8, r8)
 8006fd8:	00000276 	.word	0x00000276

08006fdc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	885b      	ldrh	r3, [r3, #2]
 8006fea:	b2da      	uxtb	r2, r3
 8006fec:	4b4c      	ldr	r3, [pc, #304]	; (8007120 <USBD_SetConfig+0x144>)
 8006fee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006ff0:	4b4b      	ldr	r3, [pc, #300]	; (8007120 <USBD_SetConfig+0x144>)
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d906      	bls.n	8007006 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8006ff8:	683a      	ldr	r2, [r7, #0]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	0011      	movs	r1, r2
 8006ffe:	0018      	movs	r0, r3
 8007000:	f000 f97b 	bl	80072fa <USBD_CtlError>
 8007004:	e088      	b.n	8007118 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	239d      	movs	r3, #157	; 0x9d
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	5cd3      	ldrb	r3, [r2, r3]
 800700e:	2b02      	cmp	r3, #2
 8007010:	d002      	beq.n	8007018 <USBD_SetConfig+0x3c>
 8007012:	2b03      	cmp	r3, #3
 8007014:	d029      	beq.n	800706a <USBD_SetConfig+0x8e>
 8007016:	e071      	b.n	80070fc <USBD_SetConfig+0x120>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8007018:	4b41      	ldr	r3, [pc, #260]	; (8007120 <USBD_SetConfig+0x144>)
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d01f      	beq.n	8007060 <USBD_SetConfig+0x84>
      {
        pdev->dev_config = cfgidx;
 8007020:	4b3f      	ldr	r3, [pc, #252]	; (8007120 <USBD_SetConfig+0x144>)
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	001a      	movs	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	239d      	movs	r3, #157	; 0x9d
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	2103      	movs	r1, #3
 8007032:	54d1      	strb	r1, [r2, r3]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007034:	4b3a      	ldr	r3, [pc, #232]	; (8007120 <USBD_SetConfig+0x144>)
 8007036:	781a      	ldrb	r2, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	0011      	movs	r1, r2
 800703c:	0018      	movs	r0, r3
 800703e:	f7ff f966 	bl	800630e <USBD_SetClassConfig>
 8007042:	0003      	movs	r3, r0
 8007044:	2b02      	cmp	r3, #2
 8007046:	d106      	bne.n	8007056 <USBD_SetConfig+0x7a>
        {
          USBD_CtlError(pdev, req);
 8007048:	683a      	ldr	r2, [r7, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	0011      	movs	r1, r2
 800704e:	0018      	movs	r0, r3
 8007050:	f000 f953 	bl	80072fa <USBD_CtlError>
          return;
 8007054:	e060      	b.n	8007118 <USBD_SetConfig+0x13c>
        }
        USBD_CtlSendStatus(pdev);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	0018      	movs	r0, r3
 800705a:	f000 fa37 	bl	80074cc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800705e:	e05b      	b.n	8007118 <USBD_SetConfig+0x13c>
        USBD_CtlSendStatus(pdev);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	0018      	movs	r0, r3
 8007064:	f000 fa32 	bl	80074cc <USBD_CtlSendStatus>
      break;
 8007068:	e056      	b.n	8007118 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800706a:	4b2d      	ldr	r3, [pc, #180]	; (8007120 <USBD_SetConfig+0x144>)
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d115      	bne.n	800709e <USBD_SetConfig+0xc2>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	239d      	movs	r3, #157	; 0x9d
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	2102      	movs	r1, #2
 800707a:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;
 800707c:	4b28      	ldr	r3, [pc, #160]	; (8007120 <USBD_SetConfig+0x144>)
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	001a      	movs	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8007086:	4b26      	ldr	r3, [pc, #152]	; (8007120 <USBD_SetConfig+0x144>)
 8007088:	781a      	ldrb	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	0011      	movs	r1, r2
 800708e:	0018      	movs	r0, r3
 8007090:	f7ff f965 	bl	800635e <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	0018      	movs	r0, r3
 8007098:	f000 fa18 	bl	80074cc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800709c:	e03c      	b.n	8007118 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800709e:	4b20      	ldr	r3, [pc, #128]	; (8007120 <USBD_SetConfig+0x144>)
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	001a      	movs	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d022      	beq.n	80070f2 <USBD_SetConfig+0x116>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	b2da      	uxtb	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	0011      	movs	r1, r2
 80070b6:	0018      	movs	r0, r3
 80070b8:	f7ff f951 	bl	800635e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80070bc:	4b18      	ldr	r3, [pc, #96]	; (8007120 <USBD_SetConfig+0x144>)
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	001a      	movs	r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80070c6:	4b16      	ldr	r3, [pc, #88]	; (8007120 <USBD_SetConfig+0x144>)
 80070c8:	781a      	ldrb	r2, [r3, #0]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	0011      	movs	r1, r2
 80070ce:	0018      	movs	r0, r3
 80070d0:	f7ff f91d 	bl	800630e <USBD_SetClassConfig>
 80070d4:	0003      	movs	r3, r0
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d106      	bne.n	80070e8 <USBD_SetConfig+0x10c>
          USBD_CtlError(pdev, req);
 80070da:	683a      	ldr	r2, [r7, #0]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	0011      	movs	r1, r2
 80070e0:	0018      	movs	r0, r3
 80070e2:	f000 f90a 	bl	80072fa <USBD_CtlError>
          return;
 80070e6:	e017      	b.n	8007118 <USBD_SetConfig+0x13c>
        USBD_CtlSendStatus(pdev);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	0018      	movs	r0, r3
 80070ec:	f000 f9ee 	bl	80074cc <USBD_CtlSendStatus>
      break;
 80070f0:	e012      	b.n	8007118 <USBD_SetConfig+0x13c>
        USBD_CtlSendStatus(pdev);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	0018      	movs	r0, r3
 80070f6:	f000 f9e9 	bl	80074cc <USBD_CtlSendStatus>
      break;
 80070fa:	e00d      	b.n	8007118 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80070fc:	683a      	ldr	r2, [r7, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	0011      	movs	r1, r2
 8007102:	0018      	movs	r0, r3
 8007104:	f000 f8f9 	bl	80072fa <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8007108:	4b05      	ldr	r3, [pc, #20]	; (8007120 <USBD_SetConfig+0x144>)
 800710a:	781a      	ldrb	r2, [r3, #0]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	0011      	movs	r1, r2
 8007110:	0018      	movs	r0, r3
 8007112:	f7ff f924 	bl	800635e <USBD_ClrClassConfig>
      break;
 8007116:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8007118:	46bd      	mov	sp, r7
 800711a:	b002      	add	sp, #8
 800711c:	bd80      	pop	{r7, pc}
 800711e:	46c0      	nop			; (mov r8, r8)
 8007120:	2000019c 	.word	0x2000019c

08007124 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	88db      	ldrh	r3, [r3, #6]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d006      	beq.n	8007144 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev , req);
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	0011      	movs	r1, r2
 800713c:	0018      	movs	r0, r3
 800713e:	f000 f8dc 	bl	80072fa <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8007142:	e025      	b.n	8007190 <USBD_GetConfig+0x6c>
    switch (pdev->dev_state)
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	239d      	movs	r3, #157	; 0x9d
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	5cd3      	ldrb	r3, [r2, r3]
 800714c:	2b01      	cmp	r3, #1
 800714e:	db18      	blt.n	8007182 <USBD_GetConfig+0x5e>
 8007150:	2b02      	cmp	r3, #2
 8007152:	dd02      	ble.n	800715a <USBD_GetConfig+0x36>
 8007154:	2b03      	cmp	r3, #3
 8007156:	d00c      	beq.n	8007172 <USBD_GetConfig+0x4e>
 8007158:	e013      	b.n	8007182 <USBD_GetConfig+0x5e>
      pdev->dev_default_config = 0U;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	3308      	adds	r3, #8
 8007164:	0019      	movs	r1, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2201      	movs	r2, #1
 800716a:	0018      	movs	r0, r3
 800716c:	f000 f944 	bl	80073f8 <USBD_CtlSendData>
      break;
 8007170:	e00e      	b.n	8007190 <USBD_GetConfig+0x6c>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	1d19      	adds	r1, r3, #4
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2201      	movs	r2, #1
 800717a:	0018      	movs	r0, r3
 800717c:	f000 f93c 	bl	80073f8 <USBD_CtlSendData>
      break;
 8007180:	e006      	b.n	8007190 <USBD_GetConfig+0x6c>
      USBD_CtlError(pdev , req);
 8007182:	683a      	ldr	r2, [r7, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	0011      	movs	r1, r2
 8007188:	0018      	movs	r0, r3
 800718a:	f000 f8b6 	bl	80072fa <USBD_CtlError>
      break;
 800718e:	46c0      	nop			; (mov r8, r8)
}
 8007190:	46c0      	nop			; (mov r8, r8)
 8007192:	46bd      	mov	sp, r7
 8007194:	b002      	add	sp, #8
 8007196:	bd80      	pop	{r7, pc}

08007198 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	239d      	movs	r3, #157	; 0x9d
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	5cd3      	ldrb	r3, [r2, r3]
 80071aa:	3b01      	subs	r3, #1
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d822      	bhi.n	80071f6 <USBD_GetStatus+0x5e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	88db      	ldrh	r3, [r3, #6]
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d006      	beq.n	80071c6 <USBD_GetStatus+0x2e>
    {
      USBD_CtlError(pdev, req);
 80071b8:	683a      	ldr	r2, [r7, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	0011      	movs	r1, r2
 80071be:	0018      	movs	r0, r3
 80071c0:	f000 f89b 	bl	80072fa <USBD_CtlError>
      break;
 80071c4:	e01e      	b.n	8007204 <USBD_GetStatus+0x6c>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	239f      	movs	r3, #159	; 0x9f
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	58d3      	ldr	r3, [r2, r3]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d005      	beq.n	80071e4 <USBD_GetStatus+0x4c>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	2202      	movs	r2, #2
 80071de:	431a      	orrs	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	330c      	adds	r3, #12
 80071e8:	0019      	movs	r1, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2202      	movs	r2, #2
 80071ee:	0018      	movs	r0, r3
 80071f0:	f000 f902 	bl	80073f8 <USBD_CtlSendData>
    break;
 80071f4:	e006      	b.n	8007204 <USBD_GetStatus+0x6c>

  default :
    USBD_CtlError(pdev , req);
 80071f6:	683a      	ldr	r2, [r7, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	0011      	movs	r1, r2
 80071fc:	0018      	movs	r0, r3
 80071fe:	f000 f87c 	bl	80072fa <USBD_CtlError>
    break;
 8007202:	46c0      	nop			; (mov r8, r8)
  }
}
 8007204:	46c0      	nop			; (mov r8, r8)
 8007206:	46bd      	mov	sp, r7
 8007208:	b002      	add	sp, #8
 800720a:	bd80      	pop	{r7, pc}

0800720c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	885b      	ldrh	r3, [r3, #2]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d108      	bne.n	8007230 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	239f      	movs	r3, #159	; 0x9f
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	2101      	movs	r1, #1
 8007226:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	0018      	movs	r0, r3
 800722c:	f000 f94e 	bl	80074cc <USBD_CtlSendStatus>
  }

}
 8007230:	46c0      	nop			; (mov r8, r8)
 8007232:	46bd      	mov	sp, r7
 8007234:	b002      	add	sp, #8
 8007236:	bd80      	pop	{r7, pc}

08007238 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	239d      	movs	r3, #157	; 0x9d
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	5cd3      	ldrb	r3, [r2, r3]
 800724a:	3b01      	subs	r3, #1
 800724c:	2b02      	cmp	r3, #2
 800724e:	d80d      	bhi.n	800726c <USBD_ClrFeature+0x34>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	885b      	ldrh	r3, [r3, #2]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d110      	bne.n	800727a <USBD_ClrFeature+0x42>
    {
      pdev->dev_remote_wakeup = 0U;
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	239f      	movs	r3, #159	; 0x9f
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	2100      	movs	r1, #0
 8007260:	50d1      	str	r1, [r2, r3]
      USBD_CtlSendStatus(pdev);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	0018      	movs	r0, r3
 8007266:	f000 f931 	bl	80074cc <USBD_CtlSendStatus>
    }
    break;
 800726a:	e006      	b.n	800727a <USBD_ClrFeature+0x42>

  default :
     USBD_CtlError(pdev , req);
 800726c:	683a      	ldr	r2, [r7, #0]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	0011      	movs	r1, r2
 8007272:	0018      	movs	r0, r3
 8007274:	f000 f841 	bl	80072fa <USBD_CtlError>
    break;
 8007278:	e000      	b.n	800727c <USBD_ClrFeature+0x44>
    break;
 800727a:	46c0      	nop			; (mov r8, r8)
  }
}
 800727c:	46c0      	nop			; (mov r8, r8)
 800727e:	46bd      	mov	sp, r7
 8007280:	b002      	add	sp, #8
 8007282:	bd80      	pop	{r7, pc}

08007284 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	781a      	ldrb	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	785a      	ldrb	r2, [r3, #1]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	3302      	adds	r3, #2
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	3303      	adds	r3, #3
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	021b      	lsls	r3, r3, #8
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	18d3      	adds	r3, r2, r3
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	3304      	adds	r3, #4
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	3305      	adds	r3, #5
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	021b      	lsls	r3, r3, #8
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	18d3      	adds	r3, r2, r3
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	3306      	adds	r3, #6
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	b29a      	uxth	r2, r3
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	3307      	adds	r3, #7
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	021b      	lsls	r3, r3, #8
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	18d3      	adds	r3, r2, r3
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	80da      	strh	r2, [r3, #6]

}
 80072f2:	46c0      	nop			; (mov r8, r8)
 80072f4:	46bd      	mov	sp, r7
 80072f6:	b002      	add	sp, #8
 80072f8:	bd80      	pop	{r7, pc}

080072fa <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b082      	sub	sp, #8
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
 8007302:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2180      	movs	r1, #128	; 0x80
 8007308:	0018      	movs	r0, r3
 800730a:	f000 fcbe 	bl	8007c8a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2100      	movs	r1, #0
 8007312:	0018      	movs	r0, r3
 8007314:	f000 fcb9 	bl	8007c8a <USBD_LL_StallEP>
}
 8007318:	46c0      	nop			; (mov r8, r8)
 800731a:	46bd      	mov	sp, r7
 800731c:	b002      	add	sp, #8
 800731e:	bd80      	pop	{r7, pc}

08007320 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007320:	b590      	push	{r4, r7, lr}
 8007322:	b087      	sub	sp, #28
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800732c:	2317      	movs	r3, #23
 800732e:	18fb      	adds	r3, r7, r3
 8007330:	2200      	movs	r2, #0
 8007332:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d03d      	beq.n	80073b6 <USBD_GetString+0x96>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	0018      	movs	r0, r3
 800733e:	f000 f83e 	bl	80073be <USBD_GetLen>
 8007342:	0003      	movs	r3, r0
 8007344:	3301      	adds	r3, #1
 8007346:	b29b      	uxth	r3, r3
 8007348:	18db      	adds	r3, r3, r3
 800734a:	b29a      	uxth	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007350:	2017      	movs	r0, #23
 8007352:	183b      	adds	r3, r7, r0
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	183a      	adds	r2, r7, r0
 8007358:	1c59      	adds	r1, r3, #1
 800735a:	7011      	strb	r1, [r2, #0]
 800735c:	001a      	movs	r2, r3
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	189b      	adds	r3, r3, r2
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	7812      	ldrb	r2, [r2, #0]
 8007366:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007368:	183b      	adds	r3, r7, r0
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	183a      	adds	r2, r7, r0
 800736e:	1c59      	adds	r1, r3, #1
 8007370:	7011      	strb	r1, [r2, #0]
 8007372:	001a      	movs	r2, r3
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	189b      	adds	r3, r3, r2
 8007378:	2203      	movs	r2, #3
 800737a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800737c:	e017      	b.n	80073ae <USBD_GetString+0x8e>
    {
      unicode[idx++] = *desc++;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	1c5a      	adds	r2, r3, #1
 8007382:	60fa      	str	r2, [r7, #12]
 8007384:	2417      	movs	r4, #23
 8007386:	193a      	adds	r2, r7, r4
 8007388:	7812      	ldrb	r2, [r2, #0]
 800738a:	1939      	adds	r1, r7, r4
 800738c:	1c50      	adds	r0, r2, #1
 800738e:	7008      	strb	r0, [r1, #0]
 8007390:	0011      	movs	r1, r2
 8007392:	68ba      	ldr	r2, [r7, #8]
 8007394:	1852      	adds	r2, r2, r1
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800739a:	193b      	adds	r3, r7, r4
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	193a      	adds	r2, r7, r4
 80073a0:	1c59      	adds	r1, r3, #1
 80073a2:	7011      	strb	r1, [r2, #0]
 80073a4:	001a      	movs	r2, r3
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	189b      	adds	r3, r3, r2
 80073aa:	2200      	movs	r2, #0
 80073ac:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1e3      	bne.n	800737e <USBD_GetString+0x5e>
    }
  }
}
 80073b6:	46c0      	nop			; (mov r8, r8)
 80073b8:	46bd      	mov	sp, r7
 80073ba:	b007      	add	sp, #28
 80073bc:	bd90      	pop	{r4, r7, pc}

080073be <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b084      	sub	sp, #16
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80073c6:	230f      	movs	r3, #15
 80073c8:	18fb      	adds	r3, r7, r3
 80073ca:	2200      	movs	r2, #0
 80073cc:	701a      	strb	r2, [r3, #0]

    while (*buf != '\0')
 80073ce:	e008      	b.n	80073e2 <USBD_GetLen+0x24>
    {
        len++;
 80073d0:	210f      	movs	r1, #15
 80073d2:	187b      	adds	r3, r7, r1
 80073d4:	781a      	ldrb	r2, [r3, #0]
 80073d6:	187b      	adds	r3, r7, r1
 80073d8:	3201      	adds	r2, #1
 80073da:	701a      	strb	r2, [r3, #0]
        buf++;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	3301      	adds	r3, #1
 80073e0:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1f2      	bne.n	80073d0 <USBD_GetLen+0x12>
    }

    return len;
 80073ea:	230f      	movs	r3, #15
 80073ec:	18fb      	adds	r3, r7, r3
 80073ee:	781b      	ldrb	r3, [r3, #0]
}
 80073f0:	0018      	movs	r0, r3
 80073f2:	46bd      	mov	sp, r7
 80073f4:	b004      	add	sp, #16
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	1dbb      	adds	r3, r7, #6
 8007404:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	239b      	movs	r3, #155	; 0x9b
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	2102      	movs	r1, #2
 800740e:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8007410:	1dbb      	adds	r3, r7, #6
 8007412:	881a      	ldrh	r2, [r3, #0]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007418:	1dbb      	adds	r3, r7, #6
 800741a:	881a      	ldrh	r2, [r3, #0]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007420:	1dbb      	adds	r3, r7, #6
 8007422:	881b      	ldrh	r3, [r3, #0]
 8007424:	68ba      	ldr	r2, [r7, #8]
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	2100      	movs	r1, #0
 800742a:	f000 fce3 	bl	8007df4 <USBD_LL_Transmit>

  return USBD_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	0018      	movs	r0, r3
 8007432:	46bd      	mov	sp, r7
 8007434:	b004      	add	sp, #16
 8007436:	bd80      	pop	{r7, pc}

08007438 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	1dbb      	adds	r3, r7, #6
 8007444:	801a      	strh	r2, [r3, #0]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007446:	1dbb      	adds	r3, r7, #6
 8007448:	881b      	ldrh	r3, [r3, #0]
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	2100      	movs	r1, #0
 8007450:	f000 fcd0 	bl	8007df4 <USBD_LL_Transmit>

  return USBD_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	0018      	movs	r0, r3
 8007458:	46bd      	mov	sp, r7
 800745a:	b004      	add	sp, #16
 800745c:	bd80      	pop	{r7, pc}

0800745e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b084      	sub	sp, #16
 8007462:	af00      	add	r7, sp, #0
 8007464:	60f8      	str	r0, [r7, #12]
 8007466:	60b9      	str	r1, [r7, #8]
 8007468:	1dbb      	adds	r3, r7, #6
 800746a:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	239b      	movs	r3, #155	; 0x9b
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	2103      	movs	r1, #3
 8007474:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8007476:	1dbb      	adds	r3, r7, #6
 8007478:	8819      	ldrh	r1, [r3, #0]
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	23a4      	movs	r3, #164	; 0xa4
 800747e:	005b      	lsls	r3, r3, #1
 8007480:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8007482:	1dbb      	adds	r3, r7, #6
 8007484:	8819      	ldrh	r1, [r3, #0]
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	23a6      	movs	r3, #166	; 0xa6
 800748a:	005b      	lsls	r3, r3, #1
 800748c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800748e:	1dbb      	adds	r3, r7, #6
 8007490:	881b      	ldrh	r3, [r3, #0]
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	2100      	movs	r1, #0
 8007498:	f000 fce4 	bl	8007e64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	0018      	movs	r0, r3
 80074a0:	46bd      	mov	sp, r7
 80074a2:	b004      	add	sp, #16
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b084      	sub	sp, #16
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	60f8      	str	r0, [r7, #12]
 80074ae:	60b9      	str	r1, [r7, #8]
 80074b0:	1dbb      	adds	r3, r7, #6
 80074b2:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80074b4:	1dbb      	adds	r3, r7, #6
 80074b6:	881b      	ldrh	r3, [r3, #0]
 80074b8:	68ba      	ldr	r2, [r7, #8]
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	2100      	movs	r1, #0
 80074be:	f000 fcd1 	bl	8007e64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	0018      	movs	r0, r3
 80074c6:	46bd      	mov	sp, r7
 80074c8:	b004      	add	sp, #16
 80074ca:	bd80      	pop	{r7, pc}

080074cc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	239b      	movs	r3, #155	; 0x9b
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	2104      	movs	r1, #4
 80074dc:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	2300      	movs	r3, #0
 80074e2:	2200      	movs	r2, #0
 80074e4:	2100      	movs	r1, #0
 80074e6:	f000 fc85 	bl	8007df4 <USBD_LL_Transmit>

  return USBD_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	0018      	movs	r0, r3
 80074ee:	46bd      	mov	sp, r7
 80074f0:	b002      	add	sp, #8
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	239b      	movs	r3, #155	; 0x9b
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	2105      	movs	r1, #5
 8007504:	50d1      	str	r1, [r2, r3]

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	2300      	movs	r3, #0
 800750a:	2200      	movs	r2, #0
 800750c:	2100      	movs	r1, #0
 800750e:	f000 fca9 	bl	8007e64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	0018      	movs	r0, r3
 8007516:	46bd      	mov	sp, r7
 8007518:	b002      	add	sp, #8
 800751a:	bd80      	pop	{r7, pc}

0800751c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007520:	4914      	ldr	r1, [pc, #80]	; (8007574 <MX_USB_DEVICE_Init+0x58>)
 8007522:	4b15      	ldr	r3, [pc, #84]	; (8007578 <MX_USB_DEVICE_Init+0x5c>)
 8007524:	2200      	movs	r2, #0
 8007526:	0018      	movs	r0, r3
 8007528:	f7fe fe89 	bl	800623e <USBD_Init>
 800752c:	1e03      	subs	r3, r0, #0
 800752e:	d001      	beq.n	8007534 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007530:	f7f9 f866 	bl	8000600 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007534:	4a11      	ldr	r2, [pc, #68]	; (800757c <MX_USB_DEVICE_Init+0x60>)
 8007536:	4b10      	ldr	r3, [pc, #64]	; (8007578 <MX_USB_DEVICE_Init+0x5c>)
 8007538:	0011      	movs	r1, r2
 800753a:	0018      	movs	r0, r3
 800753c:	f7fe feb0 	bl	80062a0 <USBD_RegisterClass>
 8007540:	1e03      	subs	r3, r0, #0
 8007542:	d001      	beq.n	8007548 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8007544:	f7f9 f85c 	bl	8000600 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007548:	4a0d      	ldr	r2, [pc, #52]	; (8007580 <MX_USB_DEVICE_Init+0x64>)
 800754a:	4b0b      	ldr	r3, [pc, #44]	; (8007578 <MX_USB_DEVICE_Init+0x5c>)
 800754c:	0011      	movs	r1, r2
 800754e:	0018      	movs	r0, r3
 8007550:	f7fe fdc4 	bl	80060dc <USBD_CDC_RegisterInterface>
 8007554:	1e03      	subs	r3, r0, #0
 8007556:	d001      	beq.n	800755c <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8007558:	f7f9 f852 	bl	8000600 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800755c:	4b06      	ldr	r3, [pc, #24]	; (8007578 <MX_USB_DEVICE_Init+0x5c>)
 800755e:	0018      	movs	r0, r3
 8007560:	f7fe febf 	bl	80062e2 <USBD_Start>
 8007564:	1e03      	subs	r3, r0, #0
 8007566:	d001      	beq.n	800756c <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8007568:	f7f9 f84a 	bl	8000600 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800756c:	46c0      	nop			; (mov r8, r8)
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	46c0      	nop			; (mov r8, r8)
 8007574:	20000130 	.word	0x20000130
 8007578:	2000043c 	.word	0x2000043c
 800757c:	2000001c 	.word	0x2000001c
 8007580:	20000120 	.word	0x20000120

08007584 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007588:	4907      	ldr	r1, [pc, #28]	; (80075a8 <CDC_Init_FS+0x24>)
 800758a:	4b08      	ldr	r3, [pc, #32]	; (80075ac <CDC_Init_FS+0x28>)
 800758c:	2200      	movs	r2, #0
 800758e:	0018      	movs	r0, r3
 8007590:	f7fe fdc0 	bl	8006114 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007594:	4a06      	ldr	r2, [pc, #24]	; (80075b0 <CDC_Init_FS+0x2c>)
 8007596:	4b05      	ldr	r3, [pc, #20]	; (80075ac <CDC_Init_FS+0x28>)
 8007598:	0011      	movs	r1, r2
 800759a:	0018      	movs	r0, r3
 800759c:	f7fe fdd6 	bl	800614c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80075a0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80075a2:	0018      	movs	r0, r3
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	20000ac0 	.word	0x20000ac0
 80075ac:	2000043c 	.word	0x2000043c
 80075b0:	200006d8 	.word	0x200006d8

080075b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80075b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80075ba:	0018      	movs	r0, r3
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6039      	str	r1, [r7, #0]
 80075c8:	0011      	movs	r1, r2
 80075ca:	1dfb      	adds	r3, r7, #7
 80075cc:	1c02      	adds	r2, r0, #0
 80075ce:	701a      	strb	r2, [r3, #0]
 80075d0:	1d3b      	adds	r3, r7, #4
 80075d2:	1c0a      	adds	r2, r1, #0
 80075d4:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80075d6:	1dfb      	adds	r3, r7, #7
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	2b23      	cmp	r3, #35	; 0x23
 80075dc:	d804      	bhi.n	80075e8 <CDC_Control_FS+0x28>
 80075de:	009a      	lsls	r2, r3, #2
 80075e0:	4b04      	ldr	r3, [pc, #16]	; (80075f4 <CDC_Control_FS+0x34>)
 80075e2:	18d3      	adds	r3, r2, r3
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80075e8:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 80075ea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80075ec:	0018      	movs	r0, r3
 80075ee:	46bd      	mov	sp, r7
 80075f0:	b002      	add	sp, #8
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	080080d8 	.word	0x080080d8

080075f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	4b0a      	ldr	r3, [pc, #40]	; (8007630 <CDC_Receive_FS+0x38>)
 8007606:	0011      	movs	r1, r2
 8007608:	0018      	movs	r0, r3
 800760a:	f7fe fd9f 	bl	800614c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800760e:	4b08      	ldr	r3, [pc, #32]	; (8007630 <CDC_Receive_FS+0x38>)
 8007610:	0018      	movs	r0, r3
 8007612:	f7fe fde6 	bl	80061e2 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallBack(Buf, Len[0]);
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	0011      	movs	r1, r2
 800761e:	0018      	movs	r0, r3
 8007620:	f7f8 fdfe 	bl	8000220 <CDC_ReceiveCallBack>
  return (USBD_OK);
 8007624:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007626:	0018      	movs	r0, r3
 8007628:	46bd      	mov	sp, r7
 800762a:	b002      	add	sp, #8
 800762c:	bd80      	pop	{r7, pc}
 800762e:	46c0      	nop			; (mov r8, r8)
 8007630:	2000043c 	.word	0x2000043c

08007634 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007634:	b5b0      	push	{r4, r5, r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	000a      	movs	r2, r1
 800763e:	1cbb      	adds	r3, r7, #2
 8007640:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8007642:	230f      	movs	r3, #15
 8007644:	18fb      	adds	r3, r7, r3
 8007646:	2200      	movs	r2, #0
 8007648:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800764a:	4a11      	ldr	r2, [pc, #68]	; (8007690 <CDC_Transmit_FS+0x5c>)
 800764c:	23a4      	movs	r3, #164	; 0xa4
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	58d3      	ldr	r3, [r2, r3]
 8007652:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007654:	68ba      	ldr	r2, [r7, #8]
 8007656:	2385      	movs	r3, #133	; 0x85
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	58d3      	ldr	r3, [r2, r3]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d001      	beq.n	8007664 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8007660:	2301      	movs	r3, #1
 8007662:	e010      	b.n	8007686 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007664:	1cbb      	adds	r3, r7, #2
 8007666:	881a      	ldrh	r2, [r3, #0]
 8007668:	6879      	ldr	r1, [r7, #4]
 800766a:	4b09      	ldr	r3, [pc, #36]	; (8007690 <CDC_Transmit_FS+0x5c>)
 800766c:	0018      	movs	r0, r3
 800766e:	f7fe fd51 	bl	8006114 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007672:	250f      	movs	r5, #15
 8007674:	197c      	adds	r4, r7, r5
 8007676:	4b06      	ldr	r3, [pc, #24]	; (8007690 <CDC_Transmit_FS+0x5c>)
 8007678:	0018      	movs	r0, r3
 800767a:	f7fe fd7b 	bl	8006174 <USBD_CDC_TransmitPacket>
 800767e:	0003      	movs	r3, r0
 8007680:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 8007682:	197b      	adds	r3, r7, r5
 8007684:	781b      	ldrb	r3, [r3, #0]
}
 8007686:	0018      	movs	r0, r3
 8007688:	46bd      	mov	sp, r7
 800768a:	b004      	add	sp, #16
 800768c:	bdb0      	pop	{r4, r5, r7, pc}
 800768e:	46c0      	nop			; (mov r8, r8)
 8007690:	2000043c 	.word	0x2000043c

08007694 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	0002      	movs	r2, r0
 800769c:	6039      	str	r1, [r7, #0]
 800769e:	1dfb      	adds	r3, r7, #7
 80076a0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	2212      	movs	r2, #18
 80076a6:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80076a8:	4b02      	ldr	r3, [pc, #8]	; (80076b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80076aa:	0018      	movs	r0, r3
 80076ac:	46bd      	mov	sp, r7
 80076ae:	b002      	add	sp, #8
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	46c0      	nop			; (mov r8, r8)
 80076b4:	2000014c 	.word	0x2000014c

080076b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	0002      	movs	r2, r0
 80076c0:	6039      	str	r1, [r7, #0]
 80076c2:	1dfb      	adds	r3, r7, #7
 80076c4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	2204      	movs	r2, #4
 80076ca:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80076cc:	4b02      	ldr	r3, [pc, #8]	; (80076d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80076ce:	0018      	movs	r0, r3
 80076d0:	46bd      	mov	sp, r7
 80076d2:	b002      	add	sp, #8
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	46c0      	nop			; (mov r8, r8)
 80076d8:	20000160 	.word	0x20000160

080076dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	0002      	movs	r2, r0
 80076e4:	6039      	str	r1, [r7, #0]
 80076e6:	1dfb      	adds	r3, r7, #7
 80076e8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80076ea:	1dfb      	adds	r3, r7, #7
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d106      	bne.n	8007700 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80076f2:	683a      	ldr	r2, [r7, #0]
 80076f4:	4908      	ldr	r1, [pc, #32]	; (8007718 <USBD_FS_ProductStrDescriptor+0x3c>)
 80076f6:	4b09      	ldr	r3, [pc, #36]	; (800771c <USBD_FS_ProductStrDescriptor+0x40>)
 80076f8:	0018      	movs	r0, r3
 80076fa:	f7ff fe11 	bl	8007320 <USBD_GetString>
 80076fe:	e005      	b.n	800770c <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007700:	683a      	ldr	r2, [r7, #0]
 8007702:	4905      	ldr	r1, [pc, #20]	; (8007718 <USBD_FS_ProductStrDescriptor+0x3c>)
 8007704:	4b05      	ldr	r3, [pc, #20]	; (800771c <USBD_FS_ProductStrDescriptor+0x40>)
 8007706:	0018      	movs	r0, r3
 8007708:	f7ff fe0a 	bl	8007320 <USBD_GetString>
  }
  return USBD_StrDesc;
 800770c:	4b02      	ldr	r3, [pc, #8]	; (8007718 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800770e:	0018      	movs	r0, r3
 8007710:	46bd      	mov	sp, r7
 8007712:	b002      	add	sp, #8
 8007714:	bd80      	pop	{r7, pc}
 8007716:	46c0      	nop			; (mov r8, r8)
 8007718:	20000ea8 	.word	0x20000ea8
 800771c:	08008014 	.word	0x08008014

08007720 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	0002      	movs	r2, r0
 8007728:	6039      	str	r1, [r7, #0]
 800772a:	1dfb      	adds	r3, r7, #7
 800772c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800772e:	683a      	ldr	r2, [r7, #0]
 8007730:	4904      	ldr	r1, [pc, #16]	; (8007744 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007732:	4b05      	ldr	r3, [pc, #20]	; (8007748 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8007734:	0018      	movs	r0, r3
 8007736:	f7ff fdf3 	bl	8007320 <USBD_GetString>
  return USBD_StrDesc;
 800773a:	4b02      	ldr	r3, [pc, #8]	; (8007744 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800773c:	0018      	movs	r0, r3
 800773e:	46bd      	mov	sp, r7
 8007740:	b002      	add	sp, #8
 8007742:	bd80      	pop	{r7, pc}
 8007744:	20000ea8 	.word	0x20000ea8
 8007748:	0800802c 	.word	0x0800802c

0800774c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	0002      	movs	r2, r0
 8007754:	6039      	str	r1, [r7, #0]
 8007756:	1dfb      	adds	r3, r7, #7
 8007758:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	221a      	movs	r2, #26
 800775e:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007760:	f000 f84c 	bl	80077fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007764:	4b02      	ldr	r3, [pc, #8]	; (8007770 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8007766:	0018      	movs	r0, r3
 8007768:	46bd      	mov	sp, r7
 800776a:	b002      	add	sp, #8
 800776c:	bd80      	pop	{r7, pc}
 800776e:	46c0      	nop			; (mov r8, r8)
 8007770:	20000164 	.word	0x20000164

08007774 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	0002      	movs	r2, r0
 800777c:	6039      	str	r1, [r7, #0]
 800777e:	1dfb      	adds	r3, r7, #7
 8007780:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8007782:	1dfb      	adds	r3, r7, #7
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d106      	bne.n	8007798 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	4908      	ldr	r1, [pc, #32]	; (80077b0 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800778e:	4b09      	ldr	r3, [pc, #36]	; (80077b4 <USBD_FS_ConfigStrDescriptor+0x40>)
 8007790:	0018      	movs	r0, r3
 8007792:	f7ff fdc5 	bl	8007320 <USBD_GetString>
 8007796:	e005      	b.n	80077a4 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007798:	683a      	ldr	r2, [r7, #0]
 800779a:	4905      	ldr	r1, [pc, #20]	; (80077b0 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800779c:	4b05      	ldr	r3, [pc, #20]	; (80077b4 <USBD_FS_ConfigStrDescriptor+0x40>)
 800779e:	0018      	movs	r0, r3
 80077a0:	f7ff fdbe 	bl	8007320 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077a4:	4b02      	ldr	r3, [pc, #8]	; (80077b0 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 80077a6:	0018      	movs	r0, r3
 80077a8:	46bd      	mov	sp, r7
 80077aa:	b002      	add	sp, #8
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	46c0      	nop			; (mov r8, r8)
 80077b0:	20000ea8 	.word	0x20000ea8
 80077b4:	08008040 	.word	0x08008040

080077b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	0002      	movs	r2, r0
 80077c0:	6039      	str	r1, [r7, #0]
 80077c2:	1dfb      	adds	r3, r7, #7
 80077c4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80077c6:	1dfb      	adds	r3, r7, #7
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d106      	bne.n	80077dc <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077ce:	683a      	ldr	r2, [r7, #0]
 80077d0:	4908      	ldr	r1, [pc, #32]	; (80077f4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80077d2:	4b09      	ldr	r3, [pc, #36]	; (80077f8 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80077d4:	0018      	movs	r0, r3
 80077d6:	f7ff fda3 	bl	8007320 <USBD_GetString>
 80077da:	e005      	b.n	80077e8 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	4905      	ldr	r1, [pc, #20]	; (80077f4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80077e0:	4b05      	ldr	r3, [pc, #20]	; (80077f8 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80077e2:	0018      	movs	r0, r3
 80077e4:	f7ff fd9c 	bl	8007320 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077e8:	4b02      	ldr	r3, [pc, #8]	; (80077f4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 80077ea:	0018      	movs	r0, r3
 80077ec:	46bd      	mov	sp, r7
 80077ee:	b002      	add	sp, #8
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	46c0      	nop			; (mov r8, r8)
 80077f4:	20000ea8 	.word	0x20000ea8
 80077f8:	0800804c 	.word	0x0800804c

080077fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007802:	4b10      	ldr	r3, [pc, #64]	; (8007844 <Get_SerialNum+0x48>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007808:	4b0f      	ldr	r3, [pc, #60]	; (8007848 <Get_SerialNum+0x4c>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800780e:	4b0f      	ldr	r3, [pc, #60]	; (800784c <Get_SerialNum+0x50>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	18d3      	adds	r3, r2, r3
 800781a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00b      	beq.n	800783a <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007822:	490b      	ldr	r1, [pc, #44]	; (8007850 <Get_SerialNum+0x54>)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2208      	movs	r2, #8
 8007828:	0018      	movs	r0, r3
 800782a:	f000 f815 	bl	8007858 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800782e:	4909      	ldr	r1, [pc, #36]	; (8007854 <Get_SerialNum+0x58>)
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	2204      	movs	r2, #4
 8007834:	0018      	movs	r0, r3
 8007836:	f000 f80f 	bl	8007858 <IntToUnicode>
  }
}
 800783a:	46c0      	nop			; (mov r8, r8)
 800783c:	46bd      	mov	sp, r7
 800783e:	b004      	add	sp, #16
 8007840:	bd80      	pop	{r7, pc}
 8007842:	46c0      	nop			; (mov r8, r8)
 8007844:	1ff80050 	.word	0x1ff80050
 8007848:	1ff80054 	.word	0x1ff80054
 800784c:	1ff80058 	.word	0x1ff80058
 8007850:	20000166 	.word	0x20000166
 8007854:	20000176 	.word	0x20000176

08007858 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b086      	sub	sp, #24
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	1dfb      	adds	r3, r7, #7
 8007864:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8007866:	2117      	movs	r1, #23
 8007868:	187b      	adds	r3, r7, r1
 800786a:	2200      	movs	r2, #0
 800786c:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800786e:	187b      	adds	r3, r7, r1
 8007870:	2200      	movs	r2, #0
 8007872:	701a      	strb	r2, [r3, #0]
 8007874:	e02f      	b.n	80078d6 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	0f1b      	lsrs	r3, r3, #28
 800787a:	2b09      	cmp	r3, #9
 800787c:	d80d      	bhi.n	800789a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	0f1b      	lsrs	r3, r3, #28
 8007882:	b2da      	uxtb	r2, r3
 8007884:	2317      	movs	r3, #23
 8007886:	18fb      	adds	r3, r7, r3
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	005b      	lsls	r3, r3, #1
 800788c:	0019      	movs	r1, r3
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	185b      	adds	r3, r3, r1
 8007892:	3230      	adds	r2, #48	; 0x30
 8007894:	b2d2      	uxtb	r2, r2
 8007896:	701a      	strb	r2, [r3, #0]
 8007898:	e00c      	b.n	80078b4 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	0f1b      	lsrs	r3, r3, #28
 800789e:	b2da      	uxtb	r2, r3
 80078a0:	2317      	movs	r3, #23
 80078a2:	18fb      	adds	r3, r7, r3
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	005b      	lsls	r3, r3, #1
 80078a8:	0019      	movs	r1, r3
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	185b      	adds	r3, r3, r1
 80078ae:	3237      	adds	r2, #55	; 0x37
 80078b0:	b2d2      	uxtb	r2, r2
 80078b2:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	011b      	lsls	r3, r3, #4
 80078b8:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80078ba:	2117      	movs	r1, #23
 80078bc:	187b      	adds	r3, r7, r1
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	005b      	lsls	r3, r3, #1
 80078c2:	3301      	adds	r3, #1
 80078c4:	68ba      	ldr	r2, [r7, #8]
 80078c6:	18d3      	adds	r3, r2, r3
 80078c8:	2200      	movs	r2, #0
 80078ca:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80078cc:	187b      	adds	r3, r7, r1
 80078ce:	781a      	ldrb	r2, [r3, #0]
 80078d0:	187b      	adds	r3, r7, r1
 80078d2:	3201      	adds	r2, #1
 80078d4:	701a      	strb	r2, [r3, #0]
 80078d6:	2317      	movs	r3, #23
 80078d8:	18fa      	adds	r2, r7, r3
 80078da:	1dfb      	adds	r3, r7, #7
 80078dc:	7812      	ldrb	r2, [r2, #0]
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d3c8      	bcc.n	8007876 <IntToUnicode+0x1e>
  }
}
 80078e4:	46c0      	nop			; (mov r8, r8)
 80078e6:	46bd      	mov	sp, r7
 80078e8:	b006      	add	sp, #24
 80078ea:	bd80      	pop	{r7, pc}

080078ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a0a      	ldr	r2, [pc, #40]	; (8007924 <HAL_PCD_MspInit+0x38>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d10e      	bne.n	800791c <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80078fe:	4b0a      	ldr	r3, [pc, #40]	; (8007928 <HAL_PCD_MspInit+0x3c>)
 8007900:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007902:	4b09      	ldr	r3, [pc, #36]	; (8007928 <HAL_PCD_MspInit+0x3c>)
 8007904:	2180      	movs	r1, #128	; 0x80
 8007906:	0409      	lsls	r1, r1, #16
 8007908:	430a      	orrs	r2, r1
 800790a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800790c:	2200      	movs	r2, #0
 800790e:	2100      	movs	r1, #0
 8007910:	201f      	movs	r0, #31
 8007912:	f7f9 f8c1 	bl	8000a98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8007916:	201f      	movs	r0, #31
 8007918:	f7f9 f8d3 	bl	8000ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800791c:	46c0      	nop			; (mov r8, r8)
 800791e:	46bd      	mov	sp, r7
 8007920:	b002      	add	sp, #8
 8007922:	bd80      	pop	{r7, pc}
 8007924:	40005c00 	.word	0x40005c00
 8007928:	40021000 	.word	0x40021000

0800792c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	23bc      	movs	r3, #188	; 0xbc
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	58d2      	ldr	r2, [r2, r3]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	21ac      	movs	r1, #172	; 0xac
 8007940:	0089      	lsls	r1, r1, #2
 8007942:	468c      	mov	ip, r1
 8007944:	4463      	add	r3, ip
 8007946:	0019      	movs	r1, r3
 8007948:	0010      	movs	r0, r2
 800794a:	f7fe fd1f 	bl	800638c <USBD_LL_SetupStage>
}
 800794e:	46c0      	nop			; (mov r8, r8)
 8007950:	46bd      	mov	sp, r7
 8007952:	b002      	add	sp, #8
 8007954:	bd80      	pop	{r7, pc}

08007956 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007956:	b590      	push	{r4, r7, lr}
 8007958:	b083      	sub	sp, #12
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
 800795e:	000a      	movs	r2, r1
 8007960:	1cfb      	adds	r3, r7, #3
 8007962:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	23bc      	movs	r3, #188	; 0xbc
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	58d4      	ldr	r4, [r2, r3]
 800796c:	1cfb      	adds	r3, r7, #3
 800796e:	781a      	ldrb	r2, [r3, #0]
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	23be      	movs	r3, #190	; 0xbe
 8007974:	0059      	lsls	r1, r3, #1
 8007976:	0013      	movs	r3, r2
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	189b      	adds	r3, r3, r2
 800797c:	00db      	lsls	r3, r3, #3
 800797e:	18c3      	adds	r3, r0, r3
 8007980:	185b      	adds	r3, r3, r1
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	1cfb      	adds	r3, r7, #3
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	0019      	movs	r1, r3
 800798a:	0020      	movs	r0, r4
 800798c:	f7fe fd5a 	bl	8006444 <USBD_LL_DataOutStage>
}
 8007990:	46c0      	nop			; (mov r8, r8)
 8007992:	46bd      	mov	sp, r7
 8007994:	b003      	add	sp, #12
 8007996:	bd90      	pop	{r4, r7, pc}

08007998 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	000a      	movs	r2, r1
 80079a2:	1cfb      	adds	r3, r7, #3
 80079a4:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	23bc      	movs	r3, #188	; 0xbc
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	58d0      	ldr	r0, [r2, r3]
 80079ae:	1cfb      	adds	r3, r7, #3
 80079b0:	781a      	ldrb	r2, [r3, #0]
 80079b2:	6879      	ldr	r1, [r7, #4]
 80079b4:	0013      	movs	r3, r2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	189b      	adds	r3, r3, r2
 80079ba:	00db      	lsls	r3, r3, #3
 80079bc:	18cb      	adds	r3, r1, r3
 80079be:	333c      	adds	r3, #60	; 0x3c
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	1cfb      	adds	r3, r7, #3
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	0019      	movs	r1, r3
 80079c8:	f7fe fdbe 	bl	8006548 <USBD_LL_DataInStage>
}
 80079cc:	46c0      	nop			; (mov r8, r8)
 80079ce:	46bd      	mov	sp, r7
 80079d0:	b002      	add	sp, #8
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	23bc      	movs	r3, #188	; 0xbc
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	58d3      	ldr	r3, [r2, r3]
 80079e4:	0018      	movs	r0, r3
 80079e6:	f7fe feef 	bl	80067c8 <USBD_LL_SOF>
}
 80079ea:	46c0      	nop			; (mov r8, r8)
 80079ec:	46bd      	mov	sp, r7
 80079ee:	b002      	add	sp, #8
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b084      	sub	sp, #16
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80079fa:	230f      	movs	r3, #15
 80079fc:	18fb      	adds	r3, r7, r3
 80079fe:	2201      	movs	r2, #1
 8007a00:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d001      	beq.n	8007a0e <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8007a0a:	f7f8 fdf9 	bl	8000600 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	23bc      	movs	r3, #188	; 0xbc
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	58d2      	ldr	r2, [r2, r3]
 8007a16:	230f      	movs	r3, #15
 8007a18:	18fb      	adds	r3, r7, r3
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	0019      	movs	r1, r3
 8007a1e:	0010      	movs	r0, r2
 8007a20:	f7fe fe97 	bl	8006752 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	23bc      	movs	r3, #188	; 0xbc
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	58d3      	ldr	r3, [r2, r3]
 8007a2c:	0018      	movs	r0, r3
 8007a2e:	f7fe fe48 	bl	80066c2 <USBD_LL_Reset>
}
 8007a32:	46c0      	nop			; (mov r8, r8)
 8007a34:	46bd      	mov	sp, r7
 8007a36:	b004      	add	sp, #16
 8007a38:	bd80      	pop	{r7, pc}
	...

08007a3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	23bc      	movs	r3, #188	; 0xbc
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	58d3      	ldr	r3, [r2, r3]
 8007a4c:	0018      	movs	r0, r3
 8007a4e:	f7fe fe91 	bl	8006774 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d005      	beq.n	8007a66 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a5a:	4b05      	ldr	r3, [pc, #20]	; (8007a70 <HAL_PCD_SuspendCallback+0x34>)
 8007a5c:	691a      	ldr	r2, [r3, #16]
 8007a5e:	4b04      	ldr	r3, [pc, #16]	; (8007a70 <HAL_PCD_SuspendCallback+0x34>)
 8007a60:	2106      	movs	r1, #6
 8007a62:	430a      	orrs	r2, r1
 8007a64:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8007a66:	46c0      	nop			; (mov r8, r8)
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	b002      	add	sp, #8
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	46c0      	nop			; (mov r8, r8)
 8007a70:	e000ed00 	.word	0xe000ed00

08007a74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d007      	beq.n	8007a94 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a84:	4b09      	ldr	r3, [pc, #36]	; (8007aac <HAL_PCD_ResumeCallback+0x38>)
 8007a86:	691a      	ldr	r2, [r3, #16]
 8007a88:	4b08      	ldr	r3, [pc, #32]	; (8007aac <HAL_PCD_ResumeCallback+0x38>)
 8007a8a:	2106      	movs	r1, #6
 8007a8c:	438a      	bics	r2, r1
 8007a8e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8007a90:	f000 fa4a 	bl	8007f28 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	23bc      	movs	r3, #188	; 0xbc
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	58d3      	ldr	r3, [r2, r3]
 8007a9c:	0018      	movs	r0, r3
 8007a9e:	f7fe fe81 	bl	80067a4 <USBD_LL_Resume>
}
 8007aa2:	46c0      	nop			; (mov r8, r8)
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	b002      	add	sp, #8
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	46c0      	nop			; (mov r8, r8)
 8007aac:	e000ed00 	.word	0xe000ed00

08007ab0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007ab8:	4a2d      	ldr	r2, [pc, #180]	; (8007b70 <USBD_LL_Init+0xc0>)
 8007aba:	23bc      	movs	r3, #188	; 0xbc
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	6879      	ldr	r1, [r7, #4]
 8007ac0:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	23a6      	movs	r3, #166	; 0xa6
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	4929      	ldr	r1, [pc, #164]	; (8007b70 <USBD_LL_Init+0xc0>)
 8007aca:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8007acc:	4b28      	ldr	r3, [pc, #160]	; (8007b70 <USBD_LL_Init+0xc0>)
 8007ace:	4a29      	ldr	r2, [pc, #164]	; (8007b74 <USBD_LL_Init+0xc4>)
 8007ad0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007ad2:	4b27      	ldr	r3, [pc, #156]	; (8007b70 <USBD_LL_Init+0xc0>)
 8007ad4:	2208      	movs	r2, #8
 8007ad6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007ad8:	4b25      	ldr	r3, [pc, #148]	; (8007b70 <USBD_LL_Init+0xc0>)
 8007ada:	2202      	movs	r2, #2
 8007adc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007ade:	4b24      	ldr	r3, [pc, #144]	; (8007b70 <USBD_LL_Init+0xc0>)
 8007ae0:	2202      	movs	r2, #2
 8007ae2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007ae4:	4b22      	ldr	r3, [pc, #136]	; (8007b70 <USBD_LL_Init+0xc0>)
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007aea:	4b21      	ldr	r3, [pc, #132]	; (8007b70 <USBD_LL_Init+0xc0>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007af0:	4b1f      	ldr	r3, [pc, #124]	; (8007b70 <USBD_LL_Init+0xc0>)
 8007af2:	2200      	movs	r2, #0
 8007af4:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007af6:	4b1e      	ldr	r3, [pc, #120]	; (8007b70 <USBD_LL_Init+0xc0>)
 8007af8:	0018      	movs	r0, r3
 8007afa:	f7f9 f993 	bl	8000e24 <HAL_PCD_Init>
 8007afe:	1e03      	subs	r3, r0, #0
 8007b00:	d001      	beq.n	8007b06 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8007b02:	f7f8 fd7d 	bl	8000600 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	23a6      	movs	r3, #166	; 0xa6
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	58d0      	ldr	r0, [r2, r3]
 8007b0e:	2318      	movs	r3, #24
 8007b10:	2200      	movs	r2, #0
 8007b12:	2100      	movs	r1, #0
 8007b14:	f7fa fda4 	bl	8002660 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	23a6      	movs	r3, #166	; 0xa6
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	58d0      	ldr	r0, [r2, r3]
 8007b20:	2358      	movs	r3, #88	; 0x58
 8007b22:	2200      	movs	r2, #0
 8007b24:	2180      	movs	r1, #128	; 0x80
 8007b26:	f7fa fd9b 	bl	8002660 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	23a6      	movs	r3, #166	; 0xa6
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	58d0      	ldr	r0, [r2, r3]
 8007b32:	23c0      	movs	r3, #192	; 0xc0
 8007b34:	2200      	movs	r2, #0
 8007b36:	2181      	movs	r1, #129	; 0x81
 8007b38:	f7fa fd92 	bl	8002660 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	23a6      	movs	r3, #166	; 0xa6
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	58d0      	ldr	r0, [r2, r3]
 8007b44:	2388      	movs	r3, #136	; 0x88
 8007b46:	005b      	lsls	r3, r3, #1
 8007b48:	2200      	movs	r2, #0
 8007b4a:	2101      	movs	r1, #1
 8007b4c:	f7fa fd88 	bl	8002660 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	23a6      	movs	r3, #166	; 0xa6
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	58d0      	ldr	r0, [r2, r3]
 8007b58:	2380      	movs	r3, #128	; 0x80
 8007b5a:	005b      	lsls	r3, r3, #1
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	2182      	movs	r1, #130	; 0x82
 8007b60:	f7fa fd7e 	bl	8002660 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	0018      	movs	r0, r3
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	b002      	add	sp, #8
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	46c0      	nop			; (mov r8, r8)
 8007b70:	200010a8 	.word	0x200010a8
 8007b74:	40005c00 	.word	0x40005c00

08007b78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b80:	210f      	movs	r1, #15
 8007b82:	187b      	adds	r3, r7, r1
 8007b84:	2200      	movs	r2, #0
 8007b86:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b88:	260e      	movs	r6, #14
 8007b8a:	19bb      	adds	r3, r7, r6
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	23a6      	movs	r3, #166	; 0xa6
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	58d3      	ldr	r3, [r2, r3]
 8007b98:	000d      	movs	r5, r1
 8007b9a:	187c      	adds	r4, r7, r1
 8007b9c:	0018      	movs	r0, r3
 8007b9e:	f7f9 fa51 	bl	8001044 <HAL_PCD_Start>
 8007ba2:	0003      	movs	r3, r0
 8007ba4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ba6:	19bc      	adds	r4, r7, r6
 8007ba8:	0029      	movs	r1, r5
 8007baa:	187b      	adds	r3, r7, r1
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	0018      	movs	r0, r3
 8007bb0:	f000 f9c1 	bl	8007f36 <USBD_Get_USB_Status>
 8007bb4:	0003      	movs	r3, r0
 8007bb6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007bb8:	19bb      	adds	r3, r7, r6
 8007bba:	781b      	ldrb	r3, [r3, #0]
}
 8007bbc:	0018      	movs	r0, r3
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	b005      	add	sp, #20
 8007bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007bc4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	000c      	movs	r4, r1
 8007bce:	0010      	movs	r0, r2
 8007bd0:	0019      	movs	r1, r3
 8007bd2:	1cfb      	adds	r3, r7, #3
 8007bd4:	1c22      	adds	r2, r4, #0
 8007bd6:	701a      	strb	r2, [r3, #0]
 8007bd8:	1cbb      	adds	r3, r7, #2
 8007bda:	1c02      	adds	r2, r0, #0
 8007bdc:	701a      	strb	r2, [r3, #0]
 8007bde:	003b      	movs	r3, r7
 8007be0:	1c0a      	adds	r2, r1, #0
 8007be2:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007be4:	260f      	movs	r6, #15
 8007be6:	19bb      	adds	r3, r7, r6
 8007be8:	2200      	movs	r2, #0
 8007bea:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bec:	250e      	movs	r5, #14
 8007bee:	197b      	adds	r3, r7, r5
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	23a6      	movs	r3, #166	; 0xa6
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	58d0      	ldr	r0, [r2, r3]
 8007bfc:	19bc      	adds	r4, r7, r6
 8007bfe:	1cbb      	adds	r3, r7, #2
 8007c00:	781d      	ldrb	r5, [r3, #0]
 8007c02:	003b      	movs	r3, r7
 8007c04:	881a      	ldrh	r2, [r3, #0]
 8007c06:	1cfb      	adds	r3, r7, #3
 8007c08:	7819      	ldrb	r1, [r3, #0]
 8007c0a:	002b      	movs	r3, r5
 8007c0c:	f7f9 fbe7 	bl	80013de <HAL_PCD_EP_Open>
 8007c10:	0003      	movs	r3, r0
 8007c12:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c14:	250e      	movs	r5, #14
 8007c16:	197c      	adds	r4, r7, r5
 8007c18:	19bb      	adds	r3, r7, r6
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	0018      	movs	r0, r3
 8007c1e:	f000 f98a 	bl	8007f36 <USBD_Get_USB_Status>
 8007c22:	0003      	movs	r3, r0
 8007c24:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007c26:	197b      	adds	r3, r7, r5
 8007c28:	781b      	ldrb	r3, [r3, #0]
}
 8007c2a:	0018      	movs	r0, r3
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	b005      	add	sp, #20
 8007c30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007c32 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c34:	b085      	sub	sp, #20
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
 8007c3a:	000a      	movs	r2, r1
 8007c3c:	1cfb      	adds	r3, r7, #3
 8007c3e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c40:	210f      	movs	r1, #15
 8007c42:	187b      	adds	r3, r7, r1
 8007c44:	2200      	movs	r2, #0
 8007c46:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c48:	260e      	movs	r6, #14
 8007c4a:	19bb      	adds	r3, r7, r6
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	23a6      	movs	r3, #166	; 0xa6
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	58d2      	ldr	r2, [r2, r3]
 8007c58:	000d      	movs	r5, r1
 8007c5a:	187c      	adds	r4, r7, r1
 8007c5c:	1cfb      	adds	r3, r7, #3
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	0019      	movs	r1, r3
 8007c62:	0010      	movs	r0, r2
 8007c64:	f7f9 fc33 	bl	80014ce <HAL_PCD_EP_Close>
 8007c68:	0003      	movs	r3, r0
 8007c6a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c6c:	19bc      	adds	r4, r7, r6
 8007c6e:	0029      	movs	r1, r5
 8007c70:	187b      	adds	r3, r7, r1
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	0018      	movs	r0, r3
 8007c76:	f000 f95e 	bl	8007f36 <USBD_Get_USB_Status>
 8007c7a:	0003      	movs	r3, r0
 8007c7c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007c7e:	19bb      	adds	r3, r7, r6
 8007c80:	781b      	ldrb	r3, [r3, #0]
}
 8007c82:	0018      	movs	r0, r3
 8007c84:	46bd      	mov	sp, r7
 8007c86:	b005      	add	sp, #20
 8007c88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007c8a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c8c:	b085      	sub	sp, #20
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
 8007c92:	000a      	movs	r2, r1
 8007c94:	1cfb      	adds	r3, r7, #3
 8007c96:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c98:	210f      	movs	r1, #15
 8007c9a:	187b      	adds	r3, r7, r1
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ca0:	260e      	movs	r6, #14
 8007ca2:	19bb      	adds	r3, r7, r6
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	23a6      	movs	r3, #166	; 0xa6
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	58d2      	ldr	r2, [r2, r3]
 8007cb0:	000d      	movs	r5, r1
 8007cb2:	187c      	adds	r4, r7, r1
 8007cb4:	1cfb      	adds	r3, r7, #3
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	0019      	movs	r1, r3
 8007cba:	0010      	movs	r0, r2
 8007cbc:	f7f9 fcfe 	bl	80016bc <HAL_PCD_EP_SetStall>
 8007cc0:	0003      	movs	r3, r0
 8007cc2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cc4:	19bc      	adds	r4, r7, r6
 8007cc6:	0029      	movs	r1, r5
 8007cc8:	187b      	adds	r3, r7, r1
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	0018      	movs	r0, r3
 8007cce:	f000 f932 	bl	8007f36 <USBD_Get_USB_Status>
 8007cd2:	0003      	movs	r3, r0
 8007cd4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007cd6:	19bb      	adds	r3, r7, r6
 8007cd8:	781b      	ldrb	r3, [r3, #0]
}
 8007cda:	0018      	movs	r0, r3
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	b005      	add	sp, #20
 8007ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ce2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ce2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ce4:	b085      	sub	sp, #20
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
 8007cea:	000a      	movs	r2, r1
 8007cec:	1cfb      	adds	r3, r7, #3
 8007cee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cf0:	210f      	movs	r1, #15
 8007cf2:	187b      	adds	r3, r7, r1
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cf8:	260e      	movs	r6, #14
 8007cfa:	19bb      	adds	r3, r7, r6
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	23a6      	movs	r3, #166	; 0xa6
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	58d2      	ldr	r2, [r2, r3]
 8007d08:	000d      	movs	r5, r1
 8007d0a:	187c      	adds	r4, r7, r1
 8007d0c:	1cfb      	adds	r3, r7, #3
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	0019      	movs	r1, r3
 8007d12:	0010      	movs	r0, r2
 8007d14:	f7f9 fd2e 	bl	8001774 <HAL_PCD_EP_ClrStall>
 8007d18:	0003      	movs	r3, r0
 8007d1a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d1c:	19bc      	adds	r4, r7, r6
 8007d1e:	0029      	movs	r1, r5
 8007d20:	187b      	adds	r3, r7, r1
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	0018      	movs	r0, r3
 8007d26:	f000 f906 	bl	8007f36 <USBD_Get_USB_Status>
 8007d2a:	0003      	movs	r3, r0
 8007d2c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007d2e:	19bb      	adds	r3, r7, r6
 8007d30:	781b      	ldrb	r3, [r3, #0]
}
 8007d32:	0018      	movs	r0, r3
 8007d34:	46bd      	mov	sp, r7
 8007d36:	b005      	add	sp, #20
 8007d38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d3a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b084      	sub	sp, #16
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
 8007d42:	000a      	movs	r2, r1
 8007d44:	1cfb      	adds	r3, r7, #3
 8007d46:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	23a6      	movs	r3, #166	; 0xa6
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	58d3      	ldr	r3, [r2, r3]
 8007d50:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007d52:	1cfb      	adds	r3, r7, #3
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	b25b      	sxtb	r3, r3
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	da0d      	bge.n	8007d78 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007d5c:	1cfb      	adds	r3, r7, #3
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	227f      	movs	r2, #127	; 0x7f
 8007d62:	4013      	ands	r3, r2
 8007d64:	68f9      	ldr	r1, [r7, #12]
 8007d66:	1c5a      	adds	r2, r3, #1
 8007d68:	0013      	movs	r3, r2
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	189b      	adds	r3, r3, r2
 8007d6e:	00db      	lsls	r3, r3, #3
 8007d70:	18cb      	adds	r3, r1, r3
 8007d72:	3302      	adds	r3, #2
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	e00d      	b.n	8007d94 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007d78:	1cfb      	adds	r3, r7, #3
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	227f      	movs	r2, #127	; 0x7f
 8007d7e:	401a      	ands	r2, r3
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	23b5      	movs	r3, #181	; 0xb5
 8007d84:	0059      	lsls	r1, r3, #1
 8007d86:	0013      	movs	r3, r2
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	189b      	adds	r3, r3, r2
 8007d8c:	00db      	lsls	r3, r3, #3
 8007d8e:	18c3      	adds	r3, r0, r3
 8007d90:	185b      	adds	r3, r3, r1
 8007d92:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007d94:	0018      	movs	r0, r3
 8007d96:	46bd      	mov	sp, r7
 8007d98:	b004      	add	sp, #16
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d9e:	b085      	sub	sp, #20
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	000a      	movs	r2, r1
 8007da6:	1cfb      	adds	r3, r7, #3
 8007da8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007daa:	210f      	movs	r1, #15
 8007dac:	187b      	adds	r3, r7, r1
 8007dae:	2200      	movs	r2, #0
 8007db0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007db2:	260e      	movs	r6, #14
 8007db4:	19bb      	adds	r3, r7, r6
 8007db6:	2200      	movs	r2, #0
 8007db8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	23a6      	movs	r3, #166	; 0xa6
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	58d2      	ldr	r2, [r2, r3]
 8007dc2:	000d      	movs	r5, r1
 8007dc4:	187c      	adds	r4, r7, r1
 8007dc6:	1cfb      	adds	r3, r7, #3
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	0019      	movs	r1, r3
 8007dcc:	0010      	movs	r0, r2
 8007dce:	f7f9 fadb 	bl	8001388 <HAL_PCD_SetAddress>
 8007dd2:	0003      	movs	r3, r0
 8007dd4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dd6:	19bc      	adds	r4, r7, r6
 8007dd8:	0029      	movs	r1, r5
 8007dda:	187b      	adds	r3, r7, r1
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	0018      	movs	r0, r3
 8007de0:	f000 f8a9 	bl	8007f36 <USBD_Get_USB_Status>
 8007de4:	0003      	movs	r3, r0
 8007de6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007de8:	19bb      	adds	r3, r7, r6
 8007dea:	781b      	ldrb	r3, [r3, #0]
}
 8007dec:	0018      	movs	r0, r3
 8007dee:	46bd      	mov	sp, r7
 8007df0:	b005      	add	sp, #20
 8007df2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007df4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007df6:	b087      	sub	sp, #28
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	0008      	movs	r0, r1
 8007dfe:	607a      	str	r2, [r7, #4]
 8007e00:	0019      	movs	r1, r3
 8007e02:	230b      	movs	r3, #11
 8007e04:	18fb      	adds	r3, r7, r3
 8007e06:	1c02      	adds	r2, r0, #0
 8007e08:	701a      	strb	r2, [r3, #0]
 8007e0a:	2408      	movs	r4, #8
 8007e0c:	193b      	adds	r3, r7, r4
 8007e0e:	1c0a      	adds	r2, r1, #0
 8007e10:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e12:	2117      	movs	r1, #23
 8007e14:	187b      	adds	r3, r7, r1
 8007e16:	2200      	movs	r2, #0
 8007e18:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e1a:	2516      	movs	r5, #22
 8007e1c:	197b      	adds	r3, r7, r5
 8007e1e:	2200      	movs	r2, #0
 8007e20:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	23a6      	movs	r3, #166	; 0xa6
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	58d0      	ldr	r0, [r2, r3]
 8007e2a:	193b      	adds	r3, r7, r4
 8007e2c:	881d      	ldrh	r5, [r3, #0]
 8007e2e:	000e      	movs	r6, r1
 8007e30:	187c      	adds	r4, r7, r1
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	230b      	movs	r3, #11
 8007e36:	18fb      	adds	r3, r7, r3
 8007e38:	7819      	ldrb	r1, [r3, #0]
 8007e3a:	002b      	movs	r3, r5
 8007e3c:	f7f9 fbf5 	bl	800162a <HAL_PCD_EP_Transmit>
 8007e40:	0003      	movs	r3, r0
 8007e42:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e44:	2516      	movs	r5, #22
 8007e46:	197c      	adds	r4, r7, r5
 8007e48:	0031      	movs	r1, r6
 8007e4a:	187b      	adds	r3, r7, r1
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	0018      	movs	r0, r3
 8007e50:	f000 f871 	bl	8007f36 <USBD_Get_USB_Status>
 8007e54:	0003      	movs	r3, r0
 8007e56:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007e58:	197b      	adds	r3, r7, r5
 8007e5a:	781b      	ldrb	r3, [r3, #0]
}
 8007e5c:	0018      	movs	r0, r3
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	b007      	add	sp, #28
 8007e62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e64 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e66:	b087      	sub	sp, #28
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	0008      	movs	r0, r1
 8007e6e:	607a      	str	r2, [r7, #4]
 8007e70:	0019      	movs	r1, r3
 8007e72:	230b      	movs	r3, #11
 8007e74:	18fb      	adds	r3, r7, r3
 8007e76:	1c02      	adds	r2, r0, #0
 8007e78:	701a      	strb	r2, [r3, #0]
 8007e7a:	2408      	movs	r4, #8
 8007e7c:	193b      	adds	r3, r7, r4
 8007e7e:	1c0a      	adds	r2, r1, #0
 8007e80:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e82:	2117      	movs	r1, #23
 8007e84:	187b      	adds	r3, r7, r1
 8007e86:	2200      	movs	r2, #0
 8007e88:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e8a:	2516      	movs	r5, #22
 8007e8c:	197b      	adds	r3, r7, r5
 8007e8e:	2200      	movs	r2, #0
 8007e90:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	23a6      	movs	r3, #166	; 0xa6
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	58d0      	ldr	r0, [r2, r3]
 8007e9a:	193b      	adds	r3, r7, r4
 8007e9c:	881d      	ldrh	r5, [r3, #0]
 8007e9e:	000e      	movs	r6, r1
 8007ea0:	187c      	adds	r4, r7, r1
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	230b      	movs	r3, #11
 8007ea6:	18fb      	adds	r3, r7, r3
 8007ea8:	7819      	ldrb	r1, [r3, #0]
 8007eaa:	002b      	movs	r3, r5
 8007eac:	f7f9 fb60 	bl	8001570 <HAL_PCD_EP_Receive>
 8007eb0:	0003      	movs	r3, r0
 8007eb2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007eb4:	2516      	movs	r5, #22
 8007eb6:	197c      	adds	r4, r7, r5
 8007eb8:	0031      	movs	r1, r6
 8007eba:	187b      	adds	r3, r7, r1
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	0018      	movs	r0, r3
 8007ec0:	f000 f839 	bl	8007f36 <USBD_Get_USB_Status>
 8007ec4:	0003      	movs	r3, r0
 8007ec6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007ec8:	197b      	adds	r3, r7, r5
 8007eca:	781b      	ldrb	r3, [r3, #0]
}
 8007ecc:	0018      	movs	r0, r3
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	b007      	add	sp, #28
 8007ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ed4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	000a      	movs	r2, r1
 8007ede:	1cfb      	adds	r3, r7, #3
 8007ee0:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	23a6      	movs	r3, #166	; 0xa6
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	58d2      	ldr	r2, [r2, r3]
 8007eea:	1cfb      	adds	r3, r7, #3
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	0019      	movs	r1, r3
 8007ef0:	0010      	movs	r0, r2
 8007ef2:	f7f9 fb81 	bl	80015f8 <HAL_PCD_EP_GetRxCount>
 8007ef6:	0003      	movs	r3, r0
}
 8007ef8:	0018      	movs	r0, r3
 8007efa:	46bd      	mov	sp, r7
 8007efc:	b002      	add	sp, #8
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007f08:	4b02      	ldr	r3, [pc, #8]	; (8007f14 <USBD_static_malloc+0x14>)
}
 8007f0a:	0018      	movs	r0, r3
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	b002      	add	sp, #8
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	46c0      	nop			; (mov r8, r8)
 8007f14:	200001a0 	.word	0x200001a0

08007f18 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]

}
 8007f20:	46c0      	nop			; (mov r8, r8)
 8007f22:	46bd      	mov	sp, r7
 8007f24:	b002      	add	sp, #8
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007f2c:	f7f8 f9f8 	bl	8000320 <SystemClock_Config>
}
 8007f30:	46c0      	nop			; (mov r8, r8)
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b084      	sub	sp, #16
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	0002      	movs	r2, r0
 8007f3e:	1dfb      	adds	r3, r7, #7
 8007f40:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f42:	230f      	movs	r3, #15
 8007f44:	18fb      	adds	r3, r7, r3
 8007f46:	2200      	movs	r2, #0
 8007f48:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8007f4a:	1dfb      	adds	r3, r7, #7
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d00d      	beq.n	8007f6e <USBD_Get_USB_Status+0x38>
 8007f52:	dc02      	bgt.n	8007f5a <USBD_Get_USB_Status+0x24>
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d005      	beq.n	8007f64 <USBD_Get_USB_Status+0x2e>
 8007f58:	e018      	b.n	8007f8c <USBD_Get_USB_Status+0x56>
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d00c      	beq.n	8007f78 <USBD_Get_USB_Status+0x42>
 8007f5e:	2b03      	cmp	r3, #3
 8007f60:	d00f      	beq.n	8007f82 <USBD_Get_USB_Status+0x4c>
 8007f62:	e013      	b.n	8007f8c <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007f64:	230f      	movs	r3, #15
 8007f66:	18fb      	adds	r3, r7, r3
 8007f68:	2200      	movs	r2, #0
 8007f6a:	701a      	strb	r2, [r3, #0]
    break;
 8007f6c:	e013      	b.n	8007f96 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007f6e:	230f      	movs	r3, #15
 8007f70:	18fb      	adds	r3, r7, r3
 8007f72:	2202      	movs	r2, #2
 8007f74:	701a      	strb	r2, [r3, #0]
    break;
 8007f76:	e00e      	b.n	8007f96 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007f78:	230f      	movs	r3, #15
 8007f7a:	18fb      	adds	r3, r7, r3
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	701a      	strb	r2, [r3, #0]
    break;
 8007f80:	e009      	b.n	8007f96 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007f82:	230f      	movs	r3, #15
 8007f84:	18fb      	adds	r3, r7, r3
 8007f86:	2202      	movs	r2, #2
 8007f88:	701a      	strb	r2, [r3, #0]
    break;
 8007f8a:	e004      	b.n	8007f96 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8007f8c:	230f      	movs	r3, #15
 8007f8e:	18fb      	adds	r3, r7, r3
 8007f90:	2202      	movs	r2, #2
 8007f92:	701a      	strb	r2, [r3, #0]
    break;
 8007f94:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8007f96:	230f      	movs	r3, #15
 8007f98:	18fb      	adds	r3, r7, r3
 8007f9a:	781b      	ldrb	r3, [r3, #0]
}
 8007f9c:	0018      	movs	r0, r3
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	b004      	add	sp, #16
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <__libc_init_array>:
 8007fa4:	b570      	push	{r4, r5, r6, lr}
 8007fa6:	2600      	movs	r6, #0
 8007fa8:	4d0c      	ldr	r5, [pc, #48]	; (8007fdc <__libc_init_array+0x38>)
 8007faa:	4c0d      	ldr	r4, [pc, #52]	; (8007fe0 <__libc_init_array+0x3c>)
 8007fac:	1b64      	subs	r4, r4, r5
 8007fae:	10a4      	asrs	r4, r4, #2
 8007fb0:	42a6      	cmp	r6, r4
 8007fb2:	d109      	bne.n	8007fc8 <__libc_init_array+0x24>
 8007fb4:	2600      	movs	r6, #0
 8007fb6:	f000 f821 	bl	8007ffc <_init>
 8007fba:	4d0a      	ldr	r5, [pc, #40]	; (8007fe4 <__libc_init_array+0x40>)
 8007fbc:	4c0a      	ldr	r4, [pc, #40]	; (8007fe8 <__libc_init_array+0x44>)
 8007fbe:	1b64      	subs	r4, r4, r5
 8007fc0:	10a4      	asrs	r4, r4, #2
 8007fc2:	42a6      	cmp	r6, r4
 8007fc4:	d105      	bne.n	8007fd2 <__libc_init_array+0x2e>
 8007fc6:	bd70      	pop	{r4, r5, r6, pc}
 8007fc8:	00b3      	lsls	r3, r6, #2
 8007fca:	58eb      	ldr	r3, [r5, r3]
 8007fcc:	4798      	blx	r3
 8007fce:	3601      	adds	r6, #1
 8007fd0:	e7ee      	b.n	8007fb0 <__libc_init_array+0xc>
 8007fd2:	00b3      	lsls	r3, r6, #2
 8007fd4:	58eb      	ldr	r3, [r5, r3]
 8007fd6:	4798      	blx	r3
 8007fd8:	3601      	adds	r6, #1
 8007fda:	e7f2      	b.n	8007fc2 <__libc_init_array+0x1e>
 8007fdc:	08008168 	.word	0x08008168
 8007fe0:	08008168 	.word	0x08008168
 8007fe4:	08008168 	.word	0x08008168
 8007fe8:	0800816c 	.word	0x0800816c

08007fec <memset>:
 8007fec:	0003      	movs	r3, r0
 8007fee:	1812      	adds	r2, r2, r0
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d100      	bne.n	8007ff6 <memset+0xa>
 8007ff4:	4770      	bx	lr
 8007ff6:	7019      	strb	r1, [r3, #0]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	e7f9      	b.n	8007ff0 <memset+0x4>

08007ffc <_init>:
 8007ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ffe:	46c0      	nop			; (mov r8, r8)
 8008000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008002:	bc08      	pop	{r3}
 8008004:	469e      	mov	lr, r3
 8008006:	4770      	bx	lr

08008008 <_fini>:
 8008008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800800a:	46c0      	nop			; (mov r8, r8)
 800800c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800800e:	bc08      	pop	{r3}
 8008010:	469e      	mov	lr, r3
 8008012:	4770      	bx	lr
