
Semestro_projektas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082c0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08008380  08008380  00018380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084d4  080084d4  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  080084d4  080084d4  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  080084d4  080084d4  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084d4  080084d4  000184d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084d8  080084d8  000184d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  080084dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001220  20000180  0800865c  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013a0  0800865c  000213a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014603  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ede  00000000  00000000  000347ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e98  00000000  00000000  00037690  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d30  00000000  00000000  00038528  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001644f  00000000  00000000  00039258  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e7dd  00000000  00000000  0004f6a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007cacd  00000000  00000000  0005de84  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000da951  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032b8  00000000  00000000  000da9cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000180 	.word	0x20000180
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008368 	.word	0x08008368

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000184 	.word	0x20000184
 8000104:	08008368 	.word	0x08008368

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <Motors_Control>:
//void CDC_ReceiveCallBack(uint8_t *buf, uint32_t len) {
	//Receiveflag = 1;
	//memcpy(receivedData, buf, 4);
//}

void Motors_Control(uint8_t DutyCycleA, uint8_t DutyCycleB) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	701a      	strb	r2, [r3, #0]
 800022c:	1dbb      	adds	r3, r7, #6
 800022e:	1c0a      	adds	r2, r1, #0
 8000230:	701a      	strb	r2, [r3, #0]
	//htim2.Instance->CCR1 = DutyCycleA;  // Motor A speed control
	htim22.Instance->CCR1 = DutyCycleB;  // Motor B speed control
 8000232:	4b18      	ldr	r3, [pc, #96]	; (8000294 <Motors_Control+0x74>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	1dba      	adds	r2, r7, #6
 8000238:	7812      	ldrb	r2, [r2, #0]
 800023a:	635a      	str	r2, [r3, #52]	; 0x34

	// moving forward
	if (DutyCycleA > 0 && DutyCycleB > 0) {
 800023c:	1dfb      	adds	r3, r7, #7
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d00f      	beq.n	8000264 <Motors_Control+0x44>
 8000244:	1dbb      	adds	r3, r7, #6
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	2b00      	cmp	r3, #0
 800024a:	d00b      	beq.n	8000264 <Motors_Control+0x44>
		in1_in3(GPIO_PIN_RESET); // in1 and in3
 800024c:	4b12      	ldr	r3, [pc, #72]	; (8000298 <Motors_Control+0x78>)
 800024e:	2200      	movs	r2, #0
 8000250:	2105      	movs	r1, #5
 8000252:	0018      	movs	r0, r3
 8000254:	f000 fe36 	bl	8000ec4 <HAL_GPIO_WritePin>
		in2_in4(GPIO_PIN_SET);   //in2 and in4
 8000258:	4910      	ldr	r1, [pc, #64]	; (800029c <Motors_Control+0x7c>)
 800025a:	4b0f      	ldr	r3, [pc, #60]	; (8000298 <Motors_Control+0x78>)
 800025c:	2201      	movs	r2, #1
 800025e:	0018      	movs	r0, r3
 8000260:	f000 fe30 	bl	8000ec4 <HAL_GPIO_WritePin>
		in1_in3(GPIO_PIN_SET); // in1 and in3
		in2_in4(GPIO_PIN_RESET);   //in2 and in4
	}

	// stop
	if (DutyCycleA == 0 && DutyCycleB == 0) {
 8000264:	1dfb      	adds	r3, r7, #7
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d10f      	bne.n	800028c <Motors_Control+0x6c>
 800026c:	1dbb      	adds	r3, r7, #6
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d10b      	bne.n	800028c <Motors_Control+0x6c>
		in1_in3(GPIO_PIN_RESET); // in1 and in3
 8000274:	4b08      	ldr	r3, [pc, #32]	; (8000298 <Motors_Control+0x78>)
 8000276:	2200      	movs	r2, #0
 8000278:	2105      	movs	r1, #5
 800027a:	0018      	movs	r0, r3
 800027c:	f000 fe22 	bl	8000ec4 <HAL_GPIO_WritePin>
		in2_in4(GPIO_PIN_RESET);   //in2 and in4
 8000280:	4906      	ldr	r1, [pc, #24]	; (800029c <Motors_Control+0x7c>)
 8000282:	4b05      	ldr	r3, [pc, #20]	; (8000298 <Motors_Control+0x78>)
 8000284:	2200      	movs	r2, #0
 8000286:	0018      	movs	r0, r3
 8000288:	f000 fe1c 	bl	8000ec4 <HAL_GPIO_WritePin>
	// moving to right
	if (DutyCycleA > 0 && DutyCycleB < 0) {
		in1_in4(GPIO_PIN_RESET);   // in1 and in4
		in2_in3(GPIO_PIN_SET); // in2 and in3
	}
}
 800028c:	46c0      	nop			; (mov r8, r8)
 800028e:	46bd      	mov	sp, r7
 8000290:	b002      	add	sp, #8
 8000292:	bd80      	pop	{r7, pc}
 8000294:	200003c4 	.word	0x200003c4
 8000298:	50000400 	.word	0x50000400
 800029c:	00000402 	.word	0x00000402

080002a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002a4:	f000 fb2c 	bl	8000900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a8:	f000 f840 	bl	800032c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ac:	f000 f9b0 	bl	8000610 <MX_GPIO_Init>
  MX_TIM2_Init();
 80002b0:	f000 f8b2 	bl	8000418 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80002b4:	f007 fb0e 	bl	80078d4 <MX_USB_DEVICE_Init>
  MX_TIM22_Init();
 80002b8:	f000 f92c 	bl	8000514 <MX_TIM22_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80002bc:	4b17      	ldr	r3, [pc, #92]	; (800031c <main+0x7c>)
 80002be:	2100      	movs	r1, #0
 80002c0:	0018      	movs	r0, r3
 80002c2:	f003 fa0b 	bl	80036dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim22, TIM_CHANNEL_1);
 80002c6:	4b16      	ldr	r3, [pc, #88]	; (8000320 <main+0x80>)
 80002c8:	2100      	movs	r1, #0
 80002ca:	0018      	movs	r0, r3
 80002cc:	f003 fa06 	bl	80036dc <HAL_TIM_PWM_Start>
		//if(Receiveflag == 1)
		//{
			//Receiveflag = 0;
			//Motors_Control(receivedData[0], receivedData[2]);
		//}
	Motors_Control(receivedData[0], receivedData[2]);
 80002d0:	4b14      	ldr	r3, [pc, #80]	; (8000324 <main+0x84>)
 80002d2:	781a      	ldrb	r2, [r3, #0]
 80002d4:	4b13      	ldr	r3, [pc, #76]	; (8000324 <main+0x84>)
 80002d6:	789b      	ldrb	r3, [r3, #2]
 80002d8:	0019      	movs	r1, r3
 80002da:	0010      	movs	r0, r2
 80002dc:	f7ff ffa0 	bl	8000220 <Motors_Control>
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_SET);
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_SET);
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_SET);
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,GPIO_PIN_SET);
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80002e0:	23a0      	movs	r3, #160	; 0xa0
 80002e2:	05db      	lsls	r3, r3, #23
 80002e4:	2101      	movs	r1, #1
 80002e6:	0018      	movs	r0, r3
 80002e8:	f000 fe09 	bl	8000efe <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80002ec:	23a0      	movs	r3, #160	; 0xa0
 80002ee:	05db      	lsls	r3, r3, #23
 80002f0:	2102      	movs	r1, #2
 80002f2:	0018      	movs	r0, r3
 80002f4:	f000 fe03 	bl	8000efe <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 80002f8:	23a0      	movs	r3, #160	; 0xa0
 80002fa:	05db      	lsls	r3, r3, #23
 80002fc:	2104      	movs	r1, #4
 80002fe:	0018      	movs	r0, r3
 8000300:	f000 fdfd 	bl	8000efe <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8000304:	23a0      	movs	r3, #160	; 0xa0
 8000306:	05db      	lsls	r3, r3, #23
 8000308:	2108      	movs	r1, #8
 800030a:	0018      	movs	r0, r3
 800030c:	f000 fdf7 	bl	8000efe <HAL_GPIO_TogglePin>
    HAL_Delay(3000);
 8000310:	4b05      	ldr	r3, [pc, #20]	; (8000328 <main+0x88>)
 8000312:	0018      	movs	r0, r3
 8000314:	f000 fb64 	bl	80009e0 <HAL_Delay>
	Motors_Control(receivedData[0], receivedData[2]);
 8000318:	e7da      	b.n	80002d0 <main+0x30>
 800031a:	46c0      	nop			; (mov r8, r8)
 800031c:	20000400 	.word	0x20000400
 8000320:	200003c4 	.word	0x200003c4
 8000324:	20000000 	.word	0x20000000
 8000328:	00000bb8 	.word	0x00000bb8

0800032c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800032c:	b590      	push	{r4, r7, lr}
 800032e:	b09d      	sub	sp, #116	; 0x74
 8000330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000332:	2438      	movs	r4, #56	; 0x38
 8000334:	193b      	adds	r3, r7, r4
 8000336:	0018      	movs	r0, r3
 8000338:	2338      	movs	r3, #56	; 0x38
 800033a:	001a      	movs	r2, r3
 800033c:	2100      	movs	r1, #0
 800033e:	f008 f80b 	bl	8008358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000342:	2324      	movs	r3, #36	; 0x24
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	0018      	movs	r0, r3
 8000348:	2314      	movs	r3, #20
 800034a:	001a      	movs	r2, r3
 800034c:	2100      	movs	r1, #0
 800034e:	f008 f803 	bl	8008358 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000352:	003b      	movs	r3, r7
 8000354:	0018      	movs	r0, r3
 8000356:	2324      	movs	r3, #36	; 0x24
 8000358:	001a      	movs	r2, r3
 800035a:	2100      	movs	r1, #0
 800035c:	f007 fffc 	bl	8008358 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000360:	4b2b      	ldr	r3, [pc, #172]	; (8000410 <SystemClock_Config+0xe4>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a2b      	ldr	r2, [pc, #172]	; (8000414 <SystemClock_Config+0xe8>)
 8000366:	401a      	ands	r2, r3
 8000368:	4b29      	ldr	r3, [pc, #164]	; (8000410 <SystemClock_Config+0xe4>)
 800036a:	2180      	movs	r1, #128	; 0x80
 800036c:	0109      	lsls	r1, r1, #4
 800036e:	430a      	orrs	r2, r1
 8000370:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000372:	0021      	movs	r1, r4
 8000374:	187b      	adds	r3, r7, r1
 8000376:	2222      	movs	r2, #34	; 0x22
 8000378:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800037a:	187b      	adds	r3, r7, r1
 800037c:	2201      	movs	r2, #1
 800037e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000380:	187b      	adds	r3, r7, r1
 8000382:	2210      	movs	r2, #16
 8000384:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000386:	187b      	adds	r3, r7, r1
 8000388:	2201      	movs	r2, #1
 800038a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800038c:	187b      	adds	r3, r7, r1
 800038e:	2202      	movs	r2, #2
 8000390:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000392:	187b      	adds	r3, r7, r1
 8000394:	2200      	movs	r2, #0
 8000396:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000398:	187b      	adds	r3, r7, r1
 800039a:	2280      	movs	r2, #128	; 0x80
 800039c:	02d2      	lsls	r2, r2, #11
 800039e:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80003a0:	187b      	adds	r3, r7, r1
 80003a2:	2280      	movs	r2, #128	; 0x80
 80003a4:	03d2      	lsls	r2, r2, #15
 80003a6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a8:	187b      	adds	r3, r7, r1
 80003aa:	0018      	movs	r0, r3
 80003ac:	f002 fa64 	bl	8002878 <HAL_RCC_OscConfig>
 80003b0:	1e03      	subs	r3, r0, #0
 80003b2:	d001      	beq.n	80003b8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80003b4:	f000 f970 	bl	8000698 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b8:	2124      	movs	r1, #36	; 0x24
 80003ba:	187b      	adds	r3, r7, r1
 80003bc:	220f      	movs	r2, #15
 80003be:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c0:	187b      	adds	r3, r7, r1
 80003c2:	2203      	movs	r2, #3
 80003c4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c6:	187b      	adds	r3, r7, r1
 80003c8:	2200      	movs	r2, #0
 80003ca:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003cc:	187b      	adds	r3, r7, r1
 80003ce:	2200      	movs	r2, #0
 80003d0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d2:	187b      	adds	r3, r7, r1
 80003d4:	2200      	movs	r2, #0
 80003d6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003d8:	187b      	adds	r3, r7, r1
 80003da:	2101      	movs	r1, #1
 80003dc:	0018      	movs	r0, r3
 80003de:	f002 fe0b 	bl	8002ff8 <HAL_RCC_ClockConfig>
 80003e2:	1e03      	subs	r3, r0, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80003e6:	f000 f957 	bl	8000698 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80003ea:	003b      	movs	r3, r7
 80003ec:	2240      	movs	r2, #64	; 0x40
 80003ee:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80003f0:	003b      	movs	r3, r7
 80003f2:	2280      	movs	r2, #128	; 0x80
 80003f4:	04d2      	lsls	r2, r2, #19
 80003f6:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003f8:	003b      	movs	r3, r7
 80003fa:	0018      	movs	r0, r3
 80003fc:	f002 ffaa 	bl	8003354 <HAL_RCCEx_PeriphCLKConfig>
 8000400:	1e03      	subs	r3, r0, #0
 8000402:	d001      	beq.n	8000408 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000404:	f000 f948 	bl	8000698 <Error_Handler>
  }
}
 8000408:	46c0      	nop			; (mov r8, r8)
 800040a:	46bd      	mov	sp, r7
 800040c:	b01d      	add	sp, #116	; 0x74
 800040e:	bd90      	pop	{r4, r7, pc}
 8000410:	40007000 	.word	0x40007000
 8000414:	ffffe7ff 	.word	0xffffe7ff

08000418 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b08a      	sub	sp, #40	; 0x28
 800041c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800041e:	2318      	movs	r3, #24
 8000420:	18fb      	adds	r3, r7, r3
 8000422:	0018      	movs	r0, r3
 8000424:	2310      	movs	r3, #16
 8000426:	001a      	movs	r2, r3
 8000428:	2100      	movs	r1, #0
 800042a:	f007 ff95 	bl	8008358 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800042e:	2310      	movs	r3, #16
 8000430:	18fb      	adds	r3, r7, r3
 8000432:	0018      	movs	r0, r3
 8000434:	2308      	movs	r3, #8
 8000436:	001a      	movs	r2, r3
 8000438:	2100      	movs	r1, #0
 800043a:	f007 ff8d 	bl	8008358 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800043e:	003b      	movs	r3, r7
 8000440:	0018      	movs	r0, r3
 8000442:	2310      	movs	r3, #16
 8000444:	001a      	movs	r2, r3
 8000446:	2100      	movs	r1, #0
 8000448:	f007 ff86 	bl	8008358 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800044c:	4b30      	ldr	r3, [pc, #192]	; (8000510 <MX_TIM2_Init+0xf8>)
 800044e:	2280      	movs	r2, #128	; 0x80
 8000450:	05d2      	lsls	r2, r2, #23
 8000452:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32;
 8000454:	4b2e      	ldr	r3, [pc, #184]	; (8000510 <MX_TIM2_Init+0xf8>)
 8000456:	2220      	movs	r2, #32
 8000458:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800045a:	4b2d      	ldr	r3, [pc, #180]	; (8000510 <MX_TIM2_Init+0xf8>)
 800045c:	2200      	movs	r2, #0
 800045e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000460:	4b2b      	ldr	r3, [pc, #172]	; (8000510 <MX_TIM2_Init+0xf8>)
 8000462:	2264      	movs	r2, #100	; 0x64
 8000464:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000466:	4b2a      	ldr	r3, [pc, #168]	; (8000510 <MX_TIM2_Init+0xf8>)
 8000468:	2200      	movs	r2, #0
 800046a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800046c:	4b28      	ldr	r3, [pc, #160]	; (8000510 <MX_TIM2_Init+0xf8>)
 800046e:	2200      	movs	r2, #0
 8000470:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000472:	4b27      	ldr	r3, [pc, #156]	; (8000510 <MX_TIM2_Init+0xf8>)
 8000474:	0018      	movs	r0, r3
 8000476:	f003 f8d1 	bl	800361c <HAL_TIM_Base_Init>
 800047a:	1e03      	subs	r3, r0, #0
 800047c:	d001      	beq.n	8000482 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800047e:	f000 f90b 	bl	8000698 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000482:	2118      	movs	r1, #24
 8000484:	187b      	adds	r3, r7, r1
 8000486:	2280      	movs	r2, #128	; 0x80
 8000488:	0152      	lsls	r2, r2, #5
 800048a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800048c:	187a      	adds	r2, r7, r1
 800048e:	4b20      	ldr	r3, [pc, #128]	; (8000510 <MX_TIM2_Init+0xf8>)
 8000490:	0011      	movs	r1, r2
 8000492:	0018      	movs	r0, r3
 8000494:	f003 f9fc 	bl	8003890 <HAL_TIM_ConfigClockSource>
 8000498:	1e03      	subs	r3, r0, #0
 800049a:	d001      	beq.n	80004a0 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 800049c:	f000 f8fc 	bl	8000698 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80004a0:	4b1b      	ldr	r3, [pc, #108]	; (8000510 <MX_TIM2_Init+0xf8>)
 80004a2:	0018      	movs	r0, r3
 80004a4:	f003 f8e6 	bl	8003674 <HAL_TIM_PWM_Init>
 80004a8:	1e03      	subs	r3, r0, #0
 80004aa:	d001      	beq.n	80004b0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80004ac:	f000 f8f4 	bl	8000698 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004b0:	2110      	movs	r1, #16
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	2200      	movs	r2, #0
 80004bc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004be:	187a      	adds	r2, r7, r1
 80004c0:	4b13      	ldr	r3, [pc, #76]	; (8000510 <MX_TIM2_Init+0xf8>)
 80004c2:	0011      	movs	r1, r2
 80004c4:	0018      	movs	r0, r3
 80004c6:	f003 fcb6 	bl	8003e36 <HAL_TIMEx_MasterConfigSynchronization>
 80004ca:	1e03      	subs	r3, r0, #0
 80004cc:	d001      	beq.n	80004d2 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80004ce:	f000 f8e3 	bl	8000698 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004d2:	003b      	movs	r3, r7
 80004d4:	2260      	movs	r2, #96	; 0x60
 80004d6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80004d8:	003b      	movs	r3, r7
 80004da:	2200      	movs	r2, #0
 80004dc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004de:	003b      	movs	r3, r7
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004e4:	003b      	movs	r3, r7
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004ea:	0039      	movs	r1, r7
 80004ec:	4b08      	ldr	r3, [pc, #32]	; (8000510 <MX_TIM2_Init+0xf8>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	0018      	movs	r0, r3
 80004f2:	f003 f915 	bl	8003720 <HAL_TIM_PWM_ConfigChannel>
 80004f6:	1e03      	subs	r3, r0, #0
 80004f8:	d001      	beq.n	80004fe <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80004fa:	f000 f8cd 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80004fe:	4b04      	ldr	r3, [pc, #16]	; (8000510 <MX_TIM2_Init+0xf8>)
 8000500:	0018      	movs	r0, r3
 8000502:	f000 f907 	bl	8000714 <HAL_TIM_MspPostInit>

}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	b00a      	add	sp, #40	; 0x28
 800050c:	bd80      	pop	{r7, pc}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	20000400 	.word	0x20000400

08000514 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08a      	sub	sp, #40	; 0x28
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800051a:	2318      	movs	r3, #24
 800051c:	18fb      	adds	r3, r7, r3
 800051e:	0018      	movs	r0, r3
 8000520:	2310      	movs	r3, #16
 8000522:	001a      	movs	r2, r3
 8000524:	2100      	movs	r1, #0
 8000526:	f007 ff17 	bl	8008358 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800052a:	2310      	movs	r3, #16
 800052c:	18fb      	adds	r3, r7, r3
 800052e:	0018      	movs	r0, r3
 8000530:	2308      	movs	r3, #8
 8000532:	001a      	movs	r2, r3
 8000534:	2100      	movs	r1, #0
 8000536:	f007 ff0f 	bl	8008358 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800053a:	003b      	movs	r3, r7
 800053c:	0018      	movs	r0, r3
 800053e:	2310      	movs	r3, #16
 8000540:	001a      	movs	r2, r3
 8000542:	2100      	movs	r1, #0
 8000544:	f007 ff08 	bl	8008358 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 8000548:	4b2f      	ldr	r3, [pc, #188]	; (8000608 <MX_TIM22_Init+0xf4>)
 800054a:	4a30      	ldr	r2, [pc, #192]	; (800060c <MX_TIM22_Init+0xf8>)
 800054c:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 32;
 800054e:	4b2e      	ldr	r3, [pc, #184]	; (8000608 <MX_TIM22_Init+0xf4>)
 8000550:	2220      	movs	r2, #32
 8000552:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000554:	4b2c      	ldr	r3, [pc, #176]	; (8000608 <MX_TIM22_Init+0xf4>)
 8000556:	2200      	movs	r2, #0
 8000558:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 100;
 800055a:	4b2b      	ldr	r3, [pc, #172]	; (8000608 <MX_TIM22_Init+0xf4>)
 800055c:	2264      	movs	r2, #100	; 0x64
 800055e:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000560:	4b29      	ldr	r3, [pc, #164]	; (8000608 <MX_TIM22_Init+0xf4>)
 8000562:	2200      	movs	r2, #0
 8000564:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000566:	4b28      	ldr	r3, [pc, #160]	; (8000608 <MX_TIM22_Init+0xf4>)
 8000568:	2200      	movs	r2, #0
 800056a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 800056c:	4b26      	ldr	r3, [pc, #152]	; (8000608 <MX_TIM22_Init+0xf4>)
 800056e:	0018      	movs	r0, r3
 8000570:	f003 f854 	bl	800361c <HAL_TIM_Base_Init>
 8000574:	1e03      	subs	r3, r0, #0
 8000576:	d001      	beq.n	800057c <MX_TIM22_Init+0x68>
  {
    Error_Handler();
 8000578:	f000 f88e 	bl	8000698 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800057c:	2118      	movs	r1, #24
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2280      	movs	r2, #128	; 0x80
 8000582:	0152      	lsls	r2, r2, #5
 8000584:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 8000586:	187a      	adds	r2, r7, r1
 8000588:	4b1f      	ldr	r3, [pc, #124]	; (8000608 <MX_TIM22_Init+0xf4>)
 800058a:	0011      	movs	r1, r2
 800058c:	0018      	movs	r0, r3
 800058e:	f003 f97f 	bl	8003890 <HAL_TIM_ConfigClockSource>
 8000592:	1e03      	subs	r3, r0, #0
 8000594:	d001      	beq.n	800059a <MX_TIM22_Init+0x86>
  {
    Error_Handler();
 8000596:	f000 f87f 	bl	8000698 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim22) != HAL_OK)
 800059a:	4b1b      	ldr	r3, [pc, #108]	; (8000608 <MX_TIM22_Init+0xf4>)
 800059c:	0018      	movs	r0, r3
 800059e:	f003 f869 	bl	8003674 <HAL_TIM_PWM_Init>
 80005a2:	1e03      	subs	r3, r0, #0
 80005a4:	d001      	beq.n	80005aa <MX_TIM22_Init+0x96>
  {
    Error_Handler();
 80005a6:	f000 f877 	bl	8000698 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005aa:	2110      	movs	r1, #16
 80005ac:	187b      	adds	r3, r7, r1
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	2200      	movs	r2, #0
 80005b6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 80005b8:	187a      	adds	r2, r7, r1
 80005ba:	4b13      	ldr	r3, [pc, #76]	; (8000608 <MX_TIM22_Init+0xf4>)
 80005bc:	0011      	movs	r1, r2
 80005be:	0018      	movs	r0, r3
 80005c0:	f003 fc39 	bl	8003e36 <HAL_TIMEx_MasterConfigSynchronization>
 80005c4:	1e03      	subs	r3, r0, #0
 80005c6:	d001      	beq.n	80005cc <MX_TIM22_Init+0xb8>
  {
    Error_Handler();
 80005c8:	f000 f866 	bl	8000698 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005cc:	003b      	movs	r3, r7
 80005ce:	2260      	movs	r2, #96	; 0x60
 80005d0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80005d2:	003b      	movs	r3, r7
 80005d4:	2200      	movs	r2, #0
 80005d6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005d8:	003b      	movs	r3, r7
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005de:	003b      	movs	r3, r7
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005e4:	0039      	movs	r1, r7
 80005e6:	4b08      	ldr	r3, [pc, #32]	; (8000608 <MX_TIM22_Init+0xf4>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	0018      	movs	r0, r3
 80005ec:	f003 f898 	bl	8003720 <HAL_TIM_PWM_ConfigChannel>
 80005f0:	1e03      	subs	r3, r0, #0
 80005f2:	d001      	beq.n	80005f8 <MX_TIM22_Init+0xe4>
  {
    Error_Handler();
 80005f4:	f000 f850 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */
  HAL_TIM_MspPostInit(&htim22);
 80005f8:	4b03      	ldr	r3, [pc, #12]	; (8000608 <MX_TIM22_Init+0xf4>)
 80005fa:	0018      	movs	r0, r3
 80005fc:	f000 f88a 	bl	8000714 <HAL_TIM_MspPostInit>

}
 8000600:	46c0      	nop			; (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	b00a      	add	sp, #40	; 0x28
 8000606:	bd80      	pop	{r7, pc}
 8000608:	200003c4 	.word	0x200003c4
 800060c:	40011400 	.word	0x40011400

08000610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b089      	sub	sp, #36	; 0x24
 8000614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	240c      	movs	r4, #12
 8000618:	193b      	adds	r3, r7, r4
 800061a:	0018      	movs	r0, r3
 800061c:	2314      	movs	r3, #20
 800061e:	001a      	movs	r2, r3
 8000620:	2100      	movs	r1, #0
 8000622:	f007 fe99 	bl	8008358 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <MX_GPIO_Init+0x84>)
 8000628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800062a:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <MX_GPIO_Init+0x84>)
 800062c:	2101      	movs	r1, #1
 800062e:	430a      	orrs	r2, r1
 8000630:	62da      	str	r2, [r3, #44]	; 0x2c
 8000632:	4b18      	ldr	r3, [pc, #96]	; (8000694 <MX_GPIO_Init+0x84>)
 8000634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000636:	2201      	movs	r2, #1
 8000638:	4013      	ands	r3, r2
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063e:	4b15      	ldr	r3, [pc, #84]	; (8000694 <MX_GPIO_Init+0x84>)
 8000640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000642:	4b14      	ldr	r3, [pc, #80]	; (8000694 <MX_GPIO_Init+0x84>)
 8000644:	2102      	movs	r1, #2
 8000646:	430a      	orrs	r2, r1
 8000648:	62da      	str	r2, [r3, #44]	; 0x2c
 800064a:	4b12      	ldr	r3, [pc, #72]	; (8000694 <MX_GPIO_Init+0x84>)
 800064c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800064e:	2202      	movs	r2, #2
 8000650:	4013      	ands	r3, r2
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000656:	23a0      	movs	r3, #160	; 0xa0
 8000658:	05db      	lsls	r3, r3, #23
 800065a:	2200      	movs	r2, #0
 800065c:	210f      	movs	r1, #15
 800065e:	0018      	movs	r0, r3
 8000660:	f000 fc30 	bl	8000ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000664:	0021      	movs	r1, r4
 8000666:	187b      	adds	r3, r7, r1
 8000668:	220f      	movs	r2, #15
 800066a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2201      	movs	r2, #1
 8000670:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067e:	187a      	adds	r2, r7, r1
 8000680:	23a0      	movs	r3, #160	; 0xa0
 8000682:	05db      	lsls	r3, r3, #23
 8000684:	0011      	movs	r1, r2
 8000686:	0018      	movs	r0, r3
 8000688:	f000 faa6 	bl	8000bd8 <HAL_GPIO_Init>

}
 800068c:	46c0      	nop			; (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	b009      	add	sp, #36	; 0x24
 8000692:	bd90      	pop	{r4, r7, pc}
 8000694:	40021000 	.word	0x40021000

08000698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a8:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <HAL_MspInit+0x24>)
 80006aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <HAL_MspInit+0x24>)
 80006ae:	2101      	movs	r1, #1
 80006b0:	430a      	orrs	r2, r1
 80006b2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b4:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <HAL_MspInit+0x24>)
 80006b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006b8:	4b03      	ldr	r3, [pc, #12]	; (80006c8 <HAL_MspInit+0x24>)
 80006ba:	2180      	movs	r1, #128	; 0x80
 80006bc:	0549      	lsls	r1, r1, #21
 80006be:	430a      	orrs	r2, r1
 80006c0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40021000 	.word	0x40021000

080006cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	2380      	movs	r3, #128	; 0x80
 80006da:	05db      	lsls	r3, r3, #23
 80006dc:	429a      	cmp	r2, r3
 80006de:	d106      	bne.n	80006ee <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <HAL_TIM_Base_MspInit+0x40>)
 80006e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <HAL_TIM_Base_MspInit+0x40>)
 80006e6:	2101      	movs	r1, #1
 80006e8:	430a      	orrs	r2, r1
 80006ea:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 80006ec:	e00a      	b.n	8000704 <HAL_TIM_Base_MspInit+0x38>
  else if(htim_base->Instance==TIM22)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a07      	ldr	r2, [pc, #28]	; (8000710 <HAL_TIM_Base_MspInit+0x44>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d105      	bne.n	8000704 <HAL_TIM_Base_MspInit+0x38>
    __HAL_RCC_TIM22_CLK_ENABLE();
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <HAL_TIM_Base_MspInit+0x40>)
 80006fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006fc:	4b03      	ldr	r3, [pc, #12]	; (800070c <HAL_TIM_Base_MspInit+0x40>)
 80006fe:	2120      	movs	r1, #32
 8000700:	430a      	orrs	r2, r1
 8000702:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000704:	46c0      	nop			; (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	b002      	add	sp, #8
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40021000 	.word	0x40021000
 8000710:	40011400 	.word	0x40011400

08000714 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	; 0x28
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	2314      	movs	r3, #20
 800071e:	18fb      	adds	r3, r7, r3
 8000720:	0018      	movs	r0, r3
 8000722:	2314      	movs	r3, #20
 8000724:	001a      	movs	r2, r3
 8000726:	2100      	movs	r1, #0
 8000728:	f007 fe16 	bl	8008358 <memset>
  if(htim->Instance==TIM2)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	2380      	movs	r3, #128	; 0x80
 8000732:	05db      	lsls	r3, r3, #23
 8000734:	429a      	cmp	r2, r3
 8000736:	d123      	bne.n	8000780 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000738:	4b27      	ldr	r3, [pc, #156]	; (80007d8 <HAL_TIM_MspPostInit+0xc4>)
 800073a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800073c:	4b26      	ldr	r3, [pc, #152]	; (80007d8 <HAL_TIM_MspPostInit+0xc4>)
 800073e:	2101      	movs	r1, #1
 8000740:	430a      	orrs	r2, r1
 8000742:	62da      	str	r2, [r3, #44]	; 0x2c
 8000744:	4b24      	ldr	r3, [pc, #144]	; (80007d8 <HAL_TIM_MspPostInit+0xc4>)
 8000746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000748:	2201      	movs	r2, #1
 800074a:	4013      	ands	r3, r2
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000750:	2114      	movs	r1, #20
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2220      	movs	r2, #32
 8000756:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000758:	187b      	adds	r3, r7, r1
 800075a:	2202      	movs	r2, #2
 800075c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	187b      	adds	r3, r7, r1
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000764:	187b      	adds	r3, r7, r1
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2205      	movs	r2, #5
 800076e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000770:	187a      	adds	r2, r7, r1
 8000772:	23a0      	movs	r3, #160	; 0xa0
 8000774:	05db      	lsls	r3, r3, #23
 8000776:	0011      	movs	r1, r2
 8000778:	0018      	movs	r0, r3
 800077a:	f000 fa2d 	bl	8000bd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM22_MspPostInit 1 */

  /* USER CODE END TIM22_MspPostInit 1 */
  }

}
 800077e:	e026      	b.n	80007ce <HAL_TIM_MspPostInit+0xba>
  else if(htim->Instance==TIM22)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a15      	ldr	r2, [pc, #84]	; (80007dc <HAL_TIM_MspPostInit+0xc8>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d121      	bne.n	80007ce <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <HAL_TIM_MspPostInit+0xc4>)
 800078c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <HAL_TIM_MspPostInit+0xc4>)
 8000790:	2102      	movs	r1, #2
 8000792:	430a      	orrs	r2, r1
 8000794:	62da      	str	r2, [r3, #44]	; 0x2c
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <HAL_TIM_MspPostInit+0xc4>)
 8000798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800079a:	2202      	movs	r2, #2
 800079c:	4013      	ands	r3, r2
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007a2:	2114      	movs	r1, #20
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	2210      	movs	r2, #16
 80007a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	2202      	movs	r2, #2
 80007ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM22;
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2204      	movs	r2, #4
 80007c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	4a06      	ldr	r2, [pc, #24]	; (80007e0 <HAL_TIM_MspPostInit+0xcc>)
 80007c6:	0019      	movs	r1, r3
 80007c8:	0010      	movs	r0, r2
 80007ca:	f000 fa05 	bl	8000bd8 <HAL_GPIO_Init>
}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	46bd      	mov	sp, r7
 80007d2:	b00a      	add	sp, #40	; 0x28
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	40021000 	.word	0x40021000
 80007dc:	40011400 	.word	0x40011400
 80007e0:	50000400 	.word	0x50000400

080007e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <HardFault_Handler+0x4>

080007f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007f8:	46c0      	nop			; (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800080c:	f000 f8cc 	bl	80009a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000810:	46c0      	nop			; (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800081c:	4b03      	ldr	r3, [pc, #12]	; (800082c <USB_IRQHandler+0x14>)
 800081e:	0018      	movs	r0, r3
 8000820:	f000 fcbe 	bl	80011a0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000824:	46c0      	nop			; (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	200010ac 	.word	0x200010ac

08000830 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000834:	4b17      	ldr	r3, [pc, #92]	; (8000894 <SystemInit+0x64>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b16      	ldr	r3, [pc, #88]	; (8000894 <SystemInit+0x64>)
 800083a:	2180      	movs	r1, #128	; 0x80
 800083c:	0049      	lsls	r1, r1, #1
 800083e:	430a      	orrs	r2, r1
 8000840:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <SystemInit+0x64>)
 8000844:	68da      	ldr	r2, [r3, #12]
 8000846:	4b13      	ldr	r3, [pc, #76]	; (8000894 <SystemInit+0x64>)
 8000848:	4913      	ldr	r1, [pc, #76]	; (8000898 <SystemInit+0x68>)
 800084a:	400a      	ands	r2, r1
 800084c:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <SystemInit+0x64>)
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <SystemInit+0x64>)
 8000854:	4911      	ldr	r1, [pc, #68]	; (800089c <SystemInit+0x6c>)
 8000856:	400a      	ands	r2, r1
 8000858:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <SystemInit+0x64>)
 800085c:	689a      	ldr	r2, [r3, #8]
 800085e:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <SystemInit+0x64>)
 8000860:	2101      	movs	r1, #1
 8000862:	438a      	bics	r2, r1
 8000864:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <SystemInit+0x64>)
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <SystemInit+0x64>)
 800086c:	490c      	ldr	r1, [pc, #48]	; (80008a0 <SystemInit+0x70>)
 800086e:	400a      	ands	r2, r1
 8000870:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <SystemInit+0x64>)
 8000874:	68da      	ldr	r2, [r3, #12]
 8000876:	4b07      	ldr	r3, [pc, #28]	; (8000894 <SystemInit+0x64>)
 8000878:	490a      	ldr	r1, [pc, #40]	; (80008a4 <SystemInit+0x74>)
 800087a:	400a      	ands	r2, r1
 800087c:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800087e:	4b05      	ldr	r3, [pc, #20]	; (8000894 <SystemInit+0x64>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000884:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <SystemInit+0x78>)
 8000886:	2280      	movs	r2, #128	; 0x80
 8000888:	0512      	lsls	r2, r2, #20
 800088a:	609a      	str	r2, [r3, #8]
#endif
}
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	40021000 	.word	0x40021000
 8000898:	88ff400c 	.word	0x88ff400c
 800089c:	fef6fff6 	.word	0xfef6fff6
 80008a0:	fffbffff 	.word	0xfffbffff
 80008a4:	ff02ffff 	.word	0xff02ffff
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80008ac:	480d      	ldr	r0, [pc, #52]	; (80008e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80008b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80008b2:	e003      	b.n	80008bc <LoopCopyDataInit>

080008b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80008b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80008b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80008ba:	3104      	adds	r1, #4

080008bc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80008bc:	480b      	ldr	r0, [pc, #44]	; (80008ec <LoopForever+0xa>)
  ldr  r3, =_edata
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <LoopForever+0xe>)
  adds  r2, r0, r1
 80008c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80008c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80008c4:	d3f6      	bcc.n	80008b4 <CopyDataInit>
  ldr  r2, =_sbss
 80008c6:	4a0b      	ldr	r2, [pc, #44]	; (80008f4 <LoopForever+0x12>)
  b  LoopFillZerobss
 80008c8:	e002      	b.n	80008d0 <LoopFillZerobss>

080008ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80008ca:	2300      	movs	r3, #0
  str  r3, [r2]
 80008cc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008ce:	3204      	adds	r2, #4

080008d0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <LoopForever+0x16>)
  cmp  r2, r3
 80008d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80008d4:	d3f9      	bcc.n	80008ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008d6:	f7ff ffab 	bl	8000830 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008da:	f007 fd19 	bl	8008310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008de:	f7ff fcdf 	bl	80002a0 <main>

080008e2 <LoopForever>:

LoopForever:
    b LoopForever
 80008e2:	e7fe      	b.n	80008e2 <LoopForever>
  ldr   r0, =_estack
 80008e4:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 80008e8:	080084dc 	.word	0x080084dc
  ldr  r0, =_sdata
 80008ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80008f0:	20000180 	.word	0x20000180
  ldr  r2, =_sbss
 80008f4:	20000180 	.word	0x20000180
  ldr  r3, = _ebss
 80008f8:	200013a0 	.word	0x200013a0

080008fc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008fc:	e7fe      	b.n	80008fc <ADC1_COMP_IRQHandler>
	...

08000900 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000906:	1dfb      	adds	r3, r7, #7
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800090c:	4b0b      	ldr	r3, [pc, #44]	; (800093c <HAL_Init+0x3c>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	4b0a      	ldr	r3, [pc, #40]	; (800093c <HAL_Init+0x3c>)
 8000912:	2140      	movs	r1, #64	; 0x40
 8000914:	430a      	orrs	r2, r1
 8000916:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000918:	2000      	movs	r0, #0
 800091a:	f000 f811 	bl	8000940 <HAL_InitTick>
 800091e:	1e03      	subs	r3, r0, #0
 8000920:	d003      	beq.n	800092a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000922:	1dfb      	adds	r3, r7, #7
 8000924:	2201      	movs	r2, #1
 8000926:	701a      	strb	r2, [r3, #0]
 8000928:	e001      	b.n	800092e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800092a:	f7ff febb 	bl	80006a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	781b      	ldrb	r3, [r3, #0]
}
 8000932:	0018      	movs	r0, r3
 8000934:	46bd      	mov	sp, r7
 8000936:	b002      	add	sp, #8
 8000938:	bd80      	pop	{r7, pc}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	40022000 	.word	0x40022000

08000940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000940:	b590      	push	{r4, r7, lr}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <HAL_InitTick+0x5c>)
 800094a:	681c      	ldr	r4, [r3, #0]
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <HAL_InitTick+0x60>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	0019      	movs	r1, r3
 8000952:	23fa      	movs	r3, #250	; 0xfa
 8000954:	0098      	lsls	r0, r3, #2
 8000956:	f7ff fbd7 	bl	8000108 <__udivsi3>
 800095a:	0003      	movs	r3, r0
 800095c:	0019      	movs	r1, r3
 800095e:	0020      	movs	r0, r4
 8000960:	f7ff fbd2 	bl	8000108 <__udivsi3>
 8000964:	0003      	movs	r3, r0
 8000966:	0018      	movs	r0, r3
 8000968:	f000 f929 	bl	8000bbe <HAL_SYSTICK_Config>
 800096c:	1e03      	subs	r3, r0, #0
 800096e:	d001      	beq.n	8000974 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000970:	2301      	movs	r3, #1
 8000972:	e00f      	b.n	8000994 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2b03      	cmp	r3, #3
 8000978:	d80b      	bhi.n	8000992 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800097a:	6879      	ldr	r1, [r7, #4]
 800097c:	2301      	movs	r3, #1
 800097e:	425b      	negs	r3, r3
 8000980:	2200      	movs	r2, #0
 8000982:	0018      	movs	r0, r3
 8000984:	f000 f8f6 	bl	8000b74 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_InitTick+0x64>)
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800098e:	2300      	movs	r3, #0
 8000990:	e000      	b.n	8000994 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
}
 8000994:	0018      	movs	r0, r3
 8000996:	46bd      	mov	sp, r7
 8000998:	b003      	add	sp, #12
 800099a:	bd90      	pop	{r4, r7, pc}
 800099c:	20000004 	.word	0x20000004
 80009a0:	2000000c 	.word	0x2000000c
 80009a4:	20000008 	.word	0x20000008

080009a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009ac:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <HAL_IncTick+0x1c>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	001a      	movs	r2, r3
 80009b2:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <HAL_IncTick+0x20>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	18d2      	adds	r2, r2, r3
 80009b8:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <HAL_IncTick+0x20>)
 80009ba:	601a      	str	r2, [r3, #0]
}
 80009bc:	46c0      	nop			; (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	2000000c 	.word	0x2000000c
 80009c8:	2000043c 	.word	0x2000043c

080009cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  return uwTick;
 80009d0:	4b02      	ldr	r3, [pc, #8]	; (80009dc <HAL_GetTick+0x10>)
 80009d2:	681b      	ldr	r3, [r3, #0]
}
 80009d4:	0018      	movs	r0, r3
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	2000043c 	.word	0x2000043c

080009e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009e8:	f7ff fff0 	bl	80009cc <HAL_GetTick>
 80009ec:	0003      	movs	r3, r0
 80009ee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	3301      	adds	r3, #1
 80009f8:	d005      	beq.n	8000a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <HAL_Delay+0x40>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	001a      	movs	r2, r3
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	189b      	adds	r3, r3, r2
 8000a04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	f7ff ffe0 	bl	80009cc <HAL_GetTick>
 8000a0c:	0002      	movs	r2, r0
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d8f7      	bhi.n	8000a08 <HAL_Delay+0x28>
  {
  }
}
 8000a18:	46c0      	nop			; (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b004      	add	sp, #16
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	2000000c 	.word	0x2000000c

08000a24 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	0002      	movs	r2, r0
 8000a2c:	1dfb      	adds	r3, r7, #7
 8000a2e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000a30:	1dfb      	adds	r3, r7, #7
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	001a      	movs	r2, r3
 8000a36:	231f      	movs	r3, #31
 8000a38:	401a      	ands	r2, r3
 8000a3a:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <NVIC_EnableIRQ+0x28>)
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	4091      	lsls	r1, r2
 8000a40:	000a      	movs	r2, r1
 8000a42:	601a      	str	r2, [r3, #0]
}
 8000a44:	46c0      	nop			; (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b002      	add	sp, #8
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	e000e100 	.word	0xe000e100

08000a50 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a50:	b590      	push	{r4, r7, lr}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	0002      	movs	r2, r0
 8000a58:	6039      	str	r1, [r7, #0]
 8000a5a:	1dfb      	adds	r3, r7, #7
 8000a5c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b7f      	cmp	r3, #127	; 0x7f
 8000a64:	d932      	bls.n	8000acc <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a66:	4a2f      	ldr	r2, [pc, #188]	; (8000b24 <NVIC_SetPriority+0xd4>)
 8000a68:	1dfb      	adds	r3, r7, #7
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	0019      	movs	r1, r3
 8000a6e:	230f      	movs	r3, #15
 8000a70:	400b      	ands	r3, r1
 8000a72:	3b08      	subs	r3, #8
 8000a74:	089b      	lsrs	r3, r3, #2
 8000a76:	3306      	adds	r3, #6
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	18d3      	adds	r3, r2, r3
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	1dfa      	adds	r2, r7, #7
 8000a82:	7812      	ldrb	r2, [r2, #0]
 8000a84:	0011      	movs	r1, r2
 8000a86:	2203      	movs	r2, #3
 8000a88:	400a      	ands	r2, r1
 8000a8a:	00d2      	lsls	r2, r2, #3
 8000a8c:	21ff      	movs	r1, #255	; 0xff
 8000a8e:	4091      	lsls	r1, r2
 8000a90:	000a      	movs	r2, r1
 8000a92:	43d2      	mvns	r2, r2
 8000a94:	401a      	ands	r2, r3
 8000a96:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	019b      	lsls	r3, r3, #6
 8000a9c:	22ff      	movs	r2, #255	; 0xff
 8000a9e:	401a      	ands	r2, r3
 8000aa0:	1dfb      	adds	r3, r7, #7
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	4003      	ands	r3, r0
 8000aaa:	00db      	lsls	r3, r3, #3
 8000aac:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aae:	481d      	ldr	r0, [pc, #116]	; (8000b24 <NVIC_SetPriority+0xd4>)
 8000ab0:	1dfb      	adds	r3, r7, #7
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	001c      	movs	r4, r3
 8000ab6:	230f      	movs	r3, #15
 8000ab8:	4023      	ands	r3, r4
 8000aba:	3b08      	subs	r3, #8
 8000abc:	089b      	lsrs	r3, r3, #2
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	3306      	adds	r3, #6
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	18c3      	adds	r3, r0, r3
 8000ac6:	3304      	adds	r3, #4
 8000ac8:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000aca:	e027      	b.n	8000b1c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000acc:	4a16      	ldr	r2, [pc, #88]	; (8000b28 <NVIC_SetPriority+0xd8>)
 8000ace:	1dfb      	adds	r3, r7, #7
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	b25b      	sxtb	r3, r3
 8000ad4:	089b      	lsrs	r3, r3, #2
 8000ad6:	33c0      	adds	r3, #192	; 0xc0
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	589b      	ldr	r3, [r3, r2]
 8000adc:	1dfa      	adds	r2, r7, #7
 8000ade:	7812      	ldrb	r2, [r2, #0]
 8000ae0:	0011      	movs	r1, r2
 8000ae2:	2203      	movs	r2, #3
 8000ae4:	400a      	ands	r2, r1
 8000ae6:	00d2      	lsls	r2, r2, #3
 8000ae8:	21ff      	movs	r1, #255	; 0xff
 8000aea:	4091      	lsls	r1, r2
 8000aec:	000a      	movs	r2, r1
 8000aee:	43d2      	mvns	r2, r2
 8000af0:	401a      	ands	r2, r3
 8000af2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	019b      	lsls	r3, r3, #6
 8000af8:	22ff      	movs	r2, #255	; 0xff
 8000afa:	401a      	ands	r2, r3
 8000afc:	1dfb      	adds	r3, r7, #7
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	0018      	movs	r0, r3
 8000b02:	2303      	movs	r3, #3
 8000b04:	4003      	ands	r3, r0
 8000b06:	00db      	lsls	r3, r3, #3
 8000b08:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b0a:	4807      	ldr	r0, [pc, #28]	; (8000b28 <NVIC_SetPriority+0xd8>)
 8000b0c:	1dfb      	adds	r3, r7, #7
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	b25b      	sxtb	r3, r3
 8000b12:	089b      	lsrs	r3, r3, #2
 8000b14:	430a      	orrs	r2, r1
 8000b16:	33c0      	adds	r3, #192	; 0xc0
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	501a      	str	r2, [r3, r0]
}
 8000b1c:	46c0      	nop			; (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	b003      	add	sp, #12
 8000b22:	bd90      	pop	{r4, r7, pc}
 8000b24:	e000ed00 	.word	0xe000ed00
 8000b28:	e000e100 	.word	0xe000e100

08000b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	4a0c      	ldr	r2, [pc, #48]	; (8000b6c <SysTick_Config+0x40>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d901      	bls.n	8000b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e010      	b.n	8000b64 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <SysTick_Config+0x44>)
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	3a01      	subs	r2, #1
 8000b48:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	425b      	negs	r3, r3
 8000b4e:	2103      	movs	r1, #3
 8000b50:	0018      	movs	r0, r3
 8000b52:	f7ff ff7d 	bl	8000a50 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <SysTick_Config+0x44>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <SysTick_Config+0x44>)
 8000b5e:	2207      	movs	r2, #7
 8000b60:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b62:	2300      	movs	r3, #0
}
 8000b64:	0018      	movs	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b002      	add	sp, #8
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	00ffffff 	.word	0x00ffffff
 8000b70:	e000e010 	.word	0xe000e010

08000b74 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60b9      	str	r1, [r7, #8]
 8000b7c:	607a      	str	r2, [r7, #4]
 8000b7e:	210f      	movs	r1, #15
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	1c02      	adds	r2, r0, #0
 8000b84:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	b25b      	sxtb	r3, r3
 8000b8e:	0011      	movs	r1, r2
 8000b90:	0018      	movs	r0, r3
 8000b92:	f7ff ff5d 	bl	8000a50 <NVIC_SetPriority>
}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	b004      	add	sp, #16
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	0002      	movs	r2, r0
 8000ba6:	1dfb      	adds	r3, r7, #7
 8000ba8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000baa:	1dfb      	adds	r3, r7, #7
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	b25b      	sxtb	r3, r3
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f7ff ff37 	bl	8000a24 <NVIC_EnableIRQ>
}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b002      	add	sp, #8
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f7ff ffaf 	bl	8000b2c <SysTick_Config>
 8000bce:	0003      	movs	r3, r0
}
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b002      	add	sp, #8
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000bee:	e14f      	b.n	8000e90 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	697a      	ldr	r2, [r7, #20]
 8000bf8:	4091      	lsls	r1, r2
 8000bfa:	000a      	movs	r2, r1
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d100      	bne.n	8000c08 <HAL_GPIO_Init+0x30>
 8000c06:	e140      	b.n	8000e8a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d00b      	beq.n	8000c28 <HAL_GPIO_Init+0x50>
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d007      	beq.n	8000c28 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c1c:	2b11      	cmp	r3, #17
 8000c1e:	d003      	beq.n	8000c28 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	2b12      	cmp	r3, #18
 8000c26:	d130      	bne.n	8000c8a <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	2203      	movs	r2, #3
 8000c34:	409a      	lsls	r2, r3
 8000c36:	0013      	movs	r3, r2
 8000c38:	43da      	mvns	r2, r3
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	68da      	ldr	r2, [r3, #12]
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	409a      	lsls	r2, r3
 8000c4a:	0013      	movs	r3, r2
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c5e:	2201      	movs	r2, #1
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	409a      	lsls	r2, r3
 8000c64:	0013      	movs	r3, r2
 8000c66:	43da      	mvns	r2, r3
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	091b      	lsrs	r3, r3, #4
 8000c74:	2201      	movs	r2, #1
 8000c76:	401a      	ands	r2, r3
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	409a      	lsls	r2, r3
 8000c7c:	0013      	movs	r3, r2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	2203      	movs	r2, #3
 8000c96:	409a      	lsls	r2, r3
 8000c98:	0013      	movs	r3, r2
 8000c9a:	43da      	mvns	r2, r3
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	689a      	ldr	r2, [r3, #8]
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	409a      	lsls	r2, r3
 8000cac:	0013      	movs	r3, r2
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	d003      	beq.n	8000cca <HAL_GPIO_Init+0xf2>
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	2b12      	cmp	r3, #18
 8000cc8:	d123      	bne.n	8000d12 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	08da      	lsrs	r2, r3, #3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	3208      	adds	r2, #8
 8000cd2:	0092      	lsls	r2, r2, #2
 8000cd4:	58d3      	ldr	r3, [r2, r3]
 8000cd6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	2207      	movs	r2, #7
 8000cdc:	4013      	ands	r3, r2
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	220f      	movs	r2, #15
 8000ce2:	409a      	lsls	r2, r3
 8000ce4:	0013      	movs	r3, r2
 8000ce6:	43da      	mvns	r2, r3
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	4013      	ands	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	691a      	ldr	r2, [r3, #16]
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	2107      	movs	r1, #7
 8000cf6:	400b      	ands	r3, r1
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	409a      	lsls	r2, r3
 8000cfc:	0013      	movs	r3, r2
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	08da      	lsrs	r2, r3, #3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3208      	adds	r2, #8
 8000d0c:	0092      	lsls	r2, r2, #2
 8000d0e:	6939      	ldr	r1, [r7, #16]
 8000d10:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	409a      	lsls	r2, r3
 8000d20:	0013      	movs	r3, r2
 8000d22:	43da      	mvns	r2, r3
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	4013      	ands	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	2203      	movs	r2, #3
 8000d30:	401a      	ands	r2, r3
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	409a      	lsls	r2, r3
 8000d38:	0013      	movs	r3, r2
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685a      	ldr	r2, [r3, #4]
 8000d4a:	2380      	movs	r3, #128	; 0x80
 8000d4c:	055b      	lsls	r3, r3, #21
 8000d4e:	4013      	ands	r3, r2
 8000d50:	d100      	bne.n	8000d54 <HAL_GPIO_Init+0x17c>
 8000d52:	e09a      	b.n	8000e8a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d54:	4b54      	ldr	r3, [pc, #336]	; (8000ea8 <HAL_GPIO_Init+0x2d0>)
 8000d56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d58:	4b53      	ldr	r3, [pc, #332]	; (8000ea8 <HAL_GPIO_Init+0x2d0>)
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d60:	4a52      	ldr	r2, [pc, #328]	; (8000eac <HAL_GPIO_Init+0x2d4>)
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	089b      	lsrs	r3, r3, #2
 8000d66:	3302      	adds	r3, #2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	589b      	ldr	r3, [r3, r2]
 8000d6c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	2203      	movs	r2, #3
 8000d72:	4013      	ands	r3, r2
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	220f      	movs	r2, #15
 8000d78:	409a      	lsls	r2, r3
 8000d7a:	0013      	movs	r3, r2
 8000d7c:	43da      	mvns	r2, r3
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	4013      	ands	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	23a0      	movs	r3, #160	; 0xa0
 8000d88:	05db      	lsls	r3, r3, #23
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d019      	beq.n	8000dc2 <HAL_GPIO_Init+0x1ea>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a47      	ldr	r2, [pc, #284]	; (8000eb0 <HAL_GPIO_Init+0x2d8>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d013      	beq.n	8000dbe <HAL_GPIO_Init+0x1e6>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a46      	ldr	r2, [pc, #280]	; (8000eb4 <HAL_GPIO_Init+0x2dc>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d00d      	beq.n	8000dba <HAL_GPIO_Init+0x1e2>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a45      	ldr	r2, [pc, #276]	; (8000eb8 <HAL_GPIO_Init+0x2e0>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d007      	beq.n	8000db6 <HAL_GPIO_Init+0x1de>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a44      	ldr	r2, [pc, #272]	; (8000ebc <HAL_GPIO_Init+0x2e4>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d101      	bne.n	8000db2 <HAL_GPIO_Init+0x1da>
 8000dae:	2305      	movs	r3, #5
 8000db0:	e008      	b.n	8000dc4 <HAL_GPIO_Init+0x1ec>
 8000db2:	2306      	movs	r3, #6
 8000db4:	e006      	b.n	8000dc4 <HAL_GPIO_Init+0x1ec>
 8000db6:	2303      	movs	r3, #3
 8000db8:	e004      	b.n	8000dc4 <HAL_GPIO_Init+0x1ec>
 8000dba:	2302      	movs	r3, #2
 8000dbc:	e002      	b.n	8000dc4 <HAL_GPIO_Init+0x1ec>
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e000      	b.n	8000dc4 <HAL_GPIO_Init+0x1ec>
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	697a      	ldr	r2, [r7, #20]
 8000dc6:	2103      	movs	r1, #3
 8000dc8:	400a      	ands	r2, r1
 8000dca:	0092      	lsls	r2, r2, #2
 8000dcc:	4093      	lsls	r3, r2
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dd4:	4935      	ldr	r1, [pc, #212]	; (8000eac <HAL_GPIO_Init+0x2d4>)
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	089b      	lsrs	r3, r3, #2
 8000dda:	3302      	adds	r3, #2
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000de2:	4b37      	ldr	r3, [pc, #220]	; (8000ec0 <HAL_GPIO_Init+0x2e8>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	43da      	mvns	r2, r3
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685a      	ldr	r2, [r3, #4]
 8000df6:	2380      	movs	r3, #128	; 0x80
 8000df8:	025b      	lsls	r3, r3, #9
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	d003      	beq.n	8000e06 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e06:	4b2e      	ldr	r3, [pc, #184]	; (8000ec0 <HAL_GPIO_Init+0x2e8>)
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000e0c:	4b2c      	ldr	r3, [pc, #176]	; (8000ec0 <HAL_GPIO_Init+0x2e8>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	43da      	mvns	r2, r3
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	2380      	movs	r3, #128	; 0x80
 8000e22:	029b      	lsls	r3, r3, #10
 8000e24:	4013      	ands	r3, r2
 8000e26:	d003      	beq.n	8000e30 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e30:	4b23      	ldr	r3, [pc, #140]	; (8000ec0 <HAL_GPIO_Init+0x2e8>)
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e36:	4b22      	ldr	r3, [pc, #136]	; (8000ec0 <HAL_GPIO_Init+0x2e8>)
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685a      	ldr	r2, [r3, #4]
 8000e4a:	2380      	movs	r3, #128	; 0x80
 8000e4c:	035b      	lsls	r3, r3, #13
 8000e4e:	4013      	ands	r3, r2
 8000e50:	d003      	beq.n	8000e5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e5a:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <HAL_GPIO_Init+0x2e8>)
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e60:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <HAL_GPIO_Init+0x2e8>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	43da      	mvns	r2, r3
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685a      	ldr	r2, [r3, #4]
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	039b      	lsls	r3, r3, #14
 8000e78:	4013      	ands	r3, r2
 8000e7a:	d003      	beq.n	8000e84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e84:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_GPIO_Init+0x2e8>)
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	40da      	lsrs	r2, r3
 8000e98:	1e13      	subs	r3, r2, #0
 8000e9a:	d000      	beq.n	8000e9e <HAL_GPIO_Init+0x2c6>
 8000e9c:	e6a8      	b.n	8000bf0 <HAL_GPIO_Init+0x18>
  }
}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b006      	add	sp, #24
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40010000 	.word	0x40010000
 8000eb0:	50000400 	.word	0x50000400
 8000eb4:	50000800 	.word	0x50000800
 8000eb8:	50000c00 	.word	0x50000c00
 8000ebc:	50001c00 	.word	0x50001c00
 8000ec0:	40010400 	.word	0x40010400

08000ec4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	0008      	movs	r0, r1
 8000ece:	0011      	movs	r1, r2
 8000ed0:	1cbb      	adds	r3, r7, #2
 8000ed2:	1c02      	adds	r2, r0, #0
 8000ed4:	801a      	strh	r2, [r3, #0]
 8000ed6:	1c7b      	adds	r3, r7, #1
 8000ed8:	1c0a      	adds	r2, r1, #0
 8000eda:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000edc:	1c7b      	adds	r3, r7, #1
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d004      	beq.n	8000eee <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ee4:	1cbb      	adds	r3, r7, #2
 8000ee6:	881a      	ldrh	r2, [r3, #0]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000eec:	e003      	b.n	8000ef6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000eee:	1cbb      	adds	r3, r7, #2
 8000ef0:	881a      	ldrh	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b002      	add	sp, #8
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b084      	sub	sp, #16
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
 8000f06:	000a      	movs	r2, r1
 8000f08:	1cbb      	adds	r3, r7, #2
 8000f0a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	695b      	ldr	r3, [r3, #20]
 8000f10:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f12:	1cbb      	adds	r3, r7, #2
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	041a      	lsls	r2, r3, #16
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	1cb9      	adds	r1, r7, #2
 8000f22:	8809      	ldrh	r1, [r1, #0]
 8000f24:	400b      	ands	r3, r1
 8000f26:	431a      	orrs	r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	619a      	str	r2, [r3, #24]
}
 8000f2c:	46c0      	nop			; (mov r8, r8)
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	b004      	add	sp, #16
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f36:	b08b      	sub	sp, #44	; 0x2c
 8000f38:	af06      	add	r7, sp, #24
 8000f3a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e100      	b.n	8001148 <HAL_PCD_Init+0x214>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a81      	ldr	r2, [pc, #516]	; (8001150 <HAL_PCD_Init+0x21c>)
 8000f4a:	5c9b      	ldrb	r3, [r3, r2]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d108      	bne.n	8000f64 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	23aa      	movs	r3, #170	; 0xaa
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	2100      	movs	r1, #0
 8000f5a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f006 fe7a 	bl	8007c58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a7a      	ldr	r2, [pc, #488]	; (8001150 <HAL_PCD_Init+0x21c>)
 8000f68:	2103      	movs	r1, #3
 8000f6a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	0018      	movs	r0, r3
 8000f72:	f002 ffb9 	bl	8003ee8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f76:	230f      	movs	r3, #15
 8000f78:	18fb      	adds	r3, r7, r3
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
 8000f7e:	e058      	b.n	8001032 <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f80:	200f      	movs	r0, #15
 8000f82:	183b      	adds	r3, r7, r0
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	1c5a      	adds	r2, r3, #1
 8000f8a:	0013      	movs	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	189b      	adds	r3, r3, r2
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	18cb      	adds	r3, r1, r3
 8000f94:	3301      	adds	r3, #1
 8000f96:	2201      	movs	r2, #1
 8000f98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f9a:	183b      	adds	r3, r7, r0
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	1c5a      	adds	r2, r3, #1
 8000fa2:	0013      	movs	r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	189b      	adds	r3, r3, r2
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	183a      	adds	r2, r7, r0
 8000fac:	7812      	ldrb	r2, [r2, #0]
 8000fae:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000fb0:	183b      	adds	r3, r7, r0
 8000fb2:	781a      	ldrb	r2, [r3, #0]
 8000fb4:	0004      	movs	r4, r0
 8000fb6:	183b      	adds	r3, r7, r0
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	b298      	uxth	r0, r3
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	0013      	movs	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	189b      	adds	r3, r3, r2
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	18cb      	adds	r3, r1, r3
 8000fc8:	3336      	adds	r3, #54	; 0x36
 8000fca:	1c02      	adds	r2, r0, #0
 8000fcc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fce:	193b      	adds	r3, r7, r4
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	1c5a      	adds	r2, r3, #1
 8000fd6:	0013      	movs	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	189b      	adds	r3, r3, r2
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	18cb      	adds	r3, r1, r3
 8000fe0:	3303      	adds	r3, #3
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000fe6:	193b      	adds	r3, r7, r4
 8000fe8:	781a      	ldrb	r2, [r3, #0]
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	0013      	movs	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	189b      	adds	r3, r3, r2
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	18cb      	adds	r3, r1, r3
 8000ff6:	3338      	adds	r3, #56	; 0x38
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ffc:	193b      	adds	r3, r7, r4
 8000ffe:	781a      	ldrb	r2, [r3, #0]
 8001000:	6879      	ldr	r1, [r7, #4]
 8001002:	0013      	movs	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	189b      	adds	r3, r3, r2
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	18cb      	adds	r3, r1, r3
 800100c:	333c      	adds	r3, #60	; 0x3c
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001012:	193b      	adds	r3, r7, r4
 8001014:	781a      	ldrb	r2, [r3, #0]
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	0013      	movs	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	189b      	adds	r3, r3, r2
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	18cb      	adds	r3, r1, r3
 8001022:	3340      	adds	r3, #64	; 0x40
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001028:	193b      	adds	r3, r7, r4
 800102a:	781a      	ldrb	r2, [r3, #0]
 800102c:	193b      	adds	r3, r7, r4
 800102e:	3201      	adds	r2, #1
 8001030:	701a      	strb	r2, [r3, #0]
 8001032:	230f      	movs	r3, #15
 8001034:	18fb      	adds	r3, r7, r3
 8001036:	781a      	ldrb	r2, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	429a      	cmp	r2, r3
 800103e:	d39f      	bcc.n	8000f80 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001040:	230f      	movs	r3, #15
 8001042:	18fb      	adds	r3, r7, r3
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
 8001048:	e056      	b.n	80010f8 <HAL_PCD_Init+0x1c4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800104a:	240f      	movs	r4, #15
 800104c:	193b      	adds	r3, r7, r4
 800104e:	781a      	ldrb	r2, [r3, #0]
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	236a      	movs	r3, #106	; 0x6a
 8001054:	33ff      	adds	r3, #255	; 0xff
 8001056:	0019      	movs	r1, r3
 8001058:	0013      	movs	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	189b      	adds	r3, r3, r2
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	18c3      	adds	r3, r0, r3
 8001062:	185b      	adds	r3, r3, r1
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001068:	193b      	adds	r3, r7, r4
 800106a:	781a      	ldrb	r2, [r3, #0]
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	23b4      	movs	r3, #180	; 0xb4
 8001070:	0059      	lsls	r1, r3, #1
 8001072:	0013      	movs	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	189b      	adds	r3, r3, r2
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	18c3      	adds	r3, r0, r3
 800107c:	185b      	adds	r3, r3, r1
 800107e:	193a      	adds	r2, r7, r4
 8001080:	7812      	ldrb	r2, [r2, #0]
 8001082:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001084:	193b      	adds	r3, r7, r4
 8001086:	781a      	ldrb	r2, [r3, #0]
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	236c      	movs	r3, #108	; 0x6c
 800108c:	33ff      	adds	r3, #255	; 0xff
 800108e:	0019      	movs	r1, r3
 8001090:	0013      	movs	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	189b      	adds	r3, r3, r2
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	18c3      	adds	r3, r0, r3
 800109a:	185b      	adds	r3, r3, r1
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010a0:	193b      	adds	r3, r7, r4
 80010a2:	781a      	ldrb	r2, [r3, #0]
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	23bc      	movs	r3, #188	; 0xbc
 80010a8:	0059      	lsls	r1, r3, #1
 80010aa:	0013      	movs	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	189b      	adds	r3, r3, r2
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	18c3      	adds	r3, r0, r3
 80010b4:	185b      	adds	r3, r3, r1
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010ba:	193b      	adds	r3, r7, r4
 80010bc:	781a      	ldrb	r2, [r3, #0]
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	23be      	movs	r3, #190	; 0xbe
 80010c2:	0059      	lsls	r1, r3, #1
 80010c4:	0013      	movs	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	189b      	adds	r3, r3, r2
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	18c3      	adds	r3, r0, r3
 80010ce:	185b      	adds	r3, r3, r1
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010d4:	193b      	adds	r3, r7, r4
 80010d6:	781a      	ldrb	r2, [r3, #0]
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	23c0      	movs	r3, #192	; 0xc0
 80010dc:	0059      	lsls	r1, r3, #1
 80010de:	0013      	movs	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	189b      	adds	r3, r3, r2
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	18c3      	adds	r3, r0, r3
 80010e8:	185b      	adds	r3, r3, r1
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ee:	193b      	adds	r3, r7, r4
 80010f0:	781a      	ldrb	r2, [r3, #0]
 80010f2:	193b      	adds	r3, r7, r4
 80010f4:	3201      	adds	r2, #1
 80010f6:	701a      	strb	r2, [r3, #0]
 80010f8:	230f      	movs	r3, #15
 80010fa:	18fb      	adds	r3, r7, r3
 80010fc:	781a      	ldrb	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	429a      	cmp	r2, r3
 8001104:	d3a1      	bcc.n	800104a <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6818      	ldr	r0, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	466a      	mov	r2, sp
 800110e:	0011      	movs	r1, r2
 8001110:	001a      	movs	r2, r3
 8001112:	3210      	adds	r2, #16
 8001114:	ca70      	ldmia	r2!, {r4, r5, r6}
 8001116:	c170      	stmia	r1!, {r4, r5, r6}
 8001118:	ca30      	ldmia	r2!, {r4, r5}
 800111a:	c130      	stmia	r1!, {r4, r5}
 800111c:	6859      	ldr	r1, [r3, #4]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	f002 fefb 	bl	8003f1c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2224      	movs	r2, #36	; 0x24
 800112a:	2100      	movs	r1, #0
 800112c:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a07      	ldr	r2, [pc, #28]	; (8001150 <HAL_PCD_Init+0x21c>)
 8001132:	2101      	movs	r1, #1
 8001134:	5499      	strb	r1, [r3, r2]
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d103      	bne.n	8001146 <HAL_PCD_Init+0x212>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	0018      	movs	r0, r3
 8001142:	f001 fb63 	bl	800280c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001146:	2300      	movs	r3, #0
}
 8001148:	0018      	movs	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	b005      	add	sp, #20
 800114e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001150:	000002a9 	.word	0x000002a9

08001154 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	23aa      	movs	r3, #170	; 0xaa
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	5cd3      	ldrb	r3, [r2, r3]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d101      	bne.n	800116c <HAL_PCD_Start+0x18>
 8001168:	2302      	movs	r3, #2
 800116a:	e014      	b.n	8001196 <HAL_PCD_Start+0x42>
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	23aa      	movs	r3, #170	; 0xaa
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	2101      	movs	r1, #1
 8001174:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	0018      	movs	r0, r3
 800117c:	f002 fe9e 	bl	8003ebc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	0018      	movs	r0, r3
 8001186:	f004 fe77 	bl	8005e78 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	23aa      	movs	r3, #170	; 0xaa
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	2100      	movs	r1, #0
 8001192:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	0018      	movs	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	b002      	add	sp, #8
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	0018      	movs	r0, r3
 80011ae:	f004 fe79 	bl	8005ea4 <USB_ReadInterrupts>
 80011b2:	0002      	movs	r2, r0
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	021b      	lsls	r3, r3, #8
 80011b8:	401a      	ands	r2, r3
 80011ba:	2380      	movs	r3, #128	; 0x80
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	429a      	cmp	r2, r3
 80011c0:	d103      	bne.n	80011ca <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	0018      	movs	r0, r3
 80011c6:	f000 fbbb 	bl	8001940 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	0018      	movs	r0, r3
 80011d0:	f004 fe68 	bl	8005ea4 <USB_ReadInterrupts>
 80011d4:	0002      	movs	r2, r0
 80011d6:	2380      	movs	r3, #128	; 0x80
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	401a      	ands	r2, r3
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d114      	bne.n	800120e <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2244      	movs	r2, #68	; 0x44
 80011ea:	5a9b      	ldrh	r3, [r3, r2]
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	49a2      	ldr	r1, [pc, #648]	; (800147c <HAL_PCD_IRQHandler+0x2dc>)
 80011f4:	400a      	ands	r2, r1
 80011f6:	b291      	uxth	r1, r2
 80011f8:	2244      	movs	r2, #68	; 0x44
 80011fa:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	0018      	movs	r0, r3
 8001200:	f006 fdad 	bl	8007d5e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2100      	movs	r1, #0
 8001208:	0018      	movs	r0, r3
 800120a:	f000 f945 	bl	8001498 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	0018      	movs	r0, r3
 8001214:	f004 fe46 	bl	8005ea4 <USB_ReadInterrupts>
 8001218:	0002      	movs	r2, r0
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	01db      	lsls	r3, r3, #7
 800121e:	401a      	ands	r2, r3
 8001220:	2380      	movs	r3, #128	; 0x80
 8001222:	01db      	lsls	r3, r3, #7
 8001224:	429a      	cmp	r2, r3
 8001226:	d10b      	bne.n	8001240 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2244      	movs	r2, #68	; 0x44
 800122e:	5a9b      	ldrh	r3, [r3, r2]
 8001230:	b29a      	uxth	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4992      	ldr	r1, [pc, #584]	; (8001480 <HAL_PCD_IRQHandler+0x2e0>)
 8001238:	400a      	ands	r2, r1
 800123a:	b291      	uxth	r1, r2
 800123c:	2244      	movs	r2, #68	; 0x44
 800123e:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	0018      	movs	r0, r3
 8001246:	f004 fe2d 	bl	8005ea4 <USB_ReadInterrupts>
 800124a:	0002      	movs	r2, r0
 800124c:	2380      	movs	r3, #128	; 0x80
 800124e:	019b      	lsls	r3, r3, #6
 8001250:	401a      	ands	r2, r3
 8001252:	2380      	movs	r3, #128	; 0x80
 8001254:	019b      	lsls	r3, r3, #6
 8001256:	429a      	cmp	r2, r3
 8001258:	d10b      	bne.n	8001272 <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2244      	movs	r2, #68	; 0x44
 8001260:	5a9b      	ldrh	r3, [r3, r2]
 8001262:	b29a      	uxth	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4986      	ldr	r1, [pc, #536]	; (8001484 <HAL_PCD_IRQHandler+0x2e4>)
 800126a:	400a      	ands	r2, r1
 800126c:	b291      	uxth	r1, r2
 800126e:	2244      	movs	r2, #68	; 0x44
 8001270:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	0018      	movs	r0, r3
 8001278:	f004 fe14 	bl	8005ea4 <USB_ReadInterrupts>
 800127c:	0002      	movs	r2, r0
 800127e:	2380      	movs	r3, #128	; 0x80
 8001280:	015b      	lsls	r3, r3, #5
 8001282:	401a      	ands	r2, r3
 8001284:	2380      	movs	r3, #128	; 0x80
 8001286:	015b      	lsls	r3, r3, #5
 8001288:	429a      	cmp	r2, r3
 800128a:	d137      	bne.n	80012fc <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2240      	movs	r2, #64	; 0x40
 8001292:	5a9b      	ldrh	r3, [r3, r2]
 8001294:	b29a      	uxth	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2104      	movs	r1, #4
 800129c:	438a      	bics	r2, r1
 800129e:	b291      	uxth	r1, r2
 80012a0:	2240      	movs	r2, #64	; 0x40
 80012a2:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2240      	movs	r2, #64	; 0x40
 80012aa:	5a9b      	ldrh	r3, [r3, r2]
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2108      	movs	r1, #8
 80012b4:	438a      	bics	r2, r1
 80012b6:	b291      	uxth	r1, r2
 80012b8:	2240      	movs	r2, #64	; 0x40
 80012ba:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	23b8      	movs	r3, #184	; 0xb8
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	5cd3      	ldrb	r3, [r2, r3]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d109      	bne.n	80012dc <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	23b8      	movs	r3, #184	; 0xb8
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	2100      	movs	r1, #0
 80012d0:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2100      	movs	r1, #0
 80012d6:	0018      	movs	r0, r3
 80012d8:	f001 fac2 	bl	8002860 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	0018      	movs	r0, r3
 80012e0:	f006 fd7e 	bl	8007de0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2244      	movs	r2, #68	; 0x44
 80012ea:	5a9b      	ldrh	r3, [r3, r2]
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4965      	ldr	r1, [pc, #404]	; (8001488 <HAL_PCD_IRQHandler+0x2e8>)
 80012f4:	400a      	ands	r2, r1
 80012f6:	b291      	uxth	r1, r2
 80012f8:	2244      	movs	r2, #68	; 0x44
 80012fa:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	0018      	movs	r0, r3
 8001302:	f004 fdcf 	bl	8005ea4 <USB_ReadInterrupts>
 8001306:	0002      	movs	r2, r0
 8001308:	2380      	movs	r3, #128	; 0x80
 800130a:	011b      	lsls	r3, r3, #4
 800130c:	401a      	ands	r2, r3
 800130e:	2380      	movs	r3, #128	; 0x80
 8001310:	011b      	lsls	r3, r3, #4
 8001312:	429a      	cmp	r2, r3
 8001314:	d127      	bne.n	8001366 <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2240      	movs	r2, #64	; 0x40
 800131c:	5a9b      	ldrh	r3, [r3, r2]
 800131e:	b29a      	uxth	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2108      	movs	r1, #8
 8001326:	430a      	orrs	r2, r1
 8001328:	b291      	uxth	r1, r2
 800132a:	2240      	movs	r2, #64	; 0x40
 800132c:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2244      	movs	r2, #68	; 0x44
 8001334:	5a9b      	ldrh	r3, [r3, r2]
 8001336:	b29a      	uxth	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4953      	ldr	r1, [pc, #332]	; (800148c <HAL_PCD_IRQHandler+0x2ec>)
 800133e:	400a      	ands	r2, r1
 8001340:	b291      	uxth	r1, r2
 8001342:	2244      	movs	r2, #68	; 0x44
 8001344:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2240      	movs	r2, #64	; 0x40
 800134c:	5a9b      	ldrh	r3, [r3, r2]
 800134e:	b29a      	uxth	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2104      	movs	r1, #4
 8001356:	430a      	orrs	r2, r1
 8001358:	b291      	uxth	r1, r2
 800135a:	2240      	movs	r2, #64	; 0x40
 800135c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	0018      	movs	r0, r3
 8001362:	f006 fd21 	bl	8007da8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	0018      	movs	r0, r3
 800136c:	f004 fd9a 	bl	8005ea4 <USB_ReadInterrupts>
 8001370:	0002      	movs	r2, r0
 8001372:	2380      	movs	r3, #128	; 0x80
 8001374:	4013      	ands	r3, r2
 8001376:	2b80      	cmp	r3, #128	; 0x80
 8001378:	d145      	bne.n	8001406 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2244      	movs	r2, #68	; 0x44
 8001380:	5a9b      	ldrh	r3, [r3, r2]
 8001382:	b29a      	uxth	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2180      	movs	r1, #128	; 0x80
 800138a:	438a      	bics	r2, r1
 800138c:	b291      	uxth	r1, r2
 800138e:	2244      	movs	r2, #68	; 0x44
 8001390:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	23b8      	movs	r3, #184	; 0xb8
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	5cd3      	ldrb	r3, [r2, r3]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d12f      	bne.n	80013fe <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2240      	movs	r2, #64	; 0x40
 80013a4:	5a9b      	ldrh	r3, [r3, r2]
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2104      	movs	r1, #4
 80013ae:	430a      	orrs	r2, r1
 80013b0:	b291      	uxth	r1, r2
 80013b2:	2240      	movs	r2, #64	; 0x40
 80013b4:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2240      	movs	r2, #64	; 0x40
 80013bc:	5a9b      	ldrh	r3, [r3, r2]
 80013be:	b29a      	uxth	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2108      	movs	r1, #8
 80013c6:	430a      	orrs	r2, r1
 80013c8:	b291      	uxth	r1, r2
 80013ca:	2240      	movs	r2, #64	; 0x40
 80013cc:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	23b8      	movs	r3, #184	; 0xb8
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	2101      	movs	r1, #1
 80013d6:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2254      	movs	r2, #84	; 0x54
 80013de:	5a9b      	ldrh	r3, [r3, r2]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	089b      	lsrs	r3, r3, #2
 80013e4:	223c      	movs	r2, #60	; 0x3c
 80013e6:	4013      	ands	r3, r2
 80013e8:	0019      	movs	r1, r3
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	23b9      	movs	r3, #185	; 0xb9
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2101      	movs	r1, #1
 80013f6:	0018      	movs	r0, r3
 80013f8:	f001 fa32 	bl	8002860 <HAL_PCDEx_LPM_Callback>
 80013fc:	e003      	b.n	8001406 <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	0018      	movs	r0, r3
 8001402:	f006 fcd1 	bl	8007da8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	0018      	movs	r0, r3
 800140c:	f004 fd4a 	bl	8005ea4 <USB_ReadInterrupts>
 8001410:	0002      	movs	r2, r0
 8001412:	2380      	movs	r3, #128	; 0x80
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	401a      	ands	r2, r3
 8001418:	2380      	movs	r3, #128	; 0x80
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	429a      	cmp	r2, r3
 800141e:	d10f      	bne.n	8001440 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2244      	movs	r2, #68	; 0x44
 8001426:	5a9b      	ldrh	r3, [r3, r2]
 8001428:	b29a      	uxth	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4918      	ldr	r1, [pc, #96]	; (8001490 <HAL_PCD_IRQHandler+0x2f0>)
 8001430:	400a      	ands	r2, r1
 8001432:	b291      	uxth	r1, r2
 8001434:	2244      	movs	r2, #68	; 0x44
 8001436:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	0018      	movs	r0, r3
 800143c:	f006 fc80 	bl	8007d40 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	0018      	movs	r0, r3
 8001446:	f004 fd2d 	bl	8005ea4 <USB_ReadInterrupts>
 800144a:	0002      	movs	r2, r0
 800144c:	2380      	movs	r3, #128	; 0x80
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	401a      	ands	r2, r3
 8001452:	2380      	movs	r3, #128	; 0x80
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	429a      	cmp	r2, r3
 8001458:	d10b      	bne.n	8001472 <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2244      	movs	r2, #68	; 0x44
 8001460:	5a9b      	ldrh	r3, [r3, r2]
 8001462:	b29a      	uxth	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	490a      	ldr	r1, [pc, #40]	; (8001494 <HAL_PCD_IRQHandler+0x2f4>)
 800146a:	400a      	ands	r2, r1
 800146c:	b291      	uxth	r1, r2
 800146e:	2244      	movs	r2, #68	; 0x44
 8001470:	5299      	strh	r1, [r3, r2]
  }
}
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	46bd      	mov	sp, r7
 8001476:	b002      	add	sp, #8
 8001478:	bd80      	pop	{r7, pc}
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	fffffbff 	.word	0xfffffbff
 8001480:	ffffbfff 	.word	0xffffbfff
 8001484:	ffffdfff 	.word	0xffffdfff
 8001488:	ffffefff 	.word	0xffffefff
 800148c:	fffff7ff 	.word	0xfffff7ff
 8001490:	fffffdff 	.word	0xfffffdff
 8001494:	fffffeff 	.word	0xfffffeff

08001498 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	000a      	movs	r2, r1
 80014a2:	1cfb      	adds	r3, r7, #3
 80014a4:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	23aa      	movs	r3, #170	; 0xaa
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	5cd3      	ldrb	r3, [r2, r3]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d101      	bne.n	80014b6 <HAL_PCD_SetAddress+0x1e>
 80014b2:	2302      	movs	r3, #2
 80014b4:	e017      	b.n	80014e6 <HAL_PCD_SetAddress+0x4e>
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	23aa      	movs	r3, #170	; 0xaa
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	2101      	movs	r1, #1
 80014be:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	1cfa      	adds	r2, r7, #3
 80014c4:	2124      	movs	r1, #36	; 0x24
 80014c6:	7812      	ldrb	r2, [r2, #0]
 80014c8:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	1cfb      	adds	r3, r7, #3
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	0019      	movs	r1, r3
 80014d4:	0010      	movs	r0, r2
 80014d6:	f004 fcbb 	bl	8005e50 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	23aa      	movs	r3, #170	; 0xaa
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	2100      	movs	r1, #0
 80014e2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	0018      	movs	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	b002      	add	sp, #8
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80014ee:	b590      	push	{r4, r7, lr}
 80014f0:	b085      	sub	sp, #20
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
 80014f6:	000c      	movs	r4, r1
 80014f8:	0010      	movs	r0, r2
 80014fa:	0019      	movs	r1, r3
 80014fc:	1cfb      	adds	r3, r7, #3
 80014fe:	1c22      	adds	r2, r4, #0
 8001500:	701a      	strb	r2, [r3, #0]
 8001502:	003b      	movs	r3, r7
 8001504:	1c02      	adds	r2, r0, #0
 8001506:	801a      	strh	r2, [r3, #0]
 8001508:	1cbb      	adds	r3, r7, #2
 800150a:	1c0a      	adds	r2, r1, #0
 800150c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800150e:	230b      	movs	r3, #11
 8001510:	18fb      	adds	r3, r7, r3
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001516:	1cfb      	adds	r3, r7, #3
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b25b      	sxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	da0f      	bge.n	8001540 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001520:	1cfb      	adds	r3, r7, #3
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2207      	movs	r2, #7
 8001526:	4013      	ands	r3, r2
 8001528:	1c5a      	adds	r2, r3, #1
 800152a:	0013      	movs	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	189b      	adds	r3, r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	18d3      	adds	r3, r2, r3
 8001536:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2201      	movs	r2, #1
 800153c:	705a      	strb	r2, [r3, #1]
 800153e:	e00f      	b.n	8001560 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001540:	1cfb      	adds	r3, r7, #3
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2207      	movs	r2, #7
 8001546:	401a      	ands	r2, r3
 8001548:	0013      	movs	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	189b      	adds	r3, r3, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	3369      	adds	r3, #105	; 0x69
 8001552:	33ff      	adds	r3, #255	; 0xff
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	18d3      	adds	r3, r2, r3
 8001558:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2200      	movs	r2, #0
 800155e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001560:	1cfb      	adds	r3, r7, #3
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2207      	movs	r2, #7
 8001566:	4013      	ands	r3, r2
 8001568:	b2da      	uxtb	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800156e:	003b      	movs	r3, r7
 8001570:	881a      	ldrh	r2, [r3, #0]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	1cba      	adds	r2, r7, #2
 800157a:	7812      	ldrb	r2, [r2, #0]
 800157c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	785b      	ldrb	r3, [r3, #1]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d004      	beq.n	8001590 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	b29a      	uxth	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001590:	1cbb      	adds	r3, r7, #2
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b02      	cmp	r3, #2
 8001596:	d102      	bne.n	800159e <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2200      	movs	r2, #0
 800159c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	23aa      	movs	r3, #170	; 0xaa
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	5cd3      	ldrb	r3, [r2, r3]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d101      	bne.n	80015ae <HAL_PCD_EP_Open+0xc0>
 80015aa:	2302      	movs	r3, #2
 80015ac:	e013      	b.n	80015d6 <HAL_PCD_EP_Open+0xe8>
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	23aa      	movs	r3, #170	; 0xaa
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	2101      	movs	r1, #1
 80015b6:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	68fa      	ldr	r2, [r7, #12]
 80015be:	0011      	movs	r1, r2
 80015c0:	0018      	movs	r0, r3
 80015c2:	f002 fcd7 	bl	8003f74 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	23aa      	movs	r3, #170	; 0xaa
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	2100      	movs	r1, #0
 80015ce:	54d1      	strb	r1, [r2, r3]

  return ret;
 80015d0:	230b      	movs	r3, #11
 80015d2:	18fb      	adds	r3, r7, r3
 80015d4:	781b      	ldrb	r3, [r3, #0]
}
 80015d6:	0018      	movs	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	b005      	add	sp, #20
 80015dc:	bd90      	pop	{r4, r7, pc}

080015de <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b084      	sub	sp, #16
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
 80015e6:	000a      	movs	r2, r1
 80015e8:	1cfb      	adds	r3, r7, #3
 80015ea:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80015ec:	1cfb      	adds	r3, r7, #3
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	da0f      	bge.n	8001616 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015f6:	1cfb      	adds	r3, r7, #3
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2207      	movs	r2, #7
 80015fc:	4013      	ands	r3, r2
 80015fe:	1c5a      	adds	r2, r3, #1
 8001600:	0013      	movs	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	189b      	adds	r3, r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	18d3      	adds	r3, r2, r3
 800160c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2201      	movs	r2, #1
 8001612:	705a      	strb	r2, [r3, #1]
 8001614:	e00f      	b.n	8001636 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001616:	1cfb      	adds	r3, r7, #3
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2207      	movs	r2, #7
 800161c:	401a      	ands	r2, r3
 800161e:	0013      	movs	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	189b      	adds	r3, r3, r2
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	3369      	adds	r3, #105	; 0x69
 8001628:	33ff      	adds	r3, #255	; 0xff
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	18d3      	adds	r3, r2, r3
 800162e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2200      	movs	r2, #0
 8001634:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001636:	1cfb      	adds	r3, r7, #3
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2207      	movs	r2, #7
 800163c:	4013      	ands	r3, r2
 800163e:	b2da      	uxtb	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	23aa      	movs	r3, #170	; 0xaa
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	5cd3      	ldrb	r3, [r2, r3]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d101      	bne.n	8001654 <HAL_PCD_EP_Close+0x76>
 8001650:	2302      	movs	r3, #2
 8001652:	e011      	b.n	8001678 <HAL_PCD_EP_Close+0x9a>
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	23aa      	movs	r3, #170	; 0xaa
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	2101      	movs	r1, #1
 800165c:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	0011      	movs	r1, r2
 8001666:	0018      	movs	r0, r3
 8001668:	f002 ffda 	bl	8004620 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	23aa      	movs	r3, #170	; 0xaa
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	2100      	movs	r1, #0
 8001674:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	0018      	movs	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	b004      	add	sp, #16
 800167e:	bd80      	pop	{r7, pc}

08001680 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	200b      	movs	r0, #11
 800168e:	183b      	adds	r3, r7, r0
 8001690:	1c0a      	adds	r2, r1, #0
 8001692:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001694:	0001      	movs	r1, r0
 8001696:	187b      	adds	r3, r7, r1
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2207      	movs	r2, #7
 800169c:	401a      	ands	r2, r3
 800169e:	0013      	movs	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	189b      	adds	r3, r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	3369      	adds	r3, #105	; 0x69
 80016a8:	33ff      	adds	r3, #255	; 0xff
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	18d3      	adds	r3, r2, r3
 80016ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	2200      	movs	r2, #0
 80016c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016c8:	187b      	adds	r3, r7, r1
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2207      	movs	r2, #7
 80016ce:	4013      	ands	r3, r2
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80016d6:	187b      	adds	r3, r7, r1
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2207      	movs	r2, #7
 80016dc:	4013      	ands	r3, r2
 80016de:	d107      	bne.n	80016f0 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	0011      	movs	r1, r2
 80016e8:	0018      	movs	r0, r3
 80016ea:	f003 f959 	bl	80049a0 <USB_EPStartXfer>
 80016ee:	e006      	b.n	80016fe <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	0011      	movs	r1, r2
 80016f8:	0018      	movs	r0, r3
 80016fa:	f003 f951 	bl	80049a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	0018      	movs	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	b006      	add	sp, #24
 8001706:	bd80      	pop	{r7, pc}

08001708 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	000a      	movs	r2, r1
 8001712:	1cfb      	adds	r3, r7, #3
 8001714:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001716:	1cfb      	adds	r3, r7, #3
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2207      	movs	r2, #7
 800171c:	401a      	ands	r2, r3
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	23c2      	movs	r3, #194	; 0xc2
 8001722:	0059      	lsls	r1, r3, #1
 8001724:	0013      	movs	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	189b      	adds	r3, r3, r2
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	18c3      	adds	r3, r0, r3
 800172e:	185b      	adds	r3, r3, r1
 8001730:	681b      	ldr	r3, [r3, #0]
}
 8001732:	0018      	movs	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	b002      	add	sp, #8
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af00      	add	r7, sp, #0
 8001740:	60f8      	str	r0, [r7, #12]
 8001742:	607a      	str	r2, [r7, #4]
 8001744:	603b      	str	r3, [r7, #0]
 8001746:	200b      	movs	r0, #11
 8001748:	183b      	adds	r3, r7, r0
 800174a:	1c0a      	adds	r2, r1, #0
 800174c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800174e:	183b      	adds	r3, r7, r0
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2207      	movs	r2, #7
 8001754:	4013      	ands	r3, r2
 8001756:	1c5a      	adds	r2, r3, #1
 8001758:	0013      	movs	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	189b      	adds	r3, r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	18d3      	adds	r3, r2, r3
 8001764:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	2224      	movs	r2, #36	; 0x24
 8001776:	2101      	movs	r1, #1
 8001778:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	2200      	movs	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	2201      	movs	r2, #1
 800178a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800178c:	183b      	adds	r3, r7, r0
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2207      	movs	r2, #7
 8001792:	4013      	ands	r3, r2
 8001794:	b2da      	uxtb	r2, r3
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800179a:	183b      	adds	r3, r7, r0
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2207      	movs	r2, #7
 80017a0:	4013      	ands	r3, r2
 80017a2:	d107      	bne.n	80017b4 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	0011      	movs	r1, r2
 80017ac:	0018      	movs	r0, r3
 80017ae:	f003 f8f7 	bl	80049a0 <USB_EPStartXfer>
 80017b2:	e006      	b.n	80017c2 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	0011      	movs	r1, r2
 80017bc:	0018      	movs	r0, r3
 80017be:	f003 f8ef 	bl	80049a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	0018      	movs	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	b006      	add	sp, #24
 80017ca:	bd80      	pop	{r7, pc}

080017cc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	000a      	movs	r2, r1
 80017d6:	1cfb      	adds	r3, r7, #3
 80017d8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80017da:	1cfb      	adds	r3, r7, #3
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2207      	movs	r2, #7
 80017e0:	401a      	ands	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d901      	bls.n	80017ee <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e046      	b.n	800187c <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80017ee:	1cfb      	adds	r3, r7, #3
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	b25b      	sxtb	r3, r3
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	da0f      	bge.n	8001818 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017f8:	1cfb      	adds	r3, r7, #3
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2207      	movs	r2, #7
 80017fe:	4013      	ands	r3, r2
 8001800:	1c5a      	adds	r2, r3, #1
 8001802:	0013      	movs	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	189b      	adds	r3, r3, r2
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	18d3      	adds	r3, r2, r3
 800180e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2201      	movs	r2, #1
 8001814:	705a      	strb	r2, [r3, #1]
 8001816:	e00d      	b.n	8001834 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001818:	1cfb      	adds	r3, r7, #3
 800181a:	781a      	ldrb	r2, [r3, #0]
 800181c:	0013      	movs	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	189b      	adds	r3, r3, r2
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	3369      	adds	r3, #105	; 0x69
 8001826:	33ff      	adds	r3, #255	; 0xff
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	18d3      	adds	r3, r2, r3
 800182c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2201      	movs	r2, #1
 8001838:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800183a:	1cfb      	adds	r3, r7, #3
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2207      	movs	r2, #7
 8001840:	4013      	ands	r3, r2
 8001842:	b2da      	uxtb	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	23aa      	movs	r3, #170	; 0xaa
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	5cd3      	ldrb	r3, [r2, r3]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d101      	bne.n	8001858 <HAL_PCD_EP_SetStall+0x8c>
 8001854:	2302      	movs	r3, #2
 8001856:	e011      	b.n	800187c <HAL_PCD_EP_SetStall+0xb0>
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	23aa      	movs	r3, #170	; 0xaa
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	2101      	movs	r1, #1
 8001860:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	0011      	movs	r1, r2
 800186a:	0018      	movs	r0, r3
 800186c:	f004 f9ee 	bl	8005c4c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	23aa      	movs	r3, #170	; 0xaa
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	2100      	movs	r1, #0
 8001878:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	0018      	movs	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	b004      	add	sp, #16
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	000a      	movs	r2, r1
 800188e:	1cfb      	adds	r3, r7, #3
 8001890:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001892:	1cfb      	adds	r3, r7, #3
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	220f      	movs	r2, #15
 8001898:	401a      	ands	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d901      	bls.n	80018a6 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e048      	b.n	8001938 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80018a6:	1cfb      	adds	r3, r7, #3
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	b25b      	sxtb	r3, r3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	da0f      	bge.n	80018d0 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018b0:	1cfb      	adds	r3, r7, #3
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2207      	movs	r2, #7
 80018b6:	4013      	ands	r3, r2
 80018b8:	1c5a      	adds	r2, r3, #1
 80018ba:	0013      	movs	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	189b      	adds	r3, r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	18d3      	adds	r3, r2, r3
 80018c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2201      	movs	r2, #1
 80018cc:	705a      	strb	r2, [r3, #1]
 80018ce:	e00f      	b.n	80018f0 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018d0:	1cfb      	adds	r3, r7, #3
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2207      	movs	r2, #7
 80018d6:	401a      	ands	r2, r3
 80018d8:	0013      	movs	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	189b      	adds	r3, r3, r2
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	3369      	adds	r3, #105	; 0x69
 80018e2:	33ff      	adds	r3, #255	; 0xff
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	18d3      	adds	r3, r2, r3
 80018e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2200      	movs	r2, #0
 80018ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2200      	movs	r2, #0
 80018f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018f6:	1cfb      	adds	r3, r7, #3
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2207      	movs	r2, #7
 80018fc:	4013      	ands	r3, r2
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	23aa      	movs	r3, #170	; 0xaa
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	5cd3      	ldrb	r3, [r2, r3]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d101      	bne.n	8001914 <HAL_PCD_EP_ClrStall+0x90>
 8001910:	2302      	movs	r3, #2
 8001912:	e011      	b.n	8001938 <HAL_PCD_EP_ClrStall+0xb4>
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	23aa      	movs	r3, #170	; 0xaa
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	2101      	movs	r1, #1
 800191c:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	0011      	movs	r1, r2
 8001926:	0018      	movs	r0, r3
 8001928:	f004 f9e0 	bl	8005cec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	23aa      	movs	r3, #170	; 0xaa
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	2100      	movs	r1, #0
 8001934:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001936:	2300      	movs	r3, #0
}
 8001938:	0018      	movs	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	b004      	add	sp, #16
 800193e:	bd80      	pop	{r7, pc}

08001940 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001940:	b590      	push	{r4, r7, lr}
 8001942:	b08f      	sub	sp, #60	; 0x3c
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001948:	e323      	b.n	8001f92 <PCD_EP_ISR_Handler+0x652>
  {
    wIstr = hpcd->Instance->ISTR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	202e      	movs	r0, #46	; 0x2e
 8001950:	183b      	adds	r3, r7, r0
 8001952:	2144      	movs	r1, #68	; 0x44
 8001954:	5a52      	ldrh	r2, [r2, r1]
 8001956:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001958:	183b      	adds	r3, r7, r0
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	b2da      	uxtb	r2, r3
 800195e:	202d      	movs	r0, #45	; 0x2d
 8001960:	183b      	adds	r3, r7, r0
 8001962:	210f      	movs	r1, #15
 8001964:	400a      	ands	r2, r1
 8001966:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8001968:	183b      	adds	r3, r7, r0
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d000      	beq.n	8001972 <PCD_EP_ISR_Handler+0x32>
 8001970:	e15e      	b.n	8001c30 <PCD_EP_ISR_Handler+0x2f0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001972:	232e      	movs	r3, #46	; 0x2e
 8001974:	18fb      	adds	r3, r7, r3
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	2210      	movs	r2, #16
 800197a:	4013      	ands	r3, r2
 800197c:	d152      	bne.n	8001a24 <PCD_EP_ISR_Handler+0xe4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	b29a      	uxth	r2, r3
 8001986:	200e      	movs	r0, #14
 8001988:	183b      	adds	r3, r7, r0
 800198a:	49db      	ldr	r1, [pc, #876]	; (8001cf8 <PCD_EP_ISR_Handler+0x3b8>)
 800198c:	400a      	ands	r2, r1
 800198e:	801a      	strh	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	183a      	adds	r2, r7, r0
 8001996:	8812      	ldrh	r2, [r2, #0]
 8001998:	49d8      	ldr	r1, [pc, #864]	; (8001cfc <PCD_EP_ISR_Handler+0x3bc>)
 800199a:	430a      	orrs	r2, r1
 800199c:	b292      	uxth	r2, r2
 800199e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3328      	adds	r3, #40	; 0x28
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2250      	movs	r2, #80	; 0x50
 80019ac:	5a9b      	ldrh	r3, [r3, r2]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	001a      	movs	r2, r3
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	18d2      	adds	r2, r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	18d3      	adds	r3, r2, r3
 80019c0:	4acf      	ldr	r2, [pc, #828]	; (8001d00 <PCD_EP_ISR_Handler+0x3c0>)
 80019c2:	4694      	mov	ip, r2
 80019c4:	4463      	add	r3, ip
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	059b      	lsls	r3, r3, #22
 80019ca:	0d9a      	lsrs	r2, r3, #22
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	695a      	ldr	r2, [r3, #20]
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	18d2      	adds	r2, r2, r3
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2100      	movs	r1, #0
 80019e2:	0018      	movs	r0, r3
 80019e4:	f006 f98e 	bl	8007d04 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2224      	movs	r2, #36	; 0x24
 80019ec:	5c9b      	ldrb	r3, [r3, r2]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d100      	bne.n	80019f6 <PCD_EP_ISR_Handler+0xb6>
 80019f4:	e2cd      	b.n	8001f92 <PCD_EP_ISR_Handler+0x652>
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d000      	beq.n	8001a00 <PCD_EP_ISR_Handler+0xc0>
 80019fe:	e2c8      	b.n	8001f92 <PCD_EP_ISR_Handler+0x652>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2224      	movs	r2, #36	; 0x24
 8001a04:	5c9b      	ldrb	r3, [r3, r2]
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2280      	movs	r2, #128	; 0x80
 8001a0a:	4252      	negs	r2, r2
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	b291      	uxth	r1, r2
 8001a16:	224c      	movs	r2, #76	; 0x4c
 8001a18:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2224      	movs	r2, #36	; 0x24
 8001a1e:	2100      	movs	r1, #0
 8001a20:	5499      	strb	r1, [r3, r2]
 8001a22:	e2b6      	b.n	8001f92 <PCD_EP_ISR_Handler+0x652>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3369      	adds	r3, #105	; 0x69
 8001a28:	33ff      	adds	r3, #255	; 0xff
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	212a      	movs	r1, #42	; 0x2a
 8001a32:	187b      	adds	r3, r7, r1
 8001a34:	8812      	ldrh	r2, [r2, #0]
 8001a36:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001a38:	187b      	adds	r3, r7, r1
 8001a3a:	881a      	ldrh	r2, [r3, #0]
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	011b      	lsls	r3, r3, #4
 8001a40:	4013      	ands	r3, r2
 8001a42:	d037      	beq.n	8001ab4 <PCD_EP_ISR_Handler+0x174>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2250      	movs	r2, #80	; 0x50
 8001a4a:	5a9b      	ldrh	r3, [r3, r2]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	001a      	movs	r2, r3
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	18d2      	adds	r2, r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	18d3      	adds	r3, r2, r3
 8001a5e:	4aa9      	ldr	r2, [pc, #676]	; (8001d04 <PCD_EP_ISR_Handler+0x3c4>)
 8001a60:	4694      	mov	ip, r2
 8001a62:	4463      	add	r3, ip
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	059b      	lsls	r3, r3, #22
 8001a68:	0d9a      	lsrs	r2, r3, #22
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6818      	ldr	r0, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	22ac      	movs	r2, #172	; 0xac
 8001a76:	0092      	lsls	r2, r2, #2
 8001a78:	1899      	adds	r1, r3, r2
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	f004 fa5f 	bl	8005f46 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	2010      	movs	r0, #16
 8001a92:	183b      	adds	r3, r7, r0
 8001a94:	499c      	ldr	r1, [pc, #624]	; (8001d08 <PCD_EP_ISR_Handler+0x3c8>)
 8001a96:	400a      	ands	r2, r1
 8001a98:	801a      	strh	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	183a      	adds	r2, r7, r0
 8001aa0:	8812      	ldrh	r2, [r2, #0]
 8001aa2:	2180      	movs	r1, #128	; 0x80
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	b292      	uxth	r2, r2
 8001aa8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	0018      	movs	r0, r3
 8001aae:	f006 f8f3 	bl	8007c98 <HAL_PCD_SetupStageCallback>
 8001ab2:	e26e      	b.n	8001f92 <PCD_EP_ISR_Handler+0x652>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ab4:	232a      	movs	r3, #42	; 0x2a
 8001ab6:	18fb      	adds	r3, r7, r3
 8001ab8:	2200      	movs	r2, #0
 8001aba:	5e9b      	ldrsh	r3, [r3, r2]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	db00      	blt.n	8001ac2 <PCD_EP_ISR_Handler+0x182>
 8001ac0:	e267      	b.n	8001f92 <PCD_EP_ISR_Handler+0x652>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	201c      	movs	r0, #28
 8001acc:	183b      	adds	r3, r7, r0
 8001ace:	498e      	ldr	r1, [pc, #568]	; (8001d08 <PCD_EP_ISR_Handler+0x3c8>)
 8001ad0:	400a      	ands	r2, r1
 8001ad2:	801a      	strh	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	183a      	adds	r2, r7, r0
 8001ada:	8812      	ldrh	r2, [r2, #0]
 8001adc:	2180      	movs	r1, #128	; 0x80
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	b292      	uxth	r2, r2
 8001ae2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2250      	movs	r2, #80	; 0x50
 8001aea:	5a9b      	ldrh	r3, [r3, r2]
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	001a      	movs	r2, r3
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	18d2      	adds	r2, r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	18d3      	adds	r3, r2, r3
 8001afe:	4a81      	ldr	r2, [pc, #516]	; (8001d04 <PCD_EP_ISR_Handler+0x3c4>)
 8001b00:	4694      	mov	ip, r2
 8001b02:	4463      	add	r3, ip
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	059b      	lsls	r3, r3, #22
 8001b08:	0d9a      	lsrs	r2, r3, #22
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d01a      	beq.n	8001b4c <PCD_EP_ISR_Handler+0x20c>
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d016      	beq.n	8001b4c <PCD_EP_ISR_Handler+0x20c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6818      	ldr	r0, [r3, #0]
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	6959      	ldr	r1, [r3, #20]
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	f004 fa09 	bl	8005f46 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	695a      	ldr	r2, [r3, #20]
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	18d2      	adds	r2, r2, r3
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2100      	movs	r1, #0
 8001b46:	0018      	movs	r0, r3
 8001b48:	f006 f8bb 	bl	8007cc2 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	61bb      	str	r3, [r7, #24]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2250      	movs	r2, #80	; 0x50
 8001b58:	5a9b      	ldrh	r3, [r3, r2]
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	001a      	movs	r2, r3
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	189b      	adds	r3, r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	4a67      	ldr	r2, [pc, #412]	; (8001d04 <PCD_EP_ISR_Handler+0x3c4>)
 8001b68:	4694      	mov	ip, r2
 8001b6a:	4463      	add	r3, ip
 8001b6c:	617b      	str	r3, [r7, #20]
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d110      	bne.n	8001b98 <PCD_EP_ISR_Handler+0x258>
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	4a63      	ldr	r2, [pc, #396]	; (8001d0c <PCD_EP_ISR_Handler+0x3cc>)
 8001b7e:	4013      	ands	r3, r2
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	801a      	strh	r2, [r3, #0]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	4a5b      	ldr	r2, [pc, #364]	; (8001cfc <PCD_EP_ISR_Handler+0x3bc>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	801a      	strh	r2, [r3, #0]
 8001b96:	e02b      	b.n	8001bf0 <PCD_EP_ISR_Handler+0x2b0>
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	2b3e      	cmp	r3, #62	; 0x3e
 8001b9e:	d812      	bhi.n	8001bc6 <PCD_EP_ISR_Handler+0x286>
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	085b      	lsrs	r3, r3, #1
 8001ba6:	633b      	str	r3, [r7, #48]	; 0x30
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	2201      	movs	r2, #1
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d002      	beq.n	8001bb8 <PCD_EP_ISR_Handler+0x278>
 8001bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	633b      	str	r3, [r7, #48]	; 0x30
 8001bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	029b      	lsls	r3, r3, #10
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	801a      	strh	r2, [r3, #0]
 8001bc4:	e014      	b.n	8001bf0 <PCD_EP_ISR_Handler+0x2b0>
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	095b      	lsrs	r3, r3, #5
 8001bcc:	633b      	str	r3, [r7, #48]	; 0x30
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	221f      	movs	r2, #31
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d102      	bne.n	8001bde <PCD_EP_ISR_Handler+0x29e>
 8001bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	633b      	str	r3, [r7, #48]	; 0x30
 8001bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	029b      	lsls	r3, r3, #10
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	4a45      	ldr	r2, [pc, #276]	; (8001cfc <PCD_EP_ISR_Handler+0x3bc>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	2012      	movs	r0, #18
 8001bfa:	183b      	adds	r3, r7, r0
 8001bfc:	4944      	ldr	r1, [pc, #272]	; (8001d10 <PCD_EP_ISR_Handler+0x3d0>)
 8001bfe:	400a      	ands	r2, r1
 8001c00:	801a      	strh	r2, [r3, #0]
 8001c02:	183b      	adds	r3, r7, r0
 8001c04:	183a      	adds	r2, r7, r0
 8001c06:	8812      	ldrh	r2, [r2, #0]
 8001c08:	2180      	movs	r1, #128	; 0x80
 8001c0a:	0149      	lsls	r1, r1, #5
 8001c0c:	404a      	eors	r2, r1
 8001c0e:	801a      	strh	r2, [r3, #0]
 8001c10:	183b      	adds	r3, r7, r0
 8001c12:	183a      	adds	r2, r7, r0
 8001c14:	8812      	ldrh	r2, [r2, #0]
 8001c16:	2180      	movs	r1, #128	; 0x80
 8001c18:	0189      	lsls	r1, r1, #6
 8001c1a:	404a      	eors	r2, r1
 8001c1c:	801a      	strh	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	183a      	adds	r2, r7, r0
 8001c24:	8812      	ldrh	r2, [r2, #0]
 8001c26:	493b      	ldr	r1, [pc, #236]	; (8001d14 <PCD_EP_ISR_Handler+0x3d4>)
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	b292      	uxth	r2, r2
 8001c2c:	801a      	strh	r2, [r3, #0]
 8001c2e:	e1b0      	b.n	8001f92 <PCD_EP_ISR_Handler+0x652>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	001a      	movs	r2, r3
 8001c36:	232d      	movs	r3, #45	; 0x2d
 8001c38:	18fb      	adds	r3, r7, r3
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	18d2      	adds	r2, r2, r3
 8001c40:	212a      	movs	r1, #42	; 0x2a
 8001c42:	187b      	adds	r3, r7, r1
 8001c44:	8812      	ldrh	r2, [r2, #0]
 8001c46:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c48:	187b      	adds	r3, r7, r1
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	5e9b      	ldrsh	r3, [r3, r2]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	db00      	blt.n	8001c54 <PCD_EP_ISR_Handler+0x314>
 8001c52:	e10f      	b.n	8001e74 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	001a      	movs	r2, r3
 8001c5a:	202d      	movs	r0, #45	; 0x2d
 8001c5c:	183b      	adds	r3, r7, r0
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	18d3      	adds	r3, r2, r3
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	2428      	movs	r4, #40	; 0x28
 8001c6a:	193b      	adds	r3, r7, r4
 8001c6c:	4926      	ldr	r1, [pc, #152]	; (8001d08 <PCD_EP_ISR_Handler+0x3c8>)
 8001c6e:	400a      	ands	r2, r1
 8001c70:	801a      	strh	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	001a      	movs	r2, r3
 8001c78:	183b      	adds	r3, r7, r0
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	18d3      	adds	r3, r2, r3
 8001c80:	193a      	adds	r2, r7, r4
 8001c82:	8812      	ldrh	r2, [r2, #0]
 8001c84:	2180      	movs	r1, #128	; 0x80
 8001c86:	430a      	orrs	r2, r1
 8001c88:	b292      	uxth	r2, r2
 8001c8a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001c8c:	183b      	adds	r3, r7, r0
 8001c8e:	781a      	ldrb	r2, [r3, #0]
 8001c90:	0013      	movs	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	189b      	adds	r3, r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	3369      	adds	r3, #105	; 0x69
 8001c9a:	33ff      	adds	r3, #255	; 0xff
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	18d3      	adds	r3, r2, r3
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	7b1b      	ldrb	r3, [r3, #12]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d136      	bne.n	8001d18 <PCD_EP_ISR_Handler+0x3d8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2250      	movs	r2, #80	; 0x50
 8001cb0:	5a9b      	ldrh	r3, [r3, r2]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	001a      	movs	r2, r3
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	18d2      	adds	r2, r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	18d3      	adds	r3, r2, r3
 8001cc4:	4a0f      	ldr	r2, [pc, #60]	; (8001d04 <PCD_EP_ISR_Handler+0x3c4>)
 8001cc6:	4694      	mov	ip, r2
 8001cc8:	4463      	add	r3, ip
 8001cca:	881a      	ldrh	r2, [r3, #0]
 8001ccc:	2136      	movs	r1, #54	; 0x36
 8001cce:	187b      	adds	r3, r7, r1
 8001cd0:	0592      	lsls	r2, r2, #22
 8001cd2:	0d92      	lsrs	r2, r2, #22
 8001cd4:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8001cd6:	187b      	adds	r3, r7, r1
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d100      	bne.n	8001ce0 <PCD_EP_ISR_Handler+0x3a0>
 8001cde:	e0a0      	b.n	8001e22 <PCD_EP_ISR_Handler+0x4e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6818      	ldr	r0, [r3, #0]
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	6959      	ldr	r1, [r3, #20]
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	88da      	ldrh	r2, [r3, #6]
 8001cec:	2336      	movs	r3, #54	; 0x36
 8001cee:	18fb      	adds	r3, r7, r3
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	f004 f928 	bl	8005f46 <USB_ReadPMA>
 8001cf6:	e094      	b.n	8001e22 <PCD_EP_ISR_Handler+0x4e2>
 8001cf8:	ffff8f0f 	.word	0xffff8f0f
 8001cfc:	ffff8000 	.word	0xffff8000
 8001d00:	00000402 	.word	0x00000402
 8001d04:	00000406 	.word	0x00000406
 8001d08:	00000f8f 	.word	0x00000f8f
 8001d0c:	ffff83ff 	.word	0xffff83ff
 8001d10:	ffffbf8f 	.word	0xffffbf8f
 8001d14:	ffff8080 	.word	0xffff8080
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	78db      	ldrb	r3, [r3, #3]
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d10c      	bne.n	8001d3a <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001d20:	2336      	movs	r3, #54	; 0x36
 8001d22:	18fc      	adds	r4, r7, r3
 8001d24:	232a      	movs	r3, #42	; 0x2a
 8001d26:	18fb      	adds	r3, r7, r3
 8001d28:	881a      	ldrh	r2, [r3, #0]
 8001d2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	0018      	movs	r0, r3
 8001d30:	f000 f94a 	bl	8001fc8 <HAL_PCD_EP_DB_Receive>
 8001d34:	0003      	movs	r3, r0
 8001d36:	8023      	strh	r3, [r4, #0]
 8001d38:	e073      	b.n	8001e22 <PCD_EP_ISR_Handler+0x4e2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	001a      	movs	r2, r3
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	18d3      	adds	r3, r2, r3
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	2022      	movs	r0, #34	; 0x22
 8001d4e:	183b      	adds	r3, r7, r0
 8001d50:	4997      	ldr	r1, [pc, #604]	; (8001fb0 <PCD_EP_ISR_Handler+0x670>)
 8001d52:	400a      	ands	r2, r1
 8001d54:	801a      	strh	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	001a      	movs	r2, r3
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	18d3      	adds	r3, r2, r3
 8001d64:	183a      	adds	r2, r7, r0
 8001d66:	8812      	ldrh	r2, [r2, #0]
 8001d68:	4992      	ldr	r1, [pc, #584]	; (8001fb4 <PCD_EP_ISR_Handler+0x674>)
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	b292      	uxth	r2, r2
 8001d6e:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	001a      	movs	r2, r3
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	18d3      	adds	r3, r2, r3
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	001a      	movs	r2, r3
 8001d84:	2380      	movs	r3, #128	; 0x80
 8001d86:	01db      	lsls	r3, r3, #7
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d025      	beq.n	8001dd8 <PCD_EP_ISR_Handler+0x498>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2250      	movs	r2, #80	; 0x50
 8001d92:	5a9b      	ldrh	r3, [r3, r2]
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	001a      	movs	r2, r3
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	18d2      	adds	r2, r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	18d3      	adds	r3, r2, r3
 8001da6:	4a84      	ldr	r2, [pc, #528]	; (8001fb8 <PCD_EP_ISR_Handler+0x678>)
 8001da8:	4694      	mov	ip, r2
 8001daa:	4463      	add	r3, ip
 8001dac:	881a      	ldrh	r2, [r3, #0]
 8001dae:	2136      	movs	r1, #54	; 0x36
 8001db0:	187b      	adds	r3, r7, r1
 8001db2:	0592      	lsls	r2, r2, #22
 8001db4:	0d92      	lsrs	r2, r2, #22
 8001db6:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001db8:	187b      	adds	r3, r7, r1
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d030      	beq.n	8001e22 <PCD_EP_ISR_Handler+0x4e2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6818      	ldr	r0, [r3, #0]
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	6959      	ldr	r1, [r3, #20]
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	891a      	ldrh	r2, [r3, #8]
 8001dcc:	2336      	movs	r3, #54	; 0x36
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	f004 f8b8 	bl	8005f46 <USB_ReadPMA>
 8001dd6:	e024      	b.n	8001e22 <PCD_EP_ISR_Handler+0x4e2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2250      	movs	r2, #80	; 0x50
 8001dde:	5a9b      	ldrh	r3, [r3, r2]
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	001a      	movs	r2, r3
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	18d2      	adds	r2, r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	18d3      	adds	r3, r2, r3
 8001df2:	4a72      	ldr	r2, [pc, #456]	; (8001fbc <PCD_EP_ISR_Handler+0x67c>)
 8001df4:	4694      	mov	ip, r2
 8001df6:	4463      	add	r3, ip
 8001df8:	881a      	ldrh	r2, [r3, #0]
 8001dfa:	2136      	movs	r1, #54	; 0x36
 8001dfc:	187b      	adds	r3, r7, r1
 8001dfe:	0592      	lsls	r2, r2, #22
 8001e00:	0d92      	lsrs	r2, r2, #22
 8001e02:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001e04:	187b      	adds	r3, r7, r1
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00a      	beq.n	8001e22 <PCD_EP_ISR_Handler+0x4e2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6818      	ldr	r0, [r3, #0]
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	6959      	ldr	r1, [r3, #20]
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	895a      	ldrh	r2, [r3, #10]
 8001e18:	2336      	movs	r3, #54	; 0x36
 8001e1a:	18fb      	adds	r3, r7, r3
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	f004 f892 	bl	8005f46 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	69da      	ldr	r2, [r3, #28]
 8001e26:	2136      	movs	r1, #54	; 0x36
 8001e28:	187b      	adds	r3, r7, r1
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	18d2      	adds	r2, r2, r3
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	695a      	ldr	r2, [r3, #20]
 8001e36:	187b      	adds	r3, r7, r1
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	18d2      	adds	r2, r2, r3
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d006      	beq.n	8001e56 <PCD_EP_ISR_Handler+0x516>
 8001e48:	2336      	movs	r3, #54	; 0x36
 8001e4a:	18fb      	adds	r3, r7, r3
 8001e4c:	881a      	ldrh	r2, [r3, #0]
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d207      	bcs.n	8001e66 <PCD_EP_ISR_Handler+0x526>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	781a      	ldrb	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	0011      	movs	r1, r2
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f005 ff2f 	bl	8007cc2 <HAL_PCD_DataOutStageCallback>
 8001e64:	e006      	b.n	8001e74 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e6c:	0011      	movs	r1, r2
 8001e6e:	0018      	movs	r0, r3
 8001e70:	f002 fd96 	bl	80049a0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001e74:	232a      	movs	r3, #42	; 0x2a
 8001e76:	18fb      	adds	r3, r7, r3
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	2280      	movs	r2, #128	; 0x80
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d100      	bne.n	8001e82 <PCD_EP_ISR_Handler+0x542>
 8001e80:	e087      	b.n	8001f92 <PCD_EP_ISR_Handler+0x652>
      {
        ep = &hpcd->IN_ep[epindex];
 8001e82:	202d      	movs	r0, #45	; 0x2d
 8001e84:	183b      	adds	r3, r7, r0
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	0013      	movs	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	189b      	adds	r3, r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	18d3      	adds	r3, r2, r3
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	001a      	movs	r2, r3
 8001e9e:	183b      	adds	r3, r7, r0
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	18d3      	adds	r3, r2, r3
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	2420      	movs	r4, #32
 8001eac:	193b      	adds	r3, r7, r4
 8001eae:	4944      	ldr	r1, [pc, #272]	; (8001fc0 <PCD_EP_ISR_Handler+0x680>)
 8001eb0:	400a      	ands	r2, r1
 8001eb2:	801a      	strh	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	001a      	movs	r2, r3
 8001eba:	183b      	adds	r3, r7, r0
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	18d3      	adds	r3, r2, r3
 8001ec2:	193a      	adds	r2, r7, r4
 8001ec4:	8812      	ldrh	r2, [r2, #0]
 8001ec6:	493f      	ldr	r1, [pc, #252]	; (8001fc4 <PCD_EP_ISR_Handler+0x684>)
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	b292      	uxth	r2, r2
 8001ecc:	801a      	strh	r2, [r3, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	78db      	ldrb	r3, [r3, #3]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d10a      	bne.n	8001eec <PCD_EP_ISR_Handler+0x5ac>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d151      	bne.n	8001f82 <PCD_EP_ISR_Handler+0x642>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001ede:	232a      	movs	r3, #42	; 0x2a
 8001ee0:	18fb      	adds	r3, r7, r3
 8001ee2:	881a      	ldrh	r2, [r3, #0]
 8001ee4:	2380      	movs	r3, #128	; 0x80
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d14a      	bne.n	8001f82 <PCD_EP_ISR_Handler+0x642>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2250      	movs	r2, #80	; 0x50
 8001ef2:	5a9b      	ldrh	r3, [r3, r2]
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	001a      	movs	r2, r3
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	18d2      	adds	r2, r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	18d3      	adds	r3, r2, r3
 8001f06:	4a2c      	ldr	r2, [pc, #176]	; (8001fb8 <PCD_EP_ISR_Handler+0x678>)
 8001f08:	4694      	mov	ip, r2
 8001f0a:	4463      	add	r3, ip
 8001f0c:	881a      	ldrh	r2, [r3, #0]
 8001f0e:	211e      	movs	r1, #30
 8001f10:	187b      	adds	r3, r7, r1
 8001f12:	0592      	lsls	r2, r2, #22
 8001f14:	0d92      	lsrs	r2, r2, #22
 8001f16:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	699a      	ldr	r2, [r3, #24]
 8001f1c:	187b      	adds	r3, r7, r1
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d908      	bls.n	8001f36 <PCD_EP_ISR_Handler+0x5f6>
          {
            ep->xfer_len -= TxByteNbre;
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	699a      	ldr	r2, [r3, #24]
 8001f28:	231e      	movs	r3, #30
 8001f2a:	18fb      	adds	r3, r7, r3
 8001f2c:	881b      	ldrh	r3, [r3, #0]
 8001f2e:	1ad2      	subs	r2, r2, r3
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	619a      	str	r2, [r3, #24]
 8001f34:	e002      	b.n	8001f3c <PCD_EP_ISR_Handler+0x5fc>
          }
          else
          {
            ep->xfer_len = 0U;
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	2200      	movs	r2, #0
 8001f3a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d107      	bne.n	8001f54 <PCD_EP_ISR_Handler+0x614>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	781a      	ldrb	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	0011      	movs	r1, r2
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	f005 fed9 	bl	8007d04 <HAL_PCD_DataInStageCallback>
 8001f52:	e01e      	b.n	8001f92 <PCD_EP_ISR_Handler+0x652>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	695a      	ldr	r2, [r3, #20]
 8001f58:	211e      	movs	r1, #30
 8001f5a:	187b      	adds	r3, r7, r1
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	18d2      	adds	r2, r2, r3
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	69da      	ldr	r2, [r3, #28]
 8001f68:	187b      	adds	r3, r7, r1
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	18d2      	adds	r2, r2, r3
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f78:	0011      	movs	r1, r2
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	f002 fd10 	bl	80049a0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001f80:	e007      	b.n	8001f92 <PCD_EP_ISR_Handler+0x652>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001f82:	232a      	movs	r3, #42	; 0x2a
 8001f84:	18fb      	adds	r3, r7, r3
 8001f86:	881a      	ldrh	r2, [r3, #0]
 8001f88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	f000 f93b 	bl	8002208 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2244      	movs	r2, #68	; 0x44
 8001f98:	5a9b      	ldrh	r3, [r3, r2]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	b21b      	sxth	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	da00      	bge.n	8001fa4 <PCD_EP_ISR_Handler+0x664>
 8001fa2:	e4d2      	b.n	800194a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	b00f      	add	sp, #60	; 0x3c
 8001fac:	bd90      	pop	{r4, r7, pc}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	ffff8f8f 	.word	0xffff8f8f
 8001fb4:	ffff80c0 	.word	0xffff80c0
 8001fb8:	00000402 	.word	0x00000402
 8001fbc:	00000406 	.word	0x00000406
 8001fc0:	ffff8f0f 	.word	0xffff8f0f
 8001fc4:	ffff8000 	.word	0xffff8000

08001fc8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	1dbb      	adds	r3, r7, #6
 8001fd4:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001fd6:	1dbb      	adds	r3, r7, #6
 8001fd8:	881a      	ldrh	r2, [r3, #0]
 8001fda:	2380      	movs	r3, #128	; 0x80
 8001fdc:	01db      	lsls	r3, r3, #7
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d100      	bne.n	8001fe4 <HAL_PCD_EP_DB_Receive+0x1c>
 8001fe2:	e07f      	b.n	80020e4 <HAL_PCD_EP_DB_Receive+0x11c>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2250      	movs	r2, #80	; 0x50
 8001fea:	5a9b      	ldrh	r3, [r3, r2]
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	001a      	movs	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	18d2      	adds	r2, r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	18d3      	adds	r3, r2, r3
 8001ffe:	4a7c      	ldr	r2, [pc, #496]	; (80021f0 <HAL_PCD_EP_DB_Receive+0x228>)
 8002000:	4694      	mov	ip, r2
 8002002:	4463      	add	r3, ip
 8002004:	881a      	ldrh	r2, [r3, #0]
 8002006:	211a      	movs	r1, #26
 8002008:	187b      	adds	r3, r7, r1
 800200a:	0592      	lsls	r2, r2, #22
 800200c:	0d92      	lsrs	r2, r2, #22
 800200e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	699a      	ldr	r2, [r3, #24]
 8002014:	187b      	adds	r3, r7, r1
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	429a      	cmp	r2, r3
 800201a:	d308      	bcc.n	800202e <HAL_PCD_EP_DB_Receive+0x66>
    {
      ep->xfer_len -= count;
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	699a      	ldr	r2, [r3, #24]
 8002020:	231a      	movs	r3, #26
 8002022:	18fb      	adds	r3, r7, r3
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	1ad2      	subs	r2, r2, r3
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	619a      	str	r2, [r3, #24]
 800202c:	e002      	b.n	8002034 <HAL_PCD_EP_DB_Receive+0x6c>
    }
    else
    {
      ep->xfer_len = 0U;
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	2200      	movs	r2, #0
 8002032:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d121      	bne.n	8002080 <HAL_PCD_EP_DB_Receive+0xb8>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	001a      	movs	r2, r3
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	18d3      	adds	r3, r2, r3
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	b29a      	uxth	r2, r3
 800204e:	2018      	movs	r0, #24
 8002050:	183b      	adds	r3, r7, r0
 8002052:	4968      	ldr	r1, [pc, #416]	; (80021f4 <HAL_PCD_EP_DB_Receive+0x22c>)
 8002054:	400a      	ands	r2, r1
 8002056:	801a      	strh	r2, [r3, #0]
 8002058:	183b      	adds	r3, r7, r0
 800205a:	183a      	adds	r2, r7, r0
 800205c:	8812      	ldrh	r2, [r2, #0]
 800205e:	2180      	movs	r1, #128	; 0x80
 8002060:	0189      	lsls	r1, r1, #6
 8002062:	404a      	eors	r2, r1
 8002064:	801a      	strh	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	001a      	movs	r2, r3
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	18d3      	adds	r3, r2, r3
 8002074:	183a      	adds	r2, r7, r0
 8002076:	8812      	ldrh	r2, [r2, #0]
 8002078:	495f      	ldr	r1, [pc, #380]	; (80021f8 <HAL_PCD_EP_DB_Receive+0x230>)
 800207a:	430a      	orrs	r2, r1
 800207c:	b292      	uxth	r2, r2
 800207e:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002080:	1dbb      	adds	r3, r7, #6
 8002082:	881b      	ldrh	r3, [r3, #0]
 8002084:	2240      	movs	r2, #64	; 0x40
 8002086:	4013      	ands	r3, r2
 8002088:	d01a      	beq.n	80020c0 <HAL_PCD_EP_DB_Receive+0xf8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	001a      	movs	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	18d3      	adds	r3, r2, r3
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	b29a      	uxth	r2, r3
 800209c:	2016      	movs	r0, #22
 800209e:	183b      	adds	r3, r7, r0
 80020a0:	4956      	ldr	r1, [pc, #344]	; (80021fc <HAL_PCD_EP_DB_Receive+0x234>)
 80020a2:	400a      	ands	r2, r1
 80020a4:	801a      	strh	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	001a      	movs	r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	18d3      	adds	r3, r2, r3
 80020b4:	183a      	adds	r2, r7, r0
 80020b6:	8812      	ldrh	r2, [r2, #0]
 80020b8:	4951      	ldr	r1, [pc, #324]	; (8002200 <HAL_PCD_EP_DB_Receive+0x238>)
 80020ba:	430a      	orrs	r2, r1
 80020bc:	b292      	uxth	r2, r2
 80020be:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80020c0:	231a      	movs	r3, #26
 80020c2:	18fb      	adds	r3, r7, r3
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d100      	bne.n	80020cc <HAL_PCD_EP_DB_Receive+0x104>
 80020ca:	e089      	b.n	80021e0 <HAL_PCD_EP_DB_Receive+0x218>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6818      	ldr	r0, [r3, #0]
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	6959      	ldr	r1, [r3, #20]
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	891a      	ldrh	r2, [r3, #8]
 80020d8:	231a      	movs	r3, #26
 80020da:	18fb      	adds	r3, r7, r3
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	f003 ff32 	bl	8005f46 <USB_ReadPMA>
 80020e2:	e07d      	b.n	80021e0 <HAL_PCD_EP_DB_Receive+0x218>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2250      	movs	r2, #80	; 0x50
 80020ea:	5a9b      	ldrh	r3, [r3, r2]
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	001a      	movs	r2, r3
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	18d2      	adds	r2, r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	18d3      	adds	r3, r2, r3
 80020fe:	4a41      	ldr	r2, [pc, #260]	; (8002204 <HAL_PCD_EP_DB_Receive+0x23c>)
 8002100:	4694      	mov	ip, r2
 8002102:	4463      	add	r3, ip
 8002104:	881a      	ldrh	r2, [r3, #0]
 8002106:	211a      	movs	r1, #26
 8002108:	187b      	adds	r3, r7, r1
 800210a:	0592      	lsls	r2, r2, #22
 800210c:	0d92      	lsrs	r2, r2, #22
 800210e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	699a      	ldr	r2, [r3, #24]
 8002114:	187b      	adds	r3, r7, r1
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	429a      	cmp	r2, r3
 800211a:	d308      	bcc.n	800212e <HAL_PCD_EP_DB_Receive+0x166>
    {
      ep->xfer_len -= count;
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	699a      	ldr	r2, [r3, #24]
 8002120:	231a      	movs	r3, #26
 8002122:	18fb      	adds	r3, r7, r3
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	1ad2      	subs	r2, r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	619a      	str	r2, [r3, #24]
 800212c:	e002      	b.n	8002134 <HAL_PCD_EP_DB_Receive+0x16c>
    }
    else
    {
      ep->xfer_len = 0U;
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	2200      	movs	r2, #0
 8002132:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d121      	bne.n	8002180 <HAL_PCD_EP_DB_Receive+0x1b8>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	001a      	movs	r2, r3
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	18d3      	adds	r3, r2, r3
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	b29a      	uxth	r2, r3
 800214e:	201e      	movs	r0, #30
 8002150:	183b      	adds	r3, r7, r0
 8002152:	4928      	ldr	r1, [pc, #160]	; (80021f4 <HAL_PCD_EP_DB_Receive+0x22c>)
 8002154:	400a      	ands	r2, r1
 8002156:	801a      	strh	r2, [r3, #0]
 8002158:	183b      	adds	r3, r7, r0
 800215a:	183a      	adds	r2, r7, r0
 800215c:	8812      	ldrh	r2, [r2, #0]
 800215e:	2180      	movs	r1, #128	; 0x80
 8002160:	0189      	lsls	r1, r1, #6
 8002162:	404a      	eors	r2, r1
 8002164:	801a      	strh	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	001a      	movs	r2, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	18d3      	adds	r3, r2, r3
 8002174:	183a      	adds	r2, r7, r0
 8002176:	8812      	ldrh	r2, [r2, #0]
 8002178:	491f      	ldr	r1, [pc, #124]	; (80021f8 <HAL_PCD_EP_DB_Receive+0x230>)
 800217a:	430a      	orrs	r2, r1
 800217c:	b292      	uxth	r2, r2
 800217e:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002180:	1dbb      	adds	r3, r7, #6
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	2240      	movs	r2, #64	; 0x40
 8002186:	4013      	ands	r3, r2
 8002188:	d11a      	bne.n	80021c0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	001a      	movs	r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	18d3      	adds	r3, r2, r3
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	b29a      	uxth	r2, r3
 800219c:	201c      	movs	r0, #28
 800219e:	183b      	adds	r3, r7, r0
 80021a0:	4916      	ldr	r1, [pc, #88]	; (80021fc <HAL_PCD_EP_DB_Receive+0x234>)
 80021a2:	400a      	ands	r2, r1
 80021a4:	801a      	strh	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	001a      	movs	r2, r3
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	18d3      	adds	r3, r2, r3
 80021b4:	183a      	adds	r2, r7, r0
 80021b6:	8812      	ldrh	r2, [r2, #0]
 80021b8:	4911      	ldr	r1, [pc, #68]	; (8002200 <HAL_PCD_EP_DB_Receive+0x238>)
 80021ba:	430a      	orrs	r2, r1
 80021bc:	b292      	uxth	r2, r2
 80021be:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80021c0:	231a      	movs	r3, #26
 80021c2:	18fb      	adds	r3, r7, r3
 80021c4:	881b      	ldrh	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00a      	beq.n	80021e0 <HAL_PCD_EP_DB_Receive+0x218>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6818      	ldr	r0, [r3, #0]
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	6959      	ldr	r1, [r3, #20]
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	895a      	ldrh	r2, [r3, #10]
 80021d6:	231a      	movs	r3, #26
 80021d8:	18fb      	adds	r3, r7, r3
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	f003 feb3 	bl	8005f46 <USB_ReadPMA>
    }
  }

  return count;
 80021e0:	231a      	movs	r3, #26
 80021e2:	18fb      	adds	r3, r7, r3
 80021e4:	881b      	ldrh	r3, [r3, #0]
}
 80021e6:	0018      	movs	r0, r3
 80021e8:	46bd      	mov	sp, r7
 80021ea:	b008      	add	sp, #32
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	00000402 	.word	0x00000402
 80021f4:	ffffbf8f 	.word	0xffffbf8f
 80021f8:	ffff8080 	.word	0xffff8080
 80021fc:	ffff8f8f 	.word	0xffff8f8f
 8002200:	ffff80c0 	.word	0xffff80c0
 8002204:	00000406 	.word	0x00000406

08002208 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b092      	sub	sp, #72	; 0x48
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	1dbb      	adds	r3, r7, #6
 8002214:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002216:	1dbb      	adds	r3, r7, #6
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	2240      	movs	r2, #64	; 0x40
 800221c:	4013      	ands	r3, r2
 800221e:	d100      	bne.n	8002222 <HAL_PCD_EP_DB_Transmit+0x1a>
 8002220:	e12f      	b.n	8002482 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2250      	movs	r2, #80	; 0x50
 8002228:	5a9b      	ldrh	r3, [r3, r2]
 800222a:	b29b      	uxth	r3, r3
 800222c:	001a      	movs	r2, r3
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	18d2      	adds	r2, r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	18d3      	adds	r3, r2, r3
 800223c:	4abc      	ldr	r2, [pc, #752]	; (8002530 <HAL_PCD_EP_DB_Transmit+0x328>)
 800223e:	4694      	mov	ip, r2
 8002240:	4463      	add	r3, ip
 8002242:	881a      	ldrh	r2, [r3, #0]
 8002244:	212e      	movs	r1, #46	; 0x2e
 8002246:	187b      	adds	r3, r7, r1
 8002248:	0592      	lsls	r2, r2, #22
 800224a:	0d92      	lsrs	r2, r2, #22
 800224c:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	699a      	ldr	r2, [r3, #24]
 8002252:	187b      	adds	r3, r7, r1
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d908      	bls.n	800226c <HAL_PCD_EP_DB_Transmit+0x64>
    {
      ep->xfer_len -= TxByteNbre;
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	699a      	ldr	r2, [r3, #24]
 800225e:	232e      	movs	r3, #46	; 0x2e
 8002260:	18fb      	adds	r3, r7, r3
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	1ad2      	subs	r2, r2, r3
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	619a      	str	r2, [r3, #24]
 800226a:	e002      	b.n	8002272 <HAL_PCD_EP_DB_Transmit+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2200      	movs	r2, #0
 8002270:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d129      	bne.n	80022ce <HAL_PCD_EP_DB_Transmit+0xc6>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	781a      	ldrb	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	0011      	movs	r1, r2
 8002282:	0018      	movs	r0, r3
 8002284:	f005 fd3e 	bl	8007d04 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002288:	1dbb      	adds	r3, r7, #6
 800228a:	881a      	ldrh	r2, [r3, #0]
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	01db      	lsls	r3, r3, #7
 8002290:	4013      	ands	r3, r2
 8002292:	d100      	bne.n	8002296 <HAL_PCD_EP_DB_Transmit+0x8e>
 8002294:	e231      	b.n	80026fa <HAL_PCD_EP_DB_Transmit+0x4f2>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	001a      	movs	r2, r3
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	18d3      	adds	r3, r2, r3
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	2012      	movs	r0, #18
 80022aa:	183b      	adds	r3, r7, r0
 80022ac:	49a1      	ldr	r1, [pc, #644]	; (8002534 <HAL_PCD_EP_DB_Transmit+0x32c>)
 80022ae:	400a      	ands	r2, r1
 80022b0:	801a      	strh	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	001a      	movs	r2, r3
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	18d3      	adds	r3, r2, r3
 80022c0:	183a      	adds	r2, r7, r0
 80022c2:	8812      	ldrh	r2, [r2, #0]
 80022c4:	499c      	ldr	r1, [pc, #624]	; (8002538 <HAL_PCD_EP_DB_Transmit+0x330>)
 80022c6:	430a      	orrs	r2, r1
 80022c8:	b292      	uxth	r2, r2
 80022ca:	801a      	strh	r2, [r3, #0]
 80022cc:	e215      	b.n	80026fa <HAL_PCD_EP_DB_Transmit+0x4f2>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022ce:	1dbb      	adds	r3, r7, #6
 80022d0:	881a      	ldrh	r2, [r3, #0]
 80022d2:	2380      	movs	r3, #128	; 0x80
 80022d4:	01db      	lsls	r3, r3, #7
 80022d6:	4013      	ands	r3, r2
 80022d8:	d01a      	beq.n	8002310 <HAL_PCD_EP_DB_Transmit+0x108>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	001a      	movs	r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	18d3      	adds	r3, r2, r3
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	2024      	movs	r0, #36	; 0x24
 80022ee:	183b      	adds	r3, r7, r0
 80022f0:	4990      	ldr	r1, [pc, #576]	; (8002534 <HAL_PCD_EP_DB_Transmit+0x32c>)
 80022f2:	400a      	ands	r2, r1
 80022f4:	801a      	strh	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	001a      	movs	r2, r3
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	18d3      	adds	r3, r2, r3
 8002304:	183a      	adds	r2, r7, r0
 8002306:	8812      	ldrh	r2, [r2, #0]
 8002308:	498b      	ldr	r1, [pc, #556]	; (8002538 <HAL_PCD_EP_DB_Transmit+0x330>)
 800230a:	430a      	orrs	r2, r1
 800230c:	b292      	uxth	r2, r2
 800230e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2224      	movs	r2, #36	; 0x24
 8002314:	5c9b      	ldrb	r3, [r3, r2]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d000      	beq.n	800231c <HAL_PCD_EP_DB_Transmit+0x114>
 800231a:	e1ee      	b.n	80026fa <HAL_PCD_EP_DB_Transmit+0x4f2>
      {
        ep->xfer_buff += TxByteNbre;
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	695a      	ldr	r2, [r3, #20]
 8002320:	212e      	movs	r1, #46	; 0x2e
 8002322:	187b      	adds	r3, r7, r1
 8002324:	881b      	ldrh	r3, [r3, #0]
 8002326:	18d2      	adds	r2, r2, r3
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	69da      	ldr	r2, [r3, #28]
 8002330:	187b      	adds	r3, r7, r1
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	18d2      	adds	r2, r2, r3
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	6a1a      	ldr	r2, [r3, #32]
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	429a      	cmp	r2, r3
 8002344:	d309      	bcc.n	800235a <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	6a1a      	ldr	r2, [r3, #32]
 8002350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002352:	1ad2      	subs	r2, r2, r3
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	621a      	str	r2, [r3, #32]
 8002358:	e016      	b.n	8002388 <HAL_PCD_EP_DB_Transmit+0x180>
        }
        else if (ep->xfer_len_db == 0U)
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d108      	bne.n	8002374 <HAL_PCD_EP_DB_Transmit+0x16c>
        {
          len = TxByteNbre;
 8002362:	232e      	movs	r3, #46	; 0x2e
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2224      	movs	r2, #36	; 0x24
 800236e:	2100      	movs	r1, #0
 8002370:	5499      	strb	r1, [r3, r2]
 8002372:	e009      	b.n	8002388 <HAL_PCD_EP_DB_Transmit+0x180>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2224      	movs	r2, #36	; 0x24
 8002378:	2100      	movs	r1, #0
 800237a:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	2200      	movs	r2, #0
 8002386:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	785b      	ldrb	r3, [r3, #1]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d150      	bne.n	8002432 <HAL_PCD_EP_DB_Transmit+0x22a>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	61bb      	str	r3, [r7, #24]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2250      	movs	r2, #80	; 0x50
 800239c:	5a9b      	ldrh	r3, [r3, r2]
 800239e:	b29b      	uxth	r3, r3
 80023a0:	001a      	movs	r2, r3
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	189b      	adds	r3, r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	00da      	lsls	r2, r3, #3
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	18d3      	adds	r3, r2, r3
 80023b2:	4a5f      	ldr	r2, [pc, #380]	; (8002530 <HAL_PCD_EP_DB_Transmit+0x328>)
 80023b4:	4694      	mov	ip, r2
 80023b6:	4463      	add	r3, ip
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d110      	bne.n	80023e2 <HAL_PCD_EP_DB_Transmit+0x1da>
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	4a5d      	ldr	r2, [pc, #372]	; (800253c <HAL_PCD_EP_DB_Transmit+0x334>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	801a      	strh	r2, [r3, #0]
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	4a5a      	ldr	r2, [pc, #360]	; (8002540 <HAL_PCD_EP_DB_Transmit+0x338>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	b29a      	uxth	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	801a      	strh	r2, [r3, #0]
 80023e0:	e044      	b.n	800246c <HAL_PCD_EP_DB_Transmit+0x264>
 80023e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e4:	2b3e      	cmp	r3, #62	; 0x3e
 80023e6:	d810      	bhi.n	800240a <HAL_PCD_EP_DB_Transmit+0x202>
 80023e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ea:	085b      	lsrs	r3, r3, #1
 80023ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f0:	2201      	movs	r2, #1
 80023f2:	4013      	ands	r3, r2
 80023f4:	d002      	beq.n	80023fc <HAL_PCD_EP_DB_Transmit+0x1f4>
 80023f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f8:	3301      	adds	r3, #1
 80023fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80023fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fe:	b29b      	uxth	r3, r3
 8002400:	029b      	lsls	r3, r3, #10
 8002402:	b29a      	uxth	r2, r3
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	801a      	strh	r2, [r3, #0]
 8002408:	e030      	b.n	800246c <HAL_PCD_EP_DB_Transmit+0x264>
 800240a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800240c:	095b      	lsrs	r3, r3, #5
 800240e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002412:	221f      	movs	r2, #31
 8002414:	4013      	ands	r3, r2
 8002416:	d102      	bne.n	800241e <HAL_PCD_EP_DB_Transmit+0x216>
 8002418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241a:	3b01      	subs	r3, #1
 800241c:	62bb      	str	r3, [r7, #40]	; 0x28
 800241e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002420:	b29b      	uxth	r3, r3
 8002422:	029b      	lsls	r3, r3, #10
 8002424:	b29b      	uxth	r3, r3
 8002426:	4a46      	ldr	r2, [pc, #280]	; (8002540 <HAL_PCD_EP_DB_Transmit+0x338>)
 8002428:	4313      	orrs	r3, r2
 800242a:	b29a      	uxth	r2, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	801a      	strh	r2, [r3, #0]
 8002430:	e01c      	b.n	800246c <HAL_PCD_EP_DB_Transmit+0x264>
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	785b      	ldrb	r3, [r3, #1]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d118      	bne.n	800246c <HAL_PCD_EP_DB_Transmit+0x264>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	623b      	str	r3, [r7, #32]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2250      	movs	r2, #80	; 0x50
 8002446:	5a9b      	ldrh	r3, [r3, r2]
 8002448:	b29b      	uxth	r3, r3
 800244a:	001a      	movs	r2, r3
 800244c:	6a3b      	ldr	r3, [r7, #32]
 800244e:	189b      	adds	r3, r3, r2
 8002450:	623b      	str	r3, [r7, #32]
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	00da      	lsls	r2, r3, #3
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	18d3      	adds	r3, r2, r3
 800245c:	4a34      	ldr	r2, [pc, #208]	; (8002530 <HAL_PCD_EP_DB_Transmit+0x328>)
 800245e:	4694      	mov	ip, r2
 8002460:	4463      	add	r3, ip
 8002462:	61fb      	str	r3, [r7, #28]
 8002464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002466:	b29a      	uxth	r2, r3
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6818      	ldr	r0, [r3, #0]
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	6959      	ldr	r1, [r3, #20]
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	891a      	ldrh	r2, [r3, #8]
 8002478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800247a:	b29b      	uxth	r3, r3
 800247c:	f003 fd20 	bl	8005ec0 <USB_WritePMA>
 8002480:	e13b      	b.n	80026fa <HAL_PCD_EP_DB_Transmit+0x4f2>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2250      	movs	r2, #80	; 0x50
 8002488:	5a9b      	ldrh	r3, [r3, r2]
 800248a:	b29b      	uxth	r3, r3
 800248c:	001a      	movs	r2, r3
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	18d2      	adds	r2, r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	18d3      	adds	r3, r2, r3
 800249c:	4a29      	ldr	r2, [pc, #164]	; (8002544 <HAL_PCD_EP_DB_Transmit+0x33c>)
 800249e:	4694      	mov	ip, r2
 80024a0:	4463      	add	r3, ip
 80024a2:	881a      	ldrh	r2, [r3, #0]
 80024a4:	212e      	movs	r1, #46	; 0x2e
 80024a6:	187b      	adds	r3, r7, r1
 80024a8:	0592      	lsls	r2, r2, #22
 80024aa:	0d92      	lsrs	r2, r2, #22
 80024ac:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	699a      	ldr	r2, [r3, #24]
 80024b2:	187b      	adds	r3, r7, r1
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d308      	bcc.n	80024cc <HAL_PCD_EP_DB_Transmit+0x2c4>
    {
      ep->xfer_len -= TxByteNbre;
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	699a      	ldr	r2, [r3, #24]
 80024be:	232e      	movs	r3, #46	; 0x2e
 80024c0:	18fb      	adds	r3, r7, r3
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	1ad2      	subs	r2, r2, r3
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	619a      	str	r2, [r3, #24]
 80024ca:	e002      	b.n	80024d2 <HAL_PCD_EP_DB_Transmit+0x2ca>
    }
    else
    {
      ep->xfer_len = 0U;
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	2200      	movs	r2, #0
 80024d0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d136      	bne.n	8002548 <HAL_PCD_EP_DB_Transmit+0x340>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	781a      	ldrb	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	0011      	movs	r1, r2
 80024e2:	0018      	movs	r0, r3
 80024e4:	f005 fc0e 	bl	8007d04 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80024e8:	1dbb      	adds	r3, r7, #6
 80024ea:	881a      	ldrh	r2, [r3, #0]
 80024ec:	2380      	movs	r3, #128	; 0x80
 80024ee:	01db      	lsls	r3, r3, #7
 80024f0:	4013      	ands	r3, r2
 80024f2:	d000      	beq.n	80024f6 <HAL_PCD_EP_DB_Transmit+0x2ee>
 80024f4:	e101      	b.n	80026fa <HAL_PCD_EP_DB_Transmit+0x4f2>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	001a      	movs	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	18d3      	adds	r3, r2, r3
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	b29a      	uxth	r2, r3
 8002508:	2026      	movs	r0, #38	; 0x26
 800250a:	183b      	adds	r3, r7, r0
 800250c:	4909      	ldr	r1, [pc, #36]	; (8002534 <HAL_PCD_EP_DB_Transmit+0x32c>)
 800250e:	400a      	ands	r2, r1
 8002510:	801a      	strh	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	001a      	movs	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	18d3      	adds	r3, r2, r3
 8002520:	183a      	adds	r2, r7, r0
 8002522:	8812      	ldrh	r2, [r2, #0]
 8002524:	4904      	ldr	r1, [pc, #16]	; (8002538 <HAL_PCD_EP_DB_Transmit+0x330>)
 8002526:	430a      	orrs	r2, r1
 8002528:	b292      	uxth	r2, r2
 800252a:	801a      	strh	r2, [r3, #0]
 800252c:	e0e5      	b.n	80026fa <HAL_PCD_EP_DB_Transmit+0x4f2>
 800252e:	46c0      	nop			; (mov r8, r8)
 8002530:	00000402 	.word	0x00000402
 8002534:	ffff8f8f 	.word	0xffff8f8f
 8002538:	ffffc080 	.word	0xffffc080
 800253c:	ffff83ff 	.word	0xffff83ff
 8002540:	ffff8000 	.word	0xffff8000
 8002544:	00000406 	.word	0x00000406
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002548:	1dbb      	adds	r3, r7, #6
 800254a:	881a      	ldrh	r2, [r3, #0]
 800254c:	2380      	movs	r3, #128	; 0x80
 800254e:	01db      	lsls	r3, r3, #7
 8002550:	4013      	ands	r3, r2
 8002552:	d11a      	bne.n	800258a <HAL_PCD_EP_DB_Transmit+0x382>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	001a      	movs	r2, r3
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	18d3      	adds	r3, r2, r3
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	b29a      	uxth	r2, r3
 8002566:	202c      	movs	r0, #44	; 0x2c
 8002568:	183b      	adds	r3, r7, r0
 800256a:	497a      	ldr	r1, [pc, #488]	; (8002754 <HAL_PCD_EP_DB_Transmit+0x54c>)
 800256c:	400a      	ands	r2, r1
 800256e:	801a      	strh	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	001a      	movs	r2, r3
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	18d3      	adds	r3, r2, r3
 800257e:	183a      	adds	r2, r7, r0
 8002580:	8812      	ldrh	r2, [r2, #0]
 8002582:	4975      	ldr	r1, [pc, #468]	; (8002758 <HAL_PCD_EP_DB_Transmit+0x550>)
 8002584:	430a      	orrs	r2, r1
 8002586:	b292      	uxth	r2, r2
 8002588:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2224      	movs	r2, #36	; 0x24
 800258e:	5c9b      	ldrb	r3, [r3, r2]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d000      	beq.n	8002596 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002594:	e0b1      	b.n	80026fa <HAL_PCD_EP_DB_Transmit+0x4f2>
      {
        ep->xfer_buff += TxByteNbre;
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	695a      	ldr	r2, [r3, #20]
 800259a:	212e      	movs	r1, #46	; 0x2e
 800259c:	187b      	adds	r3, r7, r1
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	18d2      	adds	r2, r2, r3
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	69da      	ldr	r2, [r3, #28]
 80025aa:	187b      	adds	r3, r7, r1
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	18d2      	adds	r2, r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	6a1a      	ldr	r2, [r3, #32]
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d309      	bcc.n	80025d4 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = ep->maxpacket;
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	6a1a      	ldr	r2, [r3, #32]
 80025ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025cc:	1ad2      	subs	r2, r2, r3
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	621a      	str	r2, [r3, #32]
 80025d2:	e016      	b.n	8002602 <HAL_PCD_EP_DB_Transmit+0x3fa>
        }
        else if (ep->xfer_len_db == 0U)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d108      	bne.n	80025ee <HAL_PCD_EP_DB_Transmit+0x3e6>
        {
          len = TxByteNbre;
 80025dc:	232e      	movs	r3, #46	; 0x2e
 80025de:	18fb      	adds	r3, r7, r3
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2224      	movs	r2, #36	; 0x24
 80025e8:	2100      	movs	r1, #0
 80025ea:	5499      	strb	r1, [r3, r2]
 80025ec:	e009      	b.n	8002602 <HAL_PCD_EP_DB_Transmit+0x3fa>
        }
        else
        {
          len = ep->xfer_len_db;
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2200      	movs	r2, #0
 80025f8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2224      	movs	r2, #36	; 0x24
 80025fe:	2100      	movs	r1, #0
 8002600:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	637b      	str	r3, [r7, #52]	; 0x34
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	785b      	ldrb	r3, [r3, #1]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d150      	bne.n	80026b2 <HAL_PCD_EP_DB_Transmit+0x4aa>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	647b      	str	r3, [r7, #68]	; 0x44
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2250      	movs	r2, #80	; 0x50
 800261c:	5a9b      	ldrh	r3, [r3, r2]
 800261e:	b29b      	uxth	r3, r3
 8002620:	001a      	movs	r2, r3
 8002622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002624:	189b      	adds	r3, r3, r2
 8002626:	647b      	str	r3, [r7, #68]	; 0x44
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	00da      	lsls	r2, r3, #3
 800262e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002630:	18d3      	adds	r3, r2, r3
 8002632:	4a4a      	ldr	r2, [pc, #296]	; (800275c <HAL_PCD_EP_DB_Transmit+0x554>)
 8002634:	4694      	mov	ip, r2
 8002636:	4463      	add	r3, ip
 8002638:	643b      	str	r3, [r7, #64]	; 0x40
 800263a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800263c:	2b00      	cmp	r3, #0
 800263e:	d110      	bne.n	8002662 <HAL_PCD_EP_DB_Transmit+0x45a>
 8002640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	b29b      	uxth	r3, r3
 8002646:	4a46      	ldr	r2, [pc, #280]	; (8002760 <HAL_PCD_EP_DB_Transmit+0x558>)
 8002648:	4013      	ands	r3, r2
 800264a:	b29a      	uxth	r2, r3
 800264c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800264e:	801a      	strh	r2, [r3, #0]
 8002650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	b29b      	uxth	r3, r3
 8002656:	4a43      	ldr	r2, [pc, #268]	; (8002764 <HAL_PCD_EP_DB_Transmit+0x55c>)
 8002658:	4313      	orrs	r3, r2
 800265a:	b29a      	uxth	r2, r3
 800265c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800265e:	801a      	strh	r2, [r3, #0]
 8002660:	e041      	b.n	80026e6 <HAL_PCD_EP_DB_Transmit+0x4de>
 8002662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002664:	2b3e      	cmp	r3, #62	; 0x3e
 8002666:	d810      	bhi.n	800268a <HAL_PCD_EP_DB_Transmit+0x482>
 8002668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800266a:	085b      	lsrs	r3, r3, #1
 800266c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800266e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002670:	2201      	movs	r2, #1
 8002672:	4013      	ands	r3, r2
 8002674:	d002      	beq.n	800267c <HAL_PCD_EP_DB_Transmit+0x474>
 8002676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002678:	3301      	adds	r3, #1
 800267a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800267c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800267e:	b29b      	uxth	r3, r3
 8002680:	029b      	lsls	r3, r3, #10
 8002682:	b29a      	uxth	r2, r3
 8002684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002686:	801a      	strh	r2, [r3, #0]
 8002688:	e02d      	b.n	80026e6 <HAL_PCD_EP_DB_Transmit+0x4de>
 800268a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800268c:	095b      	lsrs	r3, r3, #5
 800268e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002692:	221f      	movs	r2, #31
 8002694:	4013      	ands	r3, r2
 8002696:	d102      	bne.n	800269e <HAL_PCD_EP_DB_Transmit+0x496>
 8002698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800269a:	3b01      	subs	r3, #1
 800269c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800269e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	029b      	lsls	r3, r3, #10
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	4a2f      	ldr	r2, [pc, #188]	; (8002764 <HAL_PCD_EP_DB_Transmit+0x55c>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026ae:	801a      	strh	r2, [r3, #0]
 80026b0:	e019      	b.n	80026e6 <HAL_PCD_EP_DB_Transmit+0x4de>
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	785b      	ldrb	r3, [r3, #1]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d115      	bne.n	80026e6 <HAL_PCD_EP_DB_Transmit+0x4de>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2250      	movs	r2, #80	; 0x50
 80026c0:	5a9b      	ldrh	r3, [r3, r2]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	001a      	movs	r2, r3
 80026c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c8:	189b      	adds	r3, r3, r2
 80026ca:	637b      	str	r3, [r7, #52]	; 0x34
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	00da      	lsls	r2, r3, #3
 80026d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d4:	18d3      	adds	r3, r2, r3
 80026d6:	4a21      	ldr	r2, [pc, #132]	; (800275c <HAL_PCD_EP_DB_Transmit+0x554>)
 80026d8:	4694      	mov	ip, r2
 80026da:	4463      	add	r3, ip
 80026dc:	633b      	str	r3, [r7, #48]	; 0x30
 80026de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6818      	ldr	r0, [r3, #0]
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	6959      	ldr	r1, [r3, #20]
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	895a      	ldrh	r2, [r3, #10]
 80026f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	f003 fbe3 	bl	8005ec0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	001a      	movs	r2, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	18d3      	adds	r3, r2, r3
 8002708:	881b      	ldrh	r3, [r3, #0]
 800270a:	b29a      	uxth	r2, r3
 800270c:	2010      	movs	r0, #16
 800270e:	183b      	adds	r3, r7, r0
 8002710:	4915      	ldr	r1, [pc, #84]	; (8002768 <HAL_PCD_EP_DB_Transmit+0x560>)
 8002712:	400a      	ands	r2, r1
 8002714:	801a      	strh	r2, [r3, #0]
 8002716:	183b      	adds	r3, r7, r0
 8002718:	183a      	adds	r2, r7, r0
 800271a:	8812      	ldrh	r2, [r2, #0]
 800271c:	2110      	movs	r1, #16
 800271e:	404a      	eors	r2, r1
 8002720:	801a      	strh	r2, [r3, #0]
 8002722:	183b      	adds	r3, r7, r0
 8002724:	183a      	adds	r2, r7, r0
 8002726:	8812      	ldrh	r2, [r2, #0]
 8002728:	2120      	movs	r1, #32
 800272a:	404a      	eors	r2, r1
 800272c:	801a      	strh	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	001a      	movs	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	18d3      	adds	r3, r2, r3
 800273c:	183a      	adds	r2, r7, r0
 800273e:	8812      	ldrh	r2, [r2, #0]
 8002740:	490a      	ldr	r1, [pc, #40]	; (800276c <HAL_PCD_EP_DB_Transmit+0x564>)
 8002742:	430a      	orrs	r2, r1
 8002744:	b292      	uxth	r2, r2
 8002746:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	0018      	movs	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	b012      	add	sp, #72	; 0x48
 8002750:	bd80      	pop	{r7, pc}
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	ffff8f8f 	.word	0xffff8f8f
 8002758:	ffffc080 	.word	0xffffc080
 800275c:	00000406 	.word	0x00000406
 8002760:	ffff83ff 	.word	0xffff83ff
 8002764:	ffff8000 	.word	0xffff8000
 8002768:	ffff8fbf 	.word	0xffff8fbf
 800276c:	ffff8080 	.word	0xffff8080

08002770 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002770:	b590      	push	{r4, r7, lr}
 8002772:	b087      	sub	sp, #28
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	0008      	movs	r0, r1
 800277a:	0011      	movs	r1, r2
 800277c:	607b      	str	r3, [r7, #4]
 800277e:	240a      	movs	r4, #10
 8002780:	193b      	adds	r3, r7, r4
 8002782:	1c02      	adds	r2, r0, #0
 8002784:	801a      	strh	r2, [r3, #0]
 8002786:	2308      	movs	r3, #8
 8002788:	18fb      	adds	r3, r7, r3
 800278a:	1c0a      	adds	r2, r1, #0
 800278c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800278e:	193b      	adds	r3, r7, r4
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	2280      	movs	r2, #128	; 0x80
 8002794:	4013      	ands	r3, r2
 8002796:	b29b      	uxth	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00d      	beq.n	80027b8 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800279c:	230a      	movs	r3, #10
 800279e:	18fb      	adds	r3, r7, r3
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	2207      	movs	r2, #7
 80027a4:	4013      	ands	r3, r2
 80027a6:	1c5a      	adds	r2, r3, #1
 80027a8:	0013      	movs	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	189b      	adds	r3, r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	18d3      	adds	r3, r2, r3
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	e00b      	b.n	80027d0 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80027b8:	230a      	movs	r3, #10
 80027ba:	18fb      	adds	r3, r7, r3
 80027bc:	881a      	ldrh	r2, [r3, #0]
 80027be:	0013      	movs	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	189b      	adds	r3, r3, r2
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	3369      	adds	r3, #105	; 0x69
 80027c8:	33ff      	adds	r3, #255	; 0xff
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	18d3      	adds	r3, r2, r3
 80027ce:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80027d0:	2308      	movs	r3, #8
 80027d2:	18fb      	adds	r3, r7, r3
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d107      	bne.n	80027ea <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	2200      	movs	r2, #0
 80027de:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	80da      	strh	r2, [r3, #6]
 80027e8:	e00b      	b.n	8002802 <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2201      	movs	r2, #1
 80027ee:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	0c1b      	lsrs	r3, r3, #16
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	0018      	movs	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	b007      	add	sp, #28
 800280a:	bd90      	pop	{r4, r7, pc}

0800280c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	23ba      	movs	r3, #186	; 0xba
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	2101      	movs	r1, #1
 8002822:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	23b8      	movs	r3, #184	; 0xb8
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	2100      	movs	r1, #0
 800282c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2254      	movs	r2, #84	; 0x54
 8002832:	5a9b      	ldrh	r3, [r3, r2]
 8002834:	b29b      	uxth	r3, r3
 8002836:	2201      	movs	r2, #1
 8002838:	4313      	orrs	r3, r2
 800283a:	b299      	uxth	r1, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2254      	movs	r2, #84	; 0x54
 8002840:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2254      	movs	r2, #84	; 0x54
 8002846:	5a9b      	ldrh	r3, [r3, r2]
 8002848:	b29b      	uxth	r3, r3
 800284a:	2202      	movs	r2, #2
 800284c:	4313      	orrs	r3, r2
 800284e:	b299      	uxth	r1, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2254      	movs	r2, #84	; 0x54
 8002854:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	0018      	movs	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	b004      	add	sp, #16
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	000a      	movs	r2, r1
 800286a:	1cfb      	adds	r3, r7, #3
 800286c:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	46bd      	mov	sp, r7
 8002872:	b002      	add	sp, #8
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002878:	b5b0      	push	{r4, r5, r7, lr}
 800287a:	b08a      	sub	sp, #40	; 0x28
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d102      	bne.n	800288c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	f000 fbab 	bl	8002fe2 <HAL_RCC_OscConfig+0x76a>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800288c:	4bce      	ldr	r3, [pc, #824]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	220c      	movs	r2, #12
 8002892:	4013      	ands	r3, r2
 8002894:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002896:	4bcc      	ldr	r3, [pc, #816]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	2380      	movs	r3, #128	; 0x80
 800289c:	025b      	lsls	r3, r3, #9
 800289e:	4013      	ands	r3, r2
 80028a0:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2201      	movs	r2, #1
 80028a8:	4013      	ands	r3, r2
 80028aa:	d100      	bne.n	80028ae <HAL_RCC_OscConfig+0x36>
 80028ac:	e07e      	b.n	80029ac <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d007      	beq.n	80028c4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028b4:	6a3b      	ldr	r3, [r7, #32]
 80028b6:	2b0c      	cmp	r3, #12
 80028b8:	d112      	bne.n	80028e0 <HAL_RCC_OscConfig+0x68>
 80028ba:	69fa      	ldr	r2, [r7, #28]
 80028bc:	2380      	movs	r3, #128	; 0x80
 80028be:	025b      	lsls	r3, r3, #9
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d10d      	bne.n	80028e0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c4:	4bc0      	ldr	r3, [pc, #768]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	2380      	movs	r3, #128	; 0x80
 80028ca:	029b      	lsls	r3, r3, #10
 80028cc:	4013      	ands	r3, r2
 80028ce:	d100      	bne.n	80028d2 <HAL_RCC_OscConfig+0x5a>
 80028d0:	e06b      	b.n	80029aa <HAL_RCC_OscConfig+0x132>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d167      	bne.n	80029aa <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	f000 fb81 	bl	8002fe2 <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	2380      	movs	r3, #128	; 0x80
 80028e6:	025b      	lsls	r3, r3, #9
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d107      	bne.n	80028fc <HAL_RCC_OscConfig+0x84>
 80028ec:	4bb6      	ldr	r3, [pc, #728]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	4bb5      	ldr	r3, [pc, #724]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 80028f2:	2180      	movs	r1, #128	; 0x80
 80028f4:	0249      	lsls	r1, r1, #9
 80028f6:	430a      	orrs	r2, r1
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	e027      	b.n	800294c <HAL_RCC_OscConfig+0xd4>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	23a0      	movs	r3, #160	; 0xa0
 8002902:	02db      	lsls	r3, r3, #11
 8002904:	429a      	cmp	r2, r3
 8002906:	d10e      	bne.n	8002926 <HAL_RCC_OscConfig+0xae>
 8002908:	4baf      	ldr	r3, [pc, #700]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4bae      	ldr	r3, [pc, #696]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 800290e:	2180      	movs	r1, #128	; 0x80
 8002910:	02c9      	lsls	r1, r1, #11
 8002912:	430a      	orrs	r2, r1
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	4bac      	ldr	r3, [pc, #688]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	4bab      	ldr	r3, [pc, #684]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 800291c:	2180      	movs	r1, #128	; 0x80
 800291e:	0249      	lsls	r1, r1, #9
 8002920:	430a      	orrs	r2, r1
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	e012      	b.n	800294c <HAL_RCC_OscConfig+0xd4>
 8002926:	4ba8      	ldr	r3, [pc, #672]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	4ba7      	ldr	r3, [pc, #668]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 800292c:	49a7      	ldr	r1, [pc, #668]	; (8002bcc <HAL_RCC_OscConfig+0x354>)
 800292e:	400a      	ands	r2, r1
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	4ba5      	ldr	r3, [pc, #660]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	2380      	movs	r3, #128	; 0x80
 8002938:	025b      	lsls	r3, r3, #9
 800293a:	4013      	ands	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4ba1      	ldr	r3, [pc, #644]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	4ba0      	ldr	r3, [pc, #640]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 8002946:	49a2      	ldr	r1, [pc, #648]	; (8002bd0 <HAL_RCC_OscConfig+0x358>)
 8002948:	400a      	ands	r2, r1
 800294a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d015      	beq.n	8002980 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7fe f83a 	bl	80009cc <HAL_GetTick>
 8002958:	0003      	movs	r3, r0
 800295a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800295c:	e009      	b.n	8002972 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800295e:	f7fe f835 	bl	80009cc <HAL_GetTick>
 8002962:	0002      	movs	r2, r0
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b64      	cmp	r3, #100	; 0x64
 800296a:	d902      	bls.n	8002972 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	f000 fb38 	bl	8002fe2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002972:	4b95      	ldr	r3, [pc, #596]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	2380      	movs	r3, #128	; 0x80
 8002978:	029b      	lsls	r3, r3, #10
 800297a:	4013      	ands	r3, r2
 800297c:	d0ef      	beq.n	800295e <HAL_RCC_OscConfig+0xe6>
 800297e:	e015      	b.n	80029ac <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002980:	f7fe f824 	bl	80009cc <HAL_GetTick>
 8002984:	0003      	movs	r3, r0
 8002986:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800298a:	f7fe f81f 	bl	80009cc <HAL_GetTick>
 800298e:	0002      	movs	r2, r0
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b64      	cmp	r3, #100	; 0x64
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e322      	b.n	8002fe2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800299c:	4b8a      	ldr	r3, [pc, #552]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	2380      	movs	r3, #128	; 0x80
 80029a2:	029b      	lsls	r3, r3, #10
 80029a4:	4013      	ands	r3, r2
 80029a6:	d1f0      	bne.n	800298a <HAL_RCC_OscConfig+0x112>
 80029a8:	e000      	b.n	80029ac <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029aa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2202      	movs	r2, #2
 80029b2:	4013      	ands	r3, r2
 80029b4:	d100      	bne.n	80029b8 <HAL_RCC_OscConfig+0x140>
 80029b6:	e08a      	b.n	8002ace <HAL_RCC_OscConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d005      	beq.n	80029d0 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029c4:	6a3b      	ldr	r3, [r7, #32]
 80029c6:	2b0c      	cmp	r3, #12
 80029c8:	d13d      	bne.n	8002a46 <HAL_RCC_OscConfig+0x1ce>
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d13a      	bne.n	8002a46 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80029d0:	4b7d      	ldr	r3, [pc, #500]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2204      	movs	r2, #4
 80029d6:	4013      	ands	r3, r2
 80029d8:	d004      	beq.n	80029e4 <HAL_RCC_OscConfig+0x16c>
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e2fe      	b.n	8002fe2 <HAL_RCC_OscConfig+0x76a>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e4:	4b78      	ldr	r3, [pc, #480]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	4a7a      	ldr	r2, [pc, #488]	; (8002bd4 <HAL_RCC_OscConfig+0x35c>)
 80029ea:	4013      	ands	r3, r2
 80029ec:	0019      	movs	r1, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	021a      	lsls	r2, r3, #8
 80029f4:	4b74      	ldr	r3, [pc, #464]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 80029f6:	430a      	orrs	r2, r1
 80029f8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80029fa:	4b73      	ldr	r3, [pc, #460]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2209      	movs	r2, #9
 8002a00:	4393      	bics	r3, r2
 8002a02:	0019      	movs	r1, r3
 8002a04:	4b70      	ldr	r3, [pc, #448]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a0c:	f000 fc1e 	bl	800324c <HAL_RCC_GetSysClockFreq>
 8002a10:	0001      	movs	r1, r0
 8002a12:	4b6d      	ldr	r3, [pc, #436]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	091b      	lsrs	r3, r3, #4
 8002a18:	220f      	movs	r2, #15
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	4a6e      	ldr	r2, [pc, #440]	; (8002bd8 <HAL_RCC_OscConfig+0x360>)
 8002a1e:	5cd3      	ldrb	r3, [r2, r3]
 8002a20:	000a      	movs	r2, r1
 8002a22:	40da      	lsrs	r2, r3
 8002a24:	4b6d      	ldr	r3, [pc, #436]	; (8002bdc <HAL_RCC_OscConfig+0x364>)
 8002a26:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8002a28:	2513      	movs	r5, #19
 8002a2a:	197c      	adds	r4, r7, r5
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	f7fd ff87 	bl	8000940 <HAL_InitTick>
 8002a32:	0003      	movs	r3, r0
 8002a34:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002a36:	197b      	adds	r3, r7, r5
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d047      	beq.n	8002ace <HAL_RCC_OscConfig+0x256>
      {
        return status;
 8002a3e:	2313      	movs	r3, #19
 8002a40:	18fb      	adds	r3, r7, r3
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	e2cd      	b.n	8002fe2 <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d027      	beq.n	8002a9c <HAL_RCC_OscConfig+0x224>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002a4c:	4b5e      	ldr	r3, [pc, #376]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2209      	movs	r2, #9
 8002a52:	4393      	bics	r3, r2
 8002a54:	0019      	movs	r1, r3
 8002a56:	4b5c      	ldr	r3, [pc, #368]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5e:	f7fd ffb5 	bl	80009cc <HAL_GetTick>
 8002a62:	0003      	movs	r3, r0
 8002a64:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a68:	f7fd ffb0 	bl	80009cc <HAL_GetTick>
 8002a6c:	0002      	movs	r2, r0
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e2b3      	b.n	8002fe2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a7a:	4b53      	ldr	r3, [pc, #332]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2204      	movs	r2, #4
 8002a80:	4013      	ands	r3, r2
 8002a82:	d0f1      	beq.n	8002a68 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a84:	4b50      	ldr	r3, [pc, #320]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	4a52      	ldr	r2, [pc, #328]	; (8002bd4 <HAL_RCC_OscConfig+0x35c>)
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	0019      	movs	r1, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	021a      	lsls	r2, r3, #8
 8002a94:	4b4c      	ldr	r3, [pc, #304]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 8002a96:	430a      	orrs	r2, r1
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	e018      	b.n	8002ace <HAL_RCC_OscConfig+0x256>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a9c:	4b4a      	ldr	r3, [pc, #296]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4b49      	ldr	r3, [pc, #292]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	438a      	bics	r2, r1
 8002aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa8:	f7fd ff90 	bl	80009cc <HAL_GetTick>
 8002aac:	0003      	movs	r3, r0
 8002aae:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x24c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ab2:	f7fd ff8b 	bl	80009cc <HAL_GetTick>
 8002ab6:	0002      	movs	r2, r0
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e28e      	b.n	8002fe2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ac4:	4b40      	ldr	r3, [pc, #256]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2204      	movs	r2, #4
 8002aca:	4013      	ands	r3, r2
 8002acc:	d1f1      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x23a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2210      	movs	r2, #16
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	d100      	bne.n	8002ada <HAL_RCC_OscConfig+0x262>
 8002ad8:	e09e      	b.n	8002c18 <HAL_RCC_OscConfig+0x3a0>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d13f      	bne.n	8002b60 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ae0:	4b39      	ldr	r3, [pc, #228]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	2380      	movs	r3, #128	; 0x80
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4013      	ands	r3, r2
 8002aea:	d005      	beq.n	8002af8 <HAL_RCC_OscConfig+0x280>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_RCC_OscConfig+0x280>
      {
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e274      	b.n	8002fe2 <HAL_RCC_OscConfig+0x76a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002af8:	4b33      	ldr	r3, [pc, #204]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	4a38      	ldr	r2, [pc, #224]	; (8002be0 <HAL_RCC_OscConfig+0x368>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	0019      	movs	r1, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b06:	4b30      	ldr	r3, [pc, #192]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b0c:	4b2e      	ldr	r3, [pc, #184]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	021b      	lsls	r3, r3, #8
 8002b12:	0a19      	lsrs	r1, r3, #8
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	061a      	lsls	r2, r3, #24
 8002b1a:	4b2b      	ldr	r3, [pc, #172]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	0b5b      	lsrs	r3, r3, #13
 8002b26:	3301      	adds	r3, #1
 8002b28:	2280      	movs	r2, #128	; 0x80
 8002b2a:	0212      	lsls	r2, r2, #8
 8002b2c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002b2e:	4b26      	ldr	r3, [pc, #152]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	091b      	lsrs	r3, r3, #4
 8002b34:	210f      	movs	r1, #15
 8002b36:	400b      	ands	r3, r1
 8002b38:	4927      	ldr	r1, [pc, #156]	; (8002bd8 <HAL_RCC_OscConfig+0x360>)
 8002b3a:	5ccb      	ldrb	r3, [r1, r3]
 8002b3c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002b3e:	4b27      	ldr	r3, [pc, #156]	; (8002bdc <HAL_RCC_OscConfig+0x364>)
 8002b40:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8002b42:	2513      	movs	r5, #19
 8002b44:	197c      	adds	r4, r7, r5
 8002b46:	2000      	movs	r0, #0
 8002b48:	f7fd fefa 	bl	8000940 <HAL_InitTick>
 8002b4c:	0003      	movs	r3, r0
 8002b4e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002b50:	197b      	adds	r3, r7, r5
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d05f      	beq.n	8002c18 <HAL_RCC_OscConfig+0x3a0>
        {
          return status;
 8002b58:	2313      	movs	r3, #19
 8002b5a:	18fb      	adds	r3, r7, r3
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	e240      	b.n	8002fe2 <HAL_RCC_OscConfig+0x76a>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d03d      	beq.n	8002be4 <HAL_RCC_OscConfig+0x36c>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b68:	4b17      	ldr	r3, [pc, #92]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	4b16      	ldr	r3, [pc, #88]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 8002b6e:	2180      	movs	r1, #128	; 0x80
 8002b70:	0049      	lsls	r1, r1, #1
 8002b72:	430a      	orrs	r2, r1
 8002b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b76:	f7fd ff29 	bl	80009cc <HAL_GetTick>
 8002b7a:	0003      	movs	r3, r0
 8002b7c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b80:	f7fd ff24 	bl	80009cc <HAL_GetTick>
 8002b84:	0002      	movs	r2, r0
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e227      	b.n	8002fe2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b92:	4b0d      	ldr	r3, [pc, #52]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	2380      	movs	r3, #128	; 0x80
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	d0f0      	beq.n	8002b80 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b9e:	4b0a      	ldr	r3, [pc, #40]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	4a0f      	ldr	r2, [pc, #60]	; (8002be0 <HAL_RCC_OscConfig+0x368>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	0019      	movs	r1, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bac:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bb2:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	021b      	lsls	r3, r3, #8
 8002bb8:	0a19      	lsrs	r1, r3, #8
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	061a      	lsls	r2, r3, #24
 8002bc0:	4b01      	ldr	r3, [pc, #4]	; (8002bc8 <HAL_RCC_OscConfig+0x350>)
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	e027      	b.n	8002c18 <HAL_RCC_OscConfig+0x3a0>
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	fffeffff 	.word	0xfffeffff
 8002bd0:	fffbffff 	.word	0xfffbffff
 8002bd4:	ffffe0ff 	.word	0xffffe0ff
 8002bd8:	080083c8 	.word	0x080083c8
 8002bdc:	20000004 	.word	0x20000004
 8002be0:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002be4:	4bbd      	ldr	r3, [pc, #756]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	4bbc      	ldr	r3, [pc, #752]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002bea:	49bd      	ldr	r1, [pc, #756]	; (8002ee0 <HAL_RCC_OscConfig+0x668>)
 8002bec:	400a      	ands	r2, r1
 8002bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf0:	f7fd feec 	bl	80009cc <HAL_GetTick>
 8002bf4:	0003      	movs	r3, r0
 8002bf6:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x394>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bfa:	f7fd fee7 	bl	80009cc <HAL_GetTick>
 8002bfe:	0002      	movs	r2, r0
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x394>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e1ea      	b.n	8002fe2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002c0c:	4bb3      	ldr	r3, [pc, #716]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	2380      	movs	r3, #128	; 0x80
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4013      	ands	r3, r2
 8002c16:	d1f0      	bne.n	8002bfa <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2208      	movs	r2, #8
 8002c1e:	4013      	ands	r3, r2
 8002c20:	d036      	beq.n	8002c90 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d019      	beq.n	8002c5e <HAL_RCC_OscConfig+0x3e6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c2a:	4bac      	ldr	r3, [pc, #688]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002c2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c2e:	4bab      	ldr	r3, [pc, #684]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002c30:	2101      	movs	r1, #1
 8002c32:	430a      	orrs	r2, r1
 8002c34:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c36:	f7fd fec9 	bl	80009cc <HAL_GetTick>
 8002c3a:	0003      	movs	r3, r0
 8002c3c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x3da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c40:	f7fd fec4 	bl	80009cc <HAL_GetTick>
 8002c44:	0002      	movs	r2, r0
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x3da>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e1c7      	b.n	8002fe2 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c52:	4ba2      	ldr	r3, [pc, #648]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c56:	2202      	movs	r2, #2
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d0f1      	beq.n	8002c40 <HAL_RCC_OscConfig+0x3c8>
 8002c5c:	e018      	b.n	8002c90 <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c5e:	4b9f      	ldr	r3, [pc, #636]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002c60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c62:	4b9e      	ldr	r3, [pc, #632]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002c64:	2101      	movs	r1, #1
 8002c66:	438a      	bics	r2, r1
 8002c68:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c6a:	f7fd feaf 	bl	80009cc <HAL_GetTick>
 8002c6e:	0003      	movs	r3, r0
 8002c70:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0x40e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c74:	f7fd feaa 	bl	80009cc <HAL_GetTick>
 8002c78:	0002      	movs	r2, r0
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e1ad      	b.n	8002fe2 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c86:	4b95      	ldr	r3, [pc, #596]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d1f1      	bne.n	8002c74 <HAL_RCC_OscConfig+0x3fc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2204      	movs	r2, #4
 8002c96:	4013      	ands	r3, r2
 8002c98:	d100      	bne.n	8002c9c <HAL_RCC_OscConfig+0x424>
 8002c9a:	e0af      	b.n	8002dfc <HAL_RCC_OscConfig+0x584>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c9c:	2327      	movs	r3, #39	; 0x27
 8002c9e:	18fb      	adds	r3, r7, r3
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ca4:	4b8d      	ldr	r3, [pc, #564]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002ca6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ca8:	2380      	movs	r3, #128	; 0x80
 8002caa:	055b      	lsls	r3, r3, #21
 8002cac:	4013      	ands	r3, r2
 8002cae:	d10a      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x44e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cb0:	4b8a      	ldr	r3, [pc, #552]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002cb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cb4:	4b89      	ldr	r3, [pc, #548]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002cb6:	2180      	movs	r1, #128	; 0x80
 8002cb8:	0549      	lsls	r1, r1, #21
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002cbe:	2327      	movs	r3, #39	; 0x27
 8002cc0:	18fb      	adds	r3, r7, r3
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc6:	4b87      	ldr	r3, [pc, #540]	; (8002ee4 <HAL_RCC_OscConfig+0x66c>)
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	2380      	movs	r3, #128	; 0x80
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d11a      	bne.n	8002d08 <HAL_RCC_OscConfig+0x490>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cd2:	4b84      	ldr	r3, [pc, #528]	; (8002ee4 <HAL_RCC_OscConfig+0x66c>)
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	4b83      	ldr	r3, [pc, #524]	; (8002ee4 <HAL_RCC_OscConfig+0x66c>)
 8002cd8:	2180      	movs	r1, #128	; 0x80
 8002cda:	0049      	lsls	r1, r1, #1
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ce0:	f7fd fe74 	bl	80009cc <HAL_GetTick>
 8002ce4:	0003      	movs	r3, r0
 8002ce6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cea:	f7fd fe6f 	bl	80009cc <HAL_GetTick>
 8002cee:	0002      	movs	r2, r0
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b64      	cmp	r3, #100	; 0x64
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e172      	b.n	8002fe2 <HAL_RCC_OscConfig+0x76a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfc:	4b79      	ldr	r3, [pc, #484]	; (8002ee4 <HAL_RCC_OscConfig+0x66c>)
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	2380      	movs	r3, #128	; 0x80
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	4013      	ands	r3, r2
 8002d06:	d0f0      	beq.n	8002cea <HAL_RCC_OscConfig+0x472>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	2380      	movs	r3, #128	; 0x80
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d107      	bne.n	8002d24 <HAL_RCC_OscConfig+0x4ac>
 8002d14:	4b71      	ldr	r3, [pc, #452]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002d16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d18:	4b70      	ldr	r3, [pc, #448]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002d1a:	2180      	movs	r1, #128	; 0x80
 8002d1c:	0049      	lsls	r1, r1, #1
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	651a      	str	r2, [r3, #80]	; 0x50
 8002d22:	e031      	b.n	8002d88 <HAL_RCC_OscConfig+0x510>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10c      	bne.n	8002d46 <HAL_RCC_OscConfig+0x4ce>
 8002d2c:	4b6b      	ldr	r3, [pc, #428]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002d2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d30:	4b6a      	ldr	r3, [pc, #424]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002d32:	496b      	ldr	r1, [pc, #428]	; (8002ee0 <HAL_RCC_OscConfig+0x668>)
 8002d34:	400a      	ands	r2, r1
 8002d36:	651a      	str	r2, [r3, #80]	; 0x50
 8002d38:	4b68      	ldr	r3, [pc, #416]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002d3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d3c:	4b67      	ldr	r3, [pc, #412]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002d3e:	496a      	ldr	r1, [pc, #424]	; (8002ee8 <HAL_RCC_OscConfig+0x670>)
 8002d40:	400a      	ands	r2, r1
 8002d42:	651a      	str	r2, [r3, #80]	; 0x50
 8002d44:	e020      	b.n	8002d88 <HAL_RCC_OscConfig+0x510>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	23a0      	movs	r3, #160	; 0xa0
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d10e      	bne.n	8002d70 <HAL_RCC_OscConfig+0x4f8>
 8002d52:	4b62      	ldr	r3, [pc, #392]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002d54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d56:	4b61      	ldr	r3, [pc, #388]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002d58:	2180      	movs	r1, #128	; 0x80
 8002d5a:	00c9      	lsls	r1, r1, #3
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	651a      	str	r2, [r3, #80]	; 0x50
 8002d60:	4b5e      	ldr	r3, [pc, #376]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002d62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d64:	4b5d      	ldr	r3, [pc, #372]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002d66:	2180      	movs	r1, #128	; 0x80
 8002d68:	0049      	lsls	r1, r1, #1
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	651a      	str	r2, [r3, #80]	; 0x50
 8002d6e:	e00b      	b.n	8002d88 <HAL_RCC_OscConfig+0x510>
 8002d70:	4b5a      	ldr	r3, [pc, #360]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002d72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d74:	4b59      	ldr	r3, [pc, #356]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002d76:	495a      	ldr	r1, [pc, #360]	; (8002ee0 <HAL_RCC_OscConfig+0x668>)
 8002d78:	400a      	ands	r2, r1
 8002d7a:	651a      	str	r2, [r3, #80]	; 0x50
 8002d7c:	4b57      	ldr	r3, [pc, #348]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002d7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d80:	4b56      	ldr	r3, [pc, #344]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002d82:	4959      	ldr	r1, [pc, #356]	; (8002ee8 <HAL_RCC_OscConfig+0x670>)
 8002d84:	400a      	ands	r2, r1
 8002d86:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d015      	beq.n	8002dbc <HAL_RCC_OscConfig+0x544>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d90:	f7fd fe1c 	bl	80009cc <HAL_GetTick>
 8002d94:	0003      	movs	r3, r0
 8002d96:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d98:	e009      	b.n	8002dae <HAL_RCC_OscConfig+0x536>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d9a:	f7fd fe17 	bl	80009cc <HAL_GetTick>
 8002d9e:	0002      	movs	r2, r0
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	4a51      	ldr	r2, [pc, #324]	; (8002eec <HAL_RCC_OscConfig+0x674>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x536>
        {
          return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e119      	b.n	8002fe2 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dae:	4b4b      	ldr	r3, [pc, #300]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002db0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002db2:	2380      	movs	r3, #128	; 0x80
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4013      	ands	r3, r2
 8002db8:	d0ef      	beq.n	8002d9a <HAL_RCC_OscConfig+0x522>
 8002dba:	e014      	b.n	8002de6 <HAL_RCC_OscConfig+0x56e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dbc:	f7fd fe06 	bl	80009cc <HAL_GetTick>
 8002dc0:	0003      	movs	r3, r0
 8002dc2:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002dc4:	e009      	b.n	8002dda <HAL_RCC_OscConfig+0x562>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dc6:	f7fd fe01 	bl	80009cc <HAL_GetTick>
 8002dca:	0002      	movs	r2, r0
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	4a46      	ldr	r2, [pc, #280]	; (8002eec <HAL_RCC_OscConfig+0x674>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x562>
        {
          return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e103      	b.n	8002fe2 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002dda:	4b40      	ldr	r3, [pc, #256]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002ddc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002dde:	2380      	movs	r3, #128	; 0x80
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4013      	ands	r3, r2
 8002de4:	d1ef      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x54e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002de6:	2327      	movs	r3, #39	; 0x27
 8002de8:	18fb      	adds	r3, r7, r3
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d105      	bne.n	8002dfc <HAL_RCC_OscConfig+0x584>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df0:	4b3a      	ldr	r3, [pc, #232]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002df2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002df4:	4b39      	ldr	r3, [pc, #228]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002df6:	493e      	ldr	r1, [pc, #248]	; (8002ef0 <HAL_RCC_OscConfig+0x678>)
 8002df8:	400a      	ands	r2, r1
 8002dfa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2220      	movs	r2, #32
 8002e02:	4013      	ands	r3, r2
 8002e04:	d049      	beq.n	8002e9a <HAL_RCC_OscConfig+0x622>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d026      	beq.n	8002e5c <HAL_RCC_OscConfig+0x5e4>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002e0e:	4b33      	ldr	r3, [pc, #204]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002e10:	689a      	ldr	r2, [r3, #8]
 8002e12:	4b32      	ldr	r3, [pc, #200]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002e14:	2101      	movs	r1, #1
 8002e16:	430a      	orrs	r2, r1
 8002e18:	609a      	str	r2, [r3, #8]
 8002e1a:	4b30      	ldr	r3, [pc, #192]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002e1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e1e:	4b2f      	ldr	r3, [pc, #188]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002e20:	2101      	movs	r1, #1
 8002e22:	430a      	orrs	r2, r1
 8002e24:	635a      	str	r2, [r3, #52]	; 0x34
 8002e26:	4b33      	ldr	r3, [pc, #204]	; (8002ef4 <HAL_RCC_OscConfig+0x67c>)
 8002e28:	6a1a      	ldr	r2, [r3, #32]
 8002e2a:	4b32      	ldr	r3, [pc, #200]	; (8002ef4 <HAL_RCC_OscConfig+0x67c>)
 8002e2c:	2180      	movs	r1, #128	; 0x80
 8002e2e:	0189      	lsls	r1, r1, #6
 8002e30:	430a      	orrs	r2, r1
 8002e32:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e34:	f7fd fdca 	bl	80009cc <HAL_GetTick>
 8002e38:	0003      	movs	r3, r0
 8002e3a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e3e:	f7fd fdc5 	bl	80009cc <HAL_GetTick>
 8002e42:	0002      	movs	r2, r0
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e0c8      	b.n	8002fe2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e50:	4b22      	ldr	r3, [pc, #136]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	2202      	movs	r2, #2
 8002e56:	4013      	ands	r3, r2
 8002e58:	d0f1      	beq.n	8002e3e <HAL_RCC_OscConfig+0x5c6>
 8002e5a:	e01e      	b.n	8002e9a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002e5c:	4b1f      	ldr	r3, [pc, #124]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	4b1e      	ldr	r3, [pc, #120]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002e62:	2101      	movs	r1, #1
 8002e64:	438a      	bics	r2, r1
 8002e66:	609a      	str	r2, [r3, #8]
 8002e68:	4b22      	ldr	r3, [pc, #136]	; (8002ef4 <HAL_RCC_OscConfig+0x67c>)
 8002e6a:	6a1a      	ldr	r2, [r3, #32]
 8002e6c:	4b21      	ldr	r3, [pc, #132]	; (8002ef4 <HAL_RCC_OscConfig+0x67c>)
 8002e6e:	4922      	ldr	r1, [pc, #136]	; (8002ef8 <HAL_RCC_OscConfig+0x680>)
 8002e70:	400a      	ands	r2, r1
 8002e72:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e74:	f7fd fdaa 	bl	80009cc <HAL_GetTick>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x618>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e7e:	f7fd fda5 	bl	80009cc <HAL_GetTick>
 8002e82:	0002      	movs	r2, r0
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e0a8      	b.n	8002fe2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e90:	4b12      	ldr	r3, [pc, #72]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	2202      	movs	r2, #2
 8002e96:	4013      	ands	r3, r2
 8002e98:	d1f1      	bne.n	8002e7e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d100      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x62c>
 8002ea2:	e09d      	b.n	8002fe0 <HAL_RCC_OscConfig+0x768>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ea4:	6a3b      	ldr	r3, [r7, #32]
 8002ea6:	2b0c      	cmp	r3, #12
 8002ea8:	d100      	bne.n	8002eac <HAL_RCC_OscConfig+0x634>
 8002eaa:	e076      	b.n	8002f9a <HAL_RCC_OscConfig+0x722>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d157      	bne.n	8002f64 <HAL_RCC_OscConfig+0x6ec>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb4:	4b09      	ldr	r3, [pc, #36]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	4b08      	ldr	r3, [pc, #32]	; (8002edc <HAL_RCC_OscConfig+0x664>)
 8002eba:	4910      	ldr	r1, [pc, #64]	; (8002efc <HAL_RCC_OscConfig+0x684>)
 8002ebc:	400a      	ands	r2, r1
 8002ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec0:	f7fd fd84 	bl	80009cc <HAL_GetTick>
 8002ec4:	0003      	movs	r3, r0
 8002ec6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002ec8:	e01a      	b.n	8002f00 <HAL_RCC_OscConfig+0x688>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eca:	f7fd fd7f 	bl	80009cc <HAL_GetTick>
 8002ece:	0002      	movs	r2, r0
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d913      	bls.n	8002f00 <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e082      	b.n	8002fe2 <HAL_RCC_OscConfig+0x76a>
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	fffffeff 	.word	0xfffffeff
 8002ee4:	40007000 	.word	0x40007000
 8002ee8:	fffffbff 	.word	0xfffffbff
 8002eec:	00001388 	.word	0x00001388
 8002ef0:	efffffff 	.word	0xefffffff
 8002ef4:	40010000 	.word	0x40010000
 8002ef8:	ffffdfff 	.word	0xffffdfff
 8002efc:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002f00:	4b3a      	ldr	r3, [pc, #232]	; (8002fec <HAL_RCC_OscConfig+0x774>)
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	2380      	movs	r3, #128	; 0x80
 8002f06:	049b      	lsls	r3, r3, #18
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d1de      	bne.n	8002eca <HAL_RCC_OscConfig+0x652>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f0c:	4b37      	ldr	r3, [pc, #220]	; (8002fec <HAL_RCC_OscConfig+0x774>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	4a37      	ldr	r2, [pc, #220]	; (8002ff0 <HAL_RCC_OscConfig+0x778>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	0019      	movs	r1, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f24:	431a      	orrs	r2, r3
 8002f26:	4b31      	ldr	r3, [pc, #196]	; (8002fec <HAL_RCC_OscConfig+0x774>)
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f2c:	4b2f      	ldr	r3, [pc, #188]	; (8002fec <HAL_RCC_OscConfig+0x774>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	4b2e      	ldr	r3, [pc, #184]	; (8002fec <HAL_RCC_OscConfig+0x774>)
 8002f32:	2180      	movs	r1, #128	; 0x80
 8002f34:	0449      	lsls	r1, r1, #17
 8002f36:	430a      	orrs	r2, r1
 8002f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3a:	f7fd fd47 	bl	80009cc <HAL_GetTick>
 8002f3e:	0003      	movs	r3, r0
 8002f40:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f44:	f7fd fd42 	bl	80009cc <HAL_GetTick>
 8002f48:	0002      	movs	r2, r0
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x6de>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e045      	b.n	8002fe2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002f56:	4b25      	ldr	r3, [pc, #148]	; (8002fec <HAL_RCC_OscConfig+0x774>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	2380      	movs	r3, #128	; 0x80
 8002f5c:	049b      	lsls	r3, r3, #18
 8002f5e:	4013      	ands	r3, r2
 8002f60:	d0f0      	beq.n	8002f44 <HAL_RCC_OscConfig+0x6cc>
 8002f62:	e03d      	b.n	8002fe0 <HAL_RCC_OscConfig+0x768>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f64:	4b21      	ldr	r3, [pc, #132]	; (8002fec <HAL_RCC_OscConfig+0x774>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	4b20      	ldr	r3, [pc, #128]	; (8002fec <HAL_RCC_OscConfig+0x774>)
 8002f6a:	4922      	ldr	r1, [pc, #136]	; (8002ff4 <HAL_RCC_OscConfig+0x77c>)
 8002f6c:	400a      	ands	r2, r1
 8002f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f70:	f7fd fd2c 	bl	80009cc <HAL_GetTick>
 8002f74:	0003      	movs	r3, r0
 8002f76:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f7a:	f7fd fd27 	bl	80009cc <HAL_GetTick>
 8002f7e:	0002      	movs	r2, r0
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e02a      	b.n	8002fe2 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002f8c:	4b17      	ldr	r3, [pc, #92]	; (8002fec <HAL_RCC_OscConfig+0x774>)
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	2380      	movs	r3, #128	; 0x80
 8002f92:	049b      	lsls	r3, r3, #18
 8002f94:	4013      	ands	r3, r2
 8002f96:	d1f0      	bne.n	8002f7a <HAL_RCC_OscConfig+0x702>
 8002f98:	e022      	b.n	8002fe0 <HAL_RCC_OscConfig+0x768>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d101      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x72e>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e01d      	b.n	8002fe2 <HAL_RCC_OscConfig+0x76a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fa6:	4b11      	ldr	r3, [pc, #68]	; (8002fec <HAL_RCC_OscConfig+0x774>)
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fac:	69fa      	ldr	r2, [r7, #28]
 8002fae:	2380      	movs	r3, #128	; 0x80
 8002fb0:	025b      	lsls	r3, r3, #9
 8002fb2:	401a      	ands	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d10f      	bne.n	8002fdc <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002fbc:	69fa      	ldr	r2, [r7, #28]
 8002fbe:	23f0      	movs	r3, #240	; 0xf0
 8002fc0:	039b      	lsls	r3, r3, #14
 8002fc2:	401a      	ands	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d107      	bne.n	8002fdc <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002fcc:	69fa      	ldr	r2, [r7, #28]
 8002fce:	23c0      	movs	r3, #192	; 0xc0
 8002fd0:	041b      	lsls	r3, r3, #16
 8002fd2:	401a      	ands	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d001      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x768>
        {
          return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e000      	b.n	8002fe2 <HAL_RCC_OscConfig+0x76a>
        }
      }
    }
  }

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	b00a      	add	sp, #40	; 0x28
 8002fe8:	bdb0      	pop	{r4, r5, r7, pc}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	ff02ffff 	.word	0xff02ffff
 8002ff4:	feffffff 	.word	0xfeffffff

08002ff8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ff8:	b5b0      	push	{r4, r5, r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e10d      	b.n	8003228 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800300c:	4b88      	ldr	r3, [pc, #544]	; (8003230 <HAL_RCC_ClockConfig+0x238>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2201      	movs	r2, #1
 8003012:	4013      	ands	r3, r2
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	429a      	cmp	r2, r3
 8003018:	d911      	bls.n	800303e <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301a:	4b85      	ldr	r3, [pc, #532]	; (8003230 <HAL_RCC_ClockConfig+0x238>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2201      	movs	r2, #1
 8003020:	4393      	bics	r3, r2
 8003022:	0019      	movs	r1, r3
 8003024:	4b82      	ldr	r3, [pc, #520]	; (8003230 <HAL_RCC_ClockConfig+0x238>)
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800302c:	4b80      	ldr	r3, [pc, #512]	; (8003230 <HAL_RCC_ClockConfig+0x238>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2201      	movs	r2, #1
 8003032:	4013      	ands	r3, r2
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d001      	beq.n	800303e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e0f4      	b.n	8003228 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2202      	movs	r2, #2
 8003044:	4013      	ands	r3, r2
 8003046:	d009      	beq.n	800305c <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003048:	4b7a      	ldr	r3, [pc, #488]	; (8003234 <HAL_RCC_ClockConfig+0x23c>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	22f0      	movs	r2, #240	; 0xf0
 800304e:	4393      	bics	r3, r2
 8003050:	0019      	movs	r1, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	4b77      	ldr	r3, [pc, #476]	; (8003234 <HAL_RCC_ClockConfig+0x23c>)
 8003058:	430a      	orrs	r2, r1
 800305a:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2201      	movs	r2, #1
 8003062:	4013      	ands	r3, r2
 8003064:	d100      	bne.n	8003068 <HAL_RCC_ClockConfig+0x70>
 8003066:	e089      	b.n	800317c <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b02      	cmp	r3, #2
 800306e:	d107      	bne.n	8003080 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003070:	4b70      	ldr	r3, [pc, #448]	; (8003234 <HAL_RCC_ClockConfig+0x23c>)
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	2380      	movs	r3, #128	; 0x80
 8003076:	029b      	lsls	r3, r3, #10
 8003078:	4013      	ands	r3, r2
 800307a:	d120      	bne.n	80030be <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e0d3      	b.n	8003228 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b03      	cmp	r3, #3
 8003086:	d107      	bne.n	8003098 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003088:	4b6a      	ldr	r3, [pc, #424]	; (8003234 <HAL_RCC_ClockConfig+0x23c>)
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	2380      	movs	r3, #128	; 0x80
 800308e:	049b      	lsls	r3, r3, #18
 8003090:	4013      	ands	r3, r2
 8003092:	d114      	bne.n	80030be <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0c7      	b.n	8003228 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d106      	bne.n	80030ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030a0:	4b64      	ldr	r3, [pc, #400]	; (8003234 <HAL_RCC_ClockConfig+0x23c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2204      	movs	r2, #4
 80030a6:	4013      	ands	r3, r2
 80030a8:	d109      	bne.n	80030be <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e0bc      	b.n	8003228 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80030ae:	4b61      	ldr	r3, [pc, #388]	; (8003234 <HAL_RCC_ClockConfig+0x23c>)
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	2380      	movs	r3, #128	; 0x80
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4013      	ands	r3, r2
 80030b8:	d101      	bne.n	80030be <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e0b4      	b.n	8003228 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030be:	4b5d      	ldr	r3, [pc, #372]	; (8003234 <HAL_RCC_ClockConfig+0x23c>)
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	2203      	movs	r2, #3
 80030c4:	4393      	bics	r3, r2
 80030c6:	0019      	movs	r1, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	4b59      	ldr	r3, [pc, #356]	; (8003234 <HAL_RCC_ClockConfig+0x23c>)
 80030ce:	430a      	orrs	r2, r1
 80030d0:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030d2:	f7fd fc7b 	bl	80009cc <HAL_GetTick>
 80030d6:	0003      	movs	r3, r0
 80030d8:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d111      	bne.n	8003106 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80030e2:	e009      	b.n	80030f8 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e4:	f7fd fc72 	bl	80009cc <HAL_GetTick>
 80030e8:	0002      	movs	r2, r0
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	4a52      	ldr	r2, [pc, #328]	; (8003238 <HAL_RCC_ClockConfig+0x240>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e097      	b.n	8003228 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80030f8:	4b4e      	ldr	r3, [pc, #312]	; (8003234 <HAL_RCC_ClockConfig+0x23c>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	220c      	movs	r2, #12
 80030fe:	4013      	ands	r3, r2
 8003100:	2b08      	cmp	r3, #8
 8003102:	d1ef      	bne.n	80030e4 <HAL_RCC_ClockConfig+0xec>
 8003104:	e03a      	b.n	800317c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b03      	cmp	r3, #3
 800310c:	d111      	bne.n	8003132 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800310e:	e009      	b.n	8003124 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003110:	f7fd fc5c 	bl	80009cc <HAL_GetTick>
 8003114:	0002      	movs	r2, r0
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	4a47      	ldr	r2, [pc, #284]	; (8003238 <HAL_RCC_ClockConfig+0x240>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e081      	b.n	8003228 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003124:	4b43      	ldr	r3, [pc, #268]	; (8003234 <HAL_RCC_ClockConfig+0x23c>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	220c      	movs	r2, #12
 800312a:	4013      	ands	r3, r2
 800312c:	2b0c      	cmp	r3, #12
 800312e:	d1ef      	bne.n	8003110 <HAL_RCC_ClockConfig+0x118>
 8003130:	e024      	b.n	800317c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d11b      	bne.n	8003172 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800313a:	e009      	b.n	8003150 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800313c:	f7fd fc46 	bl	80009cc <HAL_GetTick>
 8003140:	0002      	movs	r2, r0
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	4a3c      	ldr	r2, [pc, #240]	; (8003238 <HAL_RCC_ClockConfig+0x240>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e06b      	b.n	8003228 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003150:	4b38      	ldr	r3, [pc, #224]	; (8003234 <HAL_RCC_ClockConfig+0x23c>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	220c      	movs	r2, #12
 8003156:	4013      	ands	r3, r2
 8003158:	2b04      	cmp	r3, #4
 800315a:	d1ef      	bne.n	800313c <HAL_RCC_ClockConfig+0x144>
 800315c:	e00e      	b.n	800317c <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800315e:	f7fd fc35 	bl	80009cc <HAL_GetTick>
 8003162:	0002      	movs	r2, r0
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	4a33      	ldr	r2, [pc, #204]	; (8003238 <HAL_RCC_ClockConfig+0x240>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e05a      	b.n	8003228 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003172:	4b30      	ldr	r3, [pc, #192]	; (8003234 <HAL_RCC_ClockConfig+0x23c>)
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	220c      	movs	r2, #12
 8003178:	4013      	ands	r3, r2
 800317a:	d1f0      	bne.n	800315e <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800317c:	4b2c      	ldr	r3, [pc, #176]	; (8003230 <HAL_RCC_ClockConfig+0x238>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2201      	movs	r2, #1
 8003182:	4013      	ands	r3, r2
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	429a      	cmp	r2, r3
 8003188:	d211      	bcs.n	80031ae <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800318a:	4b29      	ldr	r3, [pc, #164]	; (8003230 <HAL_RCC_ClockConfig+0x238>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2201      	movs	r2, #1
 8003190:	4393      	bics	r3, r2
 8003192:	0019      	movs	r1, r3
 8003194:	4b26      	ldr	r3, [pc, #152]	; (8003230 <HAL_RCC_ClockConfig+0x238>)
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800319c:	4b24      	ldr	r3, [pc, #144]	; (8003230 <HAL_RCC_ClockConfig+0x238>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2201      	movs	r2, #1
 80031a2:	4013      	ands	r3, r2
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d001      	beq.n	80031ae <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e03c      	b.n	8003228 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2204      	movs	r2, #4
 80031b4:	4013      	ands	r3, r2
 80031b6:	d009      	beq.n	80031cc <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031b8:	4b1e      	ldr	r3, [pc, #120]	; (8003234 <HAL_RCC_ClockConfig+0x23c>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	4a1f      	ldr	r2, [pc, #124]	; (800323c <HAL_RCC_ClockConfig+0x244>)
 80031be:	4013      	ands	r3, r2
 80031c0:	0019      	movs	r1, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	4b1b      	ldr	r3, [pc, #108]	; (8003234 <HAL_RCC_ClockConfig+0x23c>)
 80031c8:	430a      	orrs	r2, r1
 80031ca:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2208      	movs	r2, #8
 80031d2:	4013      	ands	r3, r2
 80031d4:	d00a      	beq.n	80031ec <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031d6:	4b17      	ldr	r3, [pc, #92]	; (8003234 <HAL_RCC_ClockConfig+0x23c>)
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	4a19      	ldr	r2, [pc, #100]	; (8003240 <HAL_RCC_ClockConfig+0x248>)
 80031dc:	4013      	ands	r3, r2
 80031de:	0019      	movs	r1, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	00da      	lsls	r2, r3, #3
 80031e6:	4b13      	ldr	r3, [pc, #76]	; (8003234 <HAL_RCC_ClockConfig+0x23c>)
 80031e8:	430a      	orrs	r2, r1
 80031ea:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031ec:	f000 f82e 	bl	800324c <HAL_RCC_GetSysClockFreq>
 80031f0:	0001      	movs	r1, r0
 80031f2:	4b10      	ldr	r3, [pc, #64]	; (8003234 <HAL_RCC_ClockConfig+0x23c>)
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	091b      	lsrs	r3, r3, #4
 80031f8:	220f      	movs	r2, #15
 80031fa:	4013      	ands	r3, r2
 80031fc:	4a11      	ldr	r2, [pc, #68]	; (8003244 <HAL_RCC_ClockConfig+0x24c>)
 80031fe:	5cd3      	ldrb	r3, [r2, r3]
 8003200:	000a      	movs	r2, r1
 8003202:	40da      	lsrs	r2, r3
 8003204:	4b10      	ldr	r3, [pc, #64]	; (8003248 <HAL_RCC_ClockConfig+0x250>)
 8003206:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8003208:	250b      	movs	r5, #11
 800320a:	197c      	adds	r4, r7, r5
 800320c:	2000      	movs	r0, #0
 800320e:	f7fd fb97 	bl	8000940 <HAL_InitTick>
 8003212:	0003      	movs	r3, r0
 8003214:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003216:	197b      	adds	r3, r7, r5
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 800321e:	230b      	movs	r3, #11
 8003220:	18fb      	adds	r3, r7, r3
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	e000      	b.n	8003228 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	0018      	movs	r0, r3
 800322a:	46bd      	mov	sp, r7
 800322c:	b004      	add	sp, #16
 800322e:	bdb0      	pop	{r4, r5, r7, pc}
 8003230:	40022000 	.word	0x40022000
 8003234:	40021000 	.word	0x40021000
 8003238:	00001388 	.word	0x00001388
 800323c:	fffff8ff 	.word	0xfffff8ff
 8003240:	ffffc7ff 	.word	0xffffc7ff
 8003244:	080083c8 	.word	0x080083c8
 8003248:	20000004 	.word	0x20000004

0800324c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003252:	4b3b      	ldr	r3, [pc, #236]	; (8003340 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	220c      	movs	r2, #12
 800325c:	4013      	ands	r3, r2
 800325e:	2b08      	cmp	r3, #8
 8003260:	d00e      	beq.n	8003280 <HAL_RCC_GetSysClockFreq+0x34>
 8003262:	2b0c      	cmp	r3, #12
 8003264:	d00f      	beq.n	8003286 <HAL_RCC_GetSysClockFreq+0x3a>
 8003266:	2b04      	cmp	r3, #4
 8003268:	d157      	bne.n	800331a <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800326a:	4b35      	ldr	r3, [pc, #212]	; (8003340 <HAL_RCC_GetSysClockFreq+0xf4>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2210      	movs	r2, #16
 8003270:	4013      	ands	r3, r2
 8003272:	d002      	beq.n	800327a <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003274:	4b33      	ldr	r3, [pc, #204]	; (8003344 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003276:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003278:	e05d      	b.n	8003336 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 800327a:	4b33      	ldr	r3, [pc, #204]	; (8003348 <HAL_RCC_GetSysClockFreq+0xfc>)
 800327c:	613b      	str	r3, [r7, #16]
      break;
 800327e:	e05a      	b.n	8003336 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003280:	4b32      	ldr	r3, [pc, #200]	; (800334c <HAL_RCC_GetSysClockFreq+0x100>)
 8003282:	613b      	str	r3, [r7, #16]
      break;
 8003284:	e057      	b.n	8003336 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	0c9b      	lsrs	r3, r3, #18
 800328a:	220f      	movs	r2, #15
 800328c:	4013      	ands	r3, r2
 800328e:	4a30      	ldr	r2, [pc, #192]	; (8003350 <HAL_RCC_GetSysClockFreq+0x104>)
 8003290:	5cd3      	ldrb	r3, [r2, r3]
 8003292:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	0d9b      	lsrs	r3, r3, #22
 8003298:	2203      	movs	r2, #3
 800329a:	4013      	ands	r3, r2
 800329c:	3301      	adds	r3, #1
 800329e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032a0:	4b27      	ldr	r3, [pc, #156]	; (8003340 <HAL_RCC_GetSysClockFreq+0xf4>)
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	2380      	movs	r3, #128	; 0x80
 80032a6:	025b      	lsls	r3, r3, #9
 80032a8:	4013      	ands	r3, r2
 80032aa:	d00f      	beq.n	80032cc <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	000a      	movs	r2, r1
 80032b0:	0152      	lsls	r2, r2, #5
 80032b2:	1a52      	subs	r2, r2, r1
 80032b4:	0193      	lsls	r3, r2, #6
 80032b6:	1a9b      	subs	r3, r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	185b      	adds	r3, r3, r1
 80032bc:	025b      	lsls	r3, r3, #9
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	0018      	movs	r0, r3
 80032c2:	f7fc ff21 	bl	8000108 <__udivsi3>
 80032c6:	0003      	movs	r3, r0
 80032c8:	617b      	str	r3, [r7, #20]
 80032ca:	e023      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80032cc:	4b1c      	ldr	r3, [pc, #112]	; (8003340 <HAL_RCC_GetSysClockFreq+0xf4>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2210      	movs	r2, #16
 80032d2:	4013      	ands	r3, r2
 80032d4:	d00f      	beq.n	80032f6 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80032d6:	68b9      	ldr	r1, [r7, #8]
 80032d8:	000a      	movs	r2, r1
 80032da:	0152      	lsls	r2, r2, #5
 80032dc:	1a52      	subs	r2, r2, r1
 80032de:	0193      	lsls	r3, r2, #6
 80032e0:	1a9b      	subs	r3, r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	185b      	adds	r3, r3, r1
 80032e6:	021b      	lsls	r3, r3, #8
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	0018      	movs	r0, r3
 80032ec:	f7fc ff0c 	bl	8000108 <__udivsi3>
 80032f0:	0003      	movs	r3, r0
 80032f2:	617b      	str	r3, [r7, #20]
 80032f4:	e00e      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 80032f6:	68b9      	ldr	r1, [r7, #8]
 80032f8:	000a      	movs	r2, r1
 80032fa:	0152      	lsls	r2, r2, #5
 80032fc:	1a52      	subs	r2, r2, r1
 80032fe:	0193      	lsls	r3, r2, #6
 8003300:	1a9b      	subs	r3, r3, r2
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	185b      	adds	r3, r3, r1
 8003306:	029b      	lsls	r3, r3, #10
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	0018      	movs	r0, r3
 800330c:	f7fc fefc 	bl	8000108 <__udivsi3>
 8003310:	0003      	movs	r3, r0
 8003312:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	613b      	str	r3, [r7, #16]
      break;
 8003318:	e00d      	b.n	8003336 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800331a:	4b09      	ldr	r3, [pc, #36]	; (8003340 <HAL_RCC_GetSysClockFreq+0xf4>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	0b5b      	lsrs	r3, r3, #13
 8003320:	2207      	movs	r2, #7
 8003322:	4013      	ands	r3, r2
 8003324:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	3301      	adds	r3, #1
 800332a:	2280      	movs	r2, #128	; 0x80
 800332c:	0212      	lsls	r2, r2, #8
 800332e:	409a      	lsls	r2, r3
 8003330:	0013      	movs	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
      break;
 8003334:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003336:	693b      	ldr	r3, [r7, #16]
}
 8003338:	0018      	movs	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	b006      	add	sp, #24
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40021000 	.word	0x40021000
 8003344:	003d0900 	.word	0x003d0900
 8003348:	00f42400 	.word	0x00f42400
 800334c:	007a1200 	.word	0x007a1200
 8003350:	080083d8 	.word	0x080083d8

08003354 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2220      	movs	r2, #32
 8003362:	4013      	ands	r3, r2
 8003364:	d106      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	2380      	movs	r3, #128	; 0x80
 800336c:	011b      	lsls	r3, r3, #4
 800336e:	4013      	ands	r3, r2
 8003370:	d100      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8003372:	e0dd      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8003374:	2317      	movs	r3, #23
 8003376:	18fb      	adds	r3, r7, r3
 8003378:	2200      	movs	r2, #0
 800337a:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800337c:	4b9c      	ldr	r3, [pc, #624]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800337e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003380:	2380      	movs	r3, #128	; 0x80
 8003382:	055b      	lsls	r3, r3, #21
 8003384:	4013      	ands	r3, r2
 8003386:	d10a      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003388:	4b99      	ldr	r3, [pc, #612]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800338a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800338c:	4b98      	ldr	r3, [pc, #608]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800338e:	2180      	movs	r1, #128	; 0x80
 8003390:	0549      	lsls	r1, r1, #21
 8003392:	430a      	orrs	r2, r1
 8003394:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003396:	2317      	movs	r3, #23
 8003398:	18fb      	adds	r3, r7, r3
 800339a:	2201      	movs	r2, #1
 800339c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339e:	4b95      	ldr	r3, [pc, #596]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	2380      	movs	r3, #128	; 0x80
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	4013      	ands	r3, r2
 80033a8:	d11a      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033aa:	4b92      	ldr	r3, [pc, #584]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	4b91      	ldr	r3, [pc, #580]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80033b0:	2180      	movs	r1, #128	; 0x80
 80033b2:	0049      	lsls	r1, r1, #1
 80033b4:	430a      	orrs	r2, r1
 80033b6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033b8:	f7fd fb08 	bl	80009cc <HAL_GetTick>
 80033bc:	0003      	movs	r3, r0
 80033be:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c0:	e008      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c2:	f7fd fb03 	bl	80009cc <HAL_GetTick>
 80033c6:	0002      	movs	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b64      	cmp	r3, #100	; 0x64
 80033ce:	d901      	bls.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e108      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d4:	4b87      	ldr	r3, [pc, #540]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	2380      	movs	r3, #128	; 0x80
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	4013      	ands	r3, r2
 80033de:	d0f0      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80033e0:	4b83      	ldr	r3, [pc, #524]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	23c0      	movs	r3, #192	; 0xc0
 80033e6:	039b      	lsls	r3, r3, #14
 80033e8:	4013      	ands	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	23c0      	movs	r3, #192	; 0xc0
 80033f2:	039b      	lsls	r3, r3, #14
 80033f4:	4013      	ands	r3, r2
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d107      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	23c0      	movs	r3, #192	; 0xc0
 8003402:	039b      	lsls	r3, r3, #14
 8003404:	4013      	ands	r3, r2
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	429a      	cmp	r2, r3
 800340a:	d013      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	23c0      	movs	r3, #192	; 0xc0
 8003412:	029b      	lsls	r3, r3, #10
 8003414:	401a      	ands	r2, r3
 8003416:	23c0      	movs	r3, #192	; 0xc0
 8003418:	029b      	lsls	r3, r3, #10
 800341a:	429a      	cmp	r2, r3
 800341c:	d10a      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800341e:	4b74      	ldr	r3, [pc, #464]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	2380      	movs	r3, #128	; 0x80
 8003424:	029b      	lsls	r3, r3, #10
 8003426:	401a      	ands	r2, r3
 8003428:	2380      	movs	r3, #128	; 0x80
 800342a:	029b      	lsls	r3, r3, #10
 800342c:	429a      	cmp	r2, r3
 800342e:	d101      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e0d8      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003434:	4b6e      	ldr	r3, [pc, #440]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003436:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003438:	23c0      	movs	r3, #192	; 0xc0
 800343a:	029b      	lsls	r3, r3, #10
 800343c:	4013      	ands	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d049      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	23c0      	movs	r3, #192	; 0xc0
 800344c:	029b      	lsls	r3, r3, #10
 800344e:	4013      	ands	r3, r2
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	429a      	cmp	r2, r3
 8003454:	d004      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2220      	movs	r2, #32
 800345c:	4013      	ands	r3, r2
 800345e:	d10d      	bne.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	23c0      	movs	r3, #192	; 0xc0
 8003466:	029b      	lsls	r3, r3, #10
 8003468:	4013      	ands	r3, r2
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	429a      	cmp	r2, r3
 800346e:	d034      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	2380      	movs	r3, #128	; 0x80
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	4013      	ands	r3, r2
 800347a:	d02e      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800347c:	4b5c      	ldr	r3, [pc, #368]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800347e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003480:	4a5d      	ldr	r2, [pc, #372]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003482:	4013      	ands	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003486:	4b5a      	ldr	r3, [pc, #360]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003488:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800348a:	4b59      	ldr	r3, [pc, #356]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800348c:	2180      	movs	r1, #128	; 0x80
 800348e:	0309      	lsls	r1, r1, #12
 8003490:	430a      	orrs	r2, r1
 8003492:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003494:	4b56      	ldr	r3, [pc, #344]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003496:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003498:	4b55      	ldr	r3, [pc, #340]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800349a:	4958      	ldr	r1, [pc, #352]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800349c:	400a      	ands	r2, r1
 800349e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80034a0:	4b53      	ldr	r3, [pc, #332]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	2380      	movs	r3, #128	; 0x80
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	4013      	ands	r3, r2
 80034ae:	d014      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b0:	f7fd fa8c 	bl	80009cc <HAL_GetTick>
 80034b4:	0003      	movs	r3, r0
 80034b6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034b8:	e009      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ba:	f7fd fa87 	bl	80009cc <HAL_GetTick>
 80034be:	0002      	movs	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	4a4e      	ldr	r2, [pc, #312]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d901      	bls.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e08b      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034ce:	4b48      	ldr	r3, [pc, #288]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80034d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034d2:	2380      	movs	r3, #128	; 0x80
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4013      	ands	r3, r2
 80034d8:	d0ef      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	23c0      	movs	r3, #192	; 0xc0
 80034e0:	029b      	lsls	r3, r3, #10
 80034e2:	401a      	ands	r2, r3
 80034e4:	23c0      	movs	r3, #192	; 0xc0
 80034e6:	029b      	lsls	r3, r3, #10
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d10c      	bne.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80034ec:	4b40      	ldr	r3, [pc, #256]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a44      	ldr	r2, [pc, #272]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80034f2:	4013      	ands	r3, r2
 80034f4:	0019      	movs	r1, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	23c0      	movs	r3, #192	; 0xc0
 80034fc:	039b      	lsls	r3, r3, #14
 80034fe:	401a      	ands	r2, r3
 8003500:	4b3b      	ldr	r3, [pc, #236]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003502:	430a      	orrs	r2, r1
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	4b3a      	ldr	r3, [pc, #232]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003508:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	23c0      	movs	r3, #192	; 0xc0
 8003510:	029b      	lsls	r3, r3, #10
 8003512:	401a      	ands	r2, r3
 8003514:	4b36      	ldr	r3, [pc, #216]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003516:	430a      	orrs	r2, r1
 8003518:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800351a:	2317      	movs	r3, #23
 800351c:	18fb      	adds	r3, r7, r3
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d105      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003524:	4b32      	ldr	r3, [pc, #200]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003526:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003528:	4b31      	ldr	r3, [pc, #196]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800352a:	4937      	ldr	r1, [pc, #220]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800352c:	400a      	ands	r2, r1
 800352e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2201      	movs	r2, #1
 8003536:	4013      	ands	r3, r2
 8003538:	d009      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800353a:	4b2d      	ldr	r3, [pc, #180]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800353c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353e:	2203      	movs	r2, #3
 8003540:	4393      	bics	r3, r2
 8003542:	0019      	movs	r1, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	4b29      	ldr	r3, [pc, #164]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800354a:	430a      	orrs	r2, r1
 800354c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2202      	movs	r2, #2
 8003554:	4013      	ands	r3, r2
 8003556:	d009      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003558:	4b25      	ldr	r3, [pc, #148]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800355a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800355c:	220c      	movs	r2, #12
 800355e:	4393      	bics	r3, r2
 8003560:	0019      	movs	r1, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691a      	ldr	r2, [r3, #16]
 8003566:	4b22      	ldr	r3, [pc, #136]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003568:	430a      	orrs	r2, r1
 800356a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2204      	movs	r2, #4
 8003572:	4013      	ands	r3, r2
 8003574:	d009      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003576:	4b1e      	ldr	r3, [pc, #120]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800357a:	4a24      	ldr	r2, [pc, #144]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800357c:	4013      	ands	r3, r2
 800357e:	0019      	movs	r1, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	695a      	ldr	r2, [r3, #20]
 8003584:	4b1a      	ldr	r3, [pc, #104]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003586:	430a      	orrs	r2, r1
 8003588:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2208      	movs	r2, #8
 8003590:	4013      	ands	r3, r2
 8003592:	d009      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003594:	4b16      	ldr	r3, [pc, #88]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003598:	4a1d      	ldr	r2, [pc, #116]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800359a:	4013      	ands	r3, r2
 800359c:	0019      	movs	r1, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	699a      	ldr	r2, [r3, #24]
 80035a2:	4b13      	ldr	r3, [pc, #76]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80035a4:	430a      	orrs	r2, r1
 80035a6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2240      	movs	r2, #64	; 0x40
 80035ae:	4013      	ands	r3, r2
 80035b0:	d009      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035b2:	4b0f      	ldr	r3, [pc, #60]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80035b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b6:	4a17      	ldr	r2, [pc, #92]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80035b8:	4013      	ands	r3, r2
 80035ba:	0019      	movs	r1, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a1a      	ldr	r2, [r3, #32]
 80035c0:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80035c2:	430a      	orrs	r2, r1
 80035c4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2280      	movs	r2, #128	; 0x80
 80035cc:	4013      	ands	r3, r2
 80035ce:	d009      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80035d0:	4b07      	ldr	r3, [pc, #28]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80035d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d4:	4a10      	ldr	r2, [pc, #64]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035d6:	4013      	ands	r3, r2
 80035d8:	0019      	movs	r1, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69da      	ldr	r2, [r3, #28]
 80035de:	4b04      	ldr	r3, [pc, #16]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80035e0:	430a      	orrs	r2, r1
 80035e2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	0018      	movs	r0, r3
 80035e8:	46bd      	mov	sp, r7
 80035ea:	b006      	add	sp, #24
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	40021000 	.word	0x40021000
 80035f4:	40007000 	.word	0x40007000
 80035f8:	fffcffff 	.word	0xfffcffff
 80035fc:	fff7ffff 	.word	0xfff7ffff
 8003600:	00001388 	.word	0x00001388
 8003604:	ffcfffff 	.word	0xffcfffff
 8003608:	efffffff 	.word	0xefffffff
 800360c:	fffff3ff 	.word	0xfffff3ff
 8003610:	ffffcfff 	.word	0xffffcfff
 8003614:	fbffffff 	.word	0xfbffffff
 8003618:	fff3ffff 	.word	0xfff3ffff

0800361c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e01e      	b.n	800366c <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2239      	movs	r2, #57	; 0x39
 8003632:	5c9b      	ldrb	r3, [r3, r2]
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d107      	bne.n	800364a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2238      	movs	r2, #56	; 0x38
 800363e:	2100      	movs	r1, #0
 8003640:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	0018      	movs	r0, r3
 8003646:	f7fd f841 	bl	80006cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2239      	movs	r2, #57	; 0x39
 800364e:	2102      	movs	r1, #2
 8003650:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3304      	adds	r3, #4
 800365a:	0019      	movs	r1, r3
 800365c:	0010      	movs	r0, r2
 800365e:	f000 f9d5 	bl	8003a0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2239      	movs	r2, #57	; 0x39
 8003666:	2101      	movs	r1, #1
 8003668:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	0018      	movs	r0, r3
 800366e:	46bd      	mov	sp, r7
 8003670:	b002      	add	sp, #8
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e01e      	b.n	80036c4 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2239      	movs	r2, #57	; 0x39
 800368a:	5c9b      	ldrb	r3, [r3, r2]
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d107      	bne.n	80036a2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2238      	movs	r2, #56	; 0x38
 8003696:	2100      	movs	r1, #0
 8003698:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	0018      	movs	r0, r3
 800369e:	f000 f815 	bl	80036cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2239      	movs	r2, #57	; 0x39
 80036a6:	2102      	movs	r1, #2
 80036a8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	3304      	adds	r3, #4
 80036b2:	0019      	movs	r1, r3
 80036b4:	0010      	movs	r0, r2
 80036b6:	f000 f9a9 	bl	8003a0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2239      	movs	r2, #57	; 0x39
 80036be:	2101      	movs	r1, #1
 80036c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	0018      	movs	r0, r3
 80036c6:	46bd      	mov	sp, r7
 80036c8:	b002      	add	sp, #8
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036d4:	46c0      	nop			; (mov r8, r8)
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b002      	add	sp, #8
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6839      	ldr	r1, [r7, #0]
 80036ec:	2201      	movs	r2, #1
 80036ee:	0018      	movs	r0, r3
 80036f0:	f000 fb7e 	bl	8003df0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	2207      	movs	r2, #7
 80036fc:	4013      	ands	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2b06      	cmp	r3, #6
 8003704:	d007      	beq.n	8003716 <HAL_TIM_PWM_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2101      	movs	r1, #1
 8003712:	430a      	orrs	r2, r1
 8003714:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	0018      	movs	r0, r3
 800371a:	46bd      	mov	sp, r7
 800371c:	b004      	add	sp, #16
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2238      	movs	r2, #56	; 0x38
 8003730:	5c9b      	ldrb	r3, [r3, r2]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d101      	bne.n	800373a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003736:	2302      	movs	r3, #2
 8003738:	e0a4      	b.n	8003884 <HAL_TIM_PWM_ConfigChannel+0x164>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2238      	movs	r2, #56	; 0x38
 800373e:	2101      	movs	r1, #1
 8003740:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2239      	movs	r2, #57	; 0x39
 8003746:	2102      	movs	r1, #2
 8003748:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b04      	cmp	r3, #4
 800374e:	d029      	beq.n	80037a4 <HAL_TIM_PWM_ConfigChannel+0x84>
 8003750:	d802      	bhi.n	8003758 <HAL_TIM_PWM_ConfigChannel+0x38>
 8003752:	2b00      	cmp	r3, #0
 8003754:	d005      	beq.n	8003762 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8003756:	e08c      	b.n	8003872 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8003758:	2b08      	cmp	r3, #8
 800375a:	d046      	beq.n	80037ea <HAL_TIM_PWM_ConfigChannel+0xca>
 800375c:	2b0c      	cmp	r3, #12
 800375e:	d065      	beq.n	800382c <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8003760:	e087      	b.n	8003872 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	0011      	movs	r1, r2
 800376a:	0018      	movs	r0, r3
 800376c:	f000 f9a2 	bl	8003ab4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699a      	ldr	r2, [r3, #24]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2108      	movs	r1, #8
 800377c:	430a      	orrs	r2, r1
 800377e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	699a      	ldr	r2, [r3, #24]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2104      	movs	r1, #4
 800378c:	438a      	bics	r2, r1
 800378e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6999      	ldr	r1, [r3, #24]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	619a      	str	r2, [r3, #24]
      break;
 80037a2:	e066      	b.n	8003872 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	0011      	movs	r1, r2
 80037ac:	0018      	movs	r0, r3
 80037ae:	f000 f9bd 	bl	8003b2c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699a      	ldr	r2, [r3, #24]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2180      	movs	r1, #128	; 0x80
 80037be:	0109      	lsls	r1, r1, #4
 80037c0:	430a      	orrs	r2, r1
 80037c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	699a      	ldr	r2, [r3, #24]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	492f      	ldr	r1, [pc, #188]	; (800388c <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80037d0:	400a      	ands	r2, r1
 80037d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6999      	ldr	r1, [r3, #24]
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	021a      	lsls	r2, r3, #8
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	619a      	str	r2, [r3, #24]
      break;
 80037e8:	e043      	b.n	8003872 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	0011      	movs	r1, r2
 80037f2:	0018      	movs	r0, r3
 80037f4:	f000 f9dc 	bl	8003bb0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	69da      	ldr	r2, [r3, #28]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2108      	movs	r1, #8
 8003804:	430a      	orrs	r2, r1
 8003806:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	69da      	ldr	r2, [r3, #28]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2104      	movs	r1, #4
 8003814:	438a      	bics	r2, r1
 8003816:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	69d9      	ldr	r1, [r3, #28]
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	61da      	str	r2, [r3, #28]
      break;
 800382a:	e022      	b.n	8003872 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	0011      	movs	r1, r2
 8003834:	0018      	movs	r0, r3
 8003836:	f000 f9fb 	bl	8003c30 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	69da      	ldr	r2, [r3, #28]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2180      	movs	r1, #128	; 0x80
 8003846:	0109      	lsls	r1, r1, #4
 8003848:	430a      	orrs	r2, r1
 800384a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	69da      	ldr	r2, [r3, #28]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	490d      	ldr	r1, [pc, #52]	; (800388c <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8003858:	400a      	ands	r2, r1
 800385a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	69d9      	ldr	r1, [r3, #28]
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	021a      	lsls	r2, r3, #8
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	61da      	str	r2, [r3, #28]
      break;
 8003870:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2239      	movs	r2, #57	; 0x39
 8003876:	2101      	movs	r1, #1
 8003878:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2238      	movs	r2, #56	; 0x38
 800387e:	2100      	movs	r1, #0
 8003880:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	0018      	movs	r0, r3
 8003886:	46bd      	mov	sp, r7
 8003888:	b004      	add	sp, #16
 800388a:	bd80      	pop	{r7, pc}
 800388c:	fffffbff 	.word	0xfffffbff

08003890 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2238      	movs	r2, #56	; 0x38
 800389e:	5c9b      	ldrb	r3, [r3, r2]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d101      	bne.n	80038a8 <HAL_TIM_ConfigClockSource+0x18>
 80038a4:	2302      	movs	r3, #2
 80038a6:	e0ab      	b.n	8003a00 <HAL_TIM_ConfigClockSource+0x170>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2238      	movs	r2, #56	; 0x38
 80038ac:	2101      	movs	r1, #1
 80038ae:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2239      	movs	r2, #57	; 0x39
 80038b4:	2102      	movs	r1, #2
 80038b6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2277      	movs	r2, #119	; 0x77
 80038c4:	4393      	bics	r3, r2
 80038c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4a4f      	ldr	r2, [pc, #316]	; (8003a08 <HAL_TIM_ConfigClockSource+0x178>)
 80038cc:	4013      	ands	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b40      	cmp	r3, #64	; 0x40
 80038de:	d100      	bne.n	80038e2 <HAL_TIM_ConfigClockSource+0x52>
 80038e0:	e06b      	b.n	80039ba <HAL_TIM_ConfigClockSource+0x12a>
 80038e2:	d80e      	bhi.n	8003902 <HAL_TIM_ConfigClockSource+0x72>
 80038e4:	2b10      	cmp	r3, #16
 80038e6:	d100      	bne.n	80038ea <HAL_TIM_ConfigClockSource+0x5a>
 80038e8:	e077      	b.n	80039da <HAL_TIM_ConfigClockSource+0x14a>
 80038ea:	d803      	bhi.n	80038f4 <HAL_TIM_ConfigClockSource+0x64>
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d100      	bne.n	80038f2 <HAL_TIM_ConfigClockSource+0x62>
 80038f0:	e073      	b.n	80039da <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80038f2:	e07c      	b.n	80039ee <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80038f4:	2b20      	cmp	r3, #32
 80038f6:	d100      	bne.n	80038fa <HAL_TIM_ConfigClockSource+0x6a>
 80038f8:	e06f      	b.n	80039da <HAL_TIM_ConfigClockSource+0x14a>
 80038fa:	2b30      	cmp	r3, #48	; 0x30
 80038fc:	d100      	bne.n	8003900 <HAL_TIM_ConfigClockSource+0x70>
 80038fe:	e06c      	b.n	80039da <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8003900:	e075      	b.n	80039ee <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003902:	2b70      	cmp	r3, #112	; 0x70
 8003904:	d00e      	beq.n	8003924 <HAL_TIM_ConfigClockSource+0x94>
 8003906:	d804      	bhi.n	8003912 <HAL_TIM_ConfigClockSource+0x82>
 8003908:	2b50      	cmp	r3, #80	; 0x50
 800390a:	d036      	beq.n	800397a <HAL_TIM_ConfigClockSource+0xea>
 800390c:	2b60      	cmp	r3, #96	; 0x60
 800390e:	d044      	beq.n	800399a <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8003910:	e06d      	b.n	80039ee <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003912:	2280      	movs	r2, #128	; 0x80
 8003914:	0152      	lsls	r2, r2, #5
 8003916:	4293      	cmp	r3, r2
 8003918:	d068      	beq.n	80039ec <HAL_TIM_ConfigClockSource+0x15c>
 800391a:	2280      	movs	r2, #128	; 0x80
 800391c:	0192      	lsls	r2, r2, #6
 800391e:	4293      	cmp	r3, r2
 8003920:	d017      	beq.n	8003952 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8003922:	e064      	b.n	80039ee <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6818      	ldr	r0, [r3, #0]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	6899      	ldr	r1, [r3, #8]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f000 fa3c 	bl	8003db0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2277      	movs	r2, #119	; 0x77
 8003944:	4313      	orrs	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	609a      	str	r2, [r3, #8]
      break;
 8003950:	e04d      	b.n	80039ee <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6818      	ldr	r0, [r3, #0]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	6899      	ldr	r1, [r3, #8]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f000 fa25 	bl	8003db0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2180      	movs	r1, #128	; 0x80
 8003972:	01c9      	lsls	r1, r1, #7
 8003974:	430a      	orrs	r2, r1
 8003976:	609a      	str	r2, [r3, #8]
      break;
 8003978:	e039      	b.n	80039ee <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6818      	ldr	r0, [r3, #0]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	6859      	ldr	r1, [r3, #4]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	001a      	movs	r2, r3
 8003988:	f000 f998 	bl	8003cbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2150      	movs	r1, #80	; 0x50
 8003992:	0018      	movs	r0, r3
 8003994:	f000 f9f2 	bl	8003d7c <TIM_ITRx_SetConfig>
      break;
 8003998:	e029      	b.n	80039ee <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6818      	ldr	r0, [r3, #0]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	6859      	ldr	r1, [r3, #4]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	001a      	movs	r2, r3
 80039a8:	f000 f9b6 	bl	8003d18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2160      	movs	r1, #96	; 0x60
 80039b2:	0018      	movs	r0, r3
 80039b4:	f000 f9e2 	bl	8003d7c <TIM_ITRx_SetConfig>
      break;
 80039b8:	e019      	b.n	80039ee <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6818      	ldr	r0, [r3, #0]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	6859      	ldr	r1, [r3, #4]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	001a      	movs	r2, r3
 80039c8:	f000 f978 	bl	8003cbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2140      	movs	r1, #64	; 0x40
 80039d2:	0018      	movs	r0, r3
 80039d4:	f000 f9d2 	bl	8003d7c <TIM_ITRx_SetConfig>
      break;
 80039d8:	e009      	b.n	80039ee <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	0019      	movs	r1, r3
 80039e4:	0010      	movs	r0, r2
 80039e6:	f000 f9c9 	bl	8003d7c <TIM_ITRx_SetConfig>
      break;
 80039ea:	e000      	b.n	80039ee <HAL_TIM_ConfigClockSource+0x15e>
      break;
 80039ec:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2239      	movs	r2, #57	; 0x39
 80039f2:	2101      	movs	r1, #1
 80039f4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2238      	movs	r2, #56	; 0x38
 80039fa:	2100      	movs	r1, #0
 80039fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	0018      	movs	r0, r3
 8003a02:	46bd      	mov	sp, r7
 8003a04:	b004      	add	sp, #16
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	ffff00ff 	.word	0xffff00ff

08003a0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	2380      	movs	r3, #128	; 0x80
 8003a20:	05db      	lsls	r3, r3, #23
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d007      	beq.n	8003a36 <TIM_Base_SetConfig+0x2a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a1f      	ldr	r2, [pc, #124]	; (8003aa8 <TIM_Base_SetConfig+0x9c>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d003      	beq.n	8003a36 <TIM_Base_SetConfig+0x2a>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a1e      	ldr	r2, [pc, #120]	; (8003aac <TIM_Base_SetConfig+0xa0>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d108      	bne.n	8003a48 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2270      	movs	r2, #112	; 0x70
 8003a3a:	4393      	bics	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	2380      	movs	r3, #128	; 0x80
 8003a4c:	05db      	lsls	r3, r3, #23
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d007      	beq.n	8003a62 <TIM_Base_SetConfig+0x56>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a14      	ldr	r2, [pc, #80]	; (8003aa8 <TIM_Base_SetConfig+0x9c>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d003      	beq.n	8003a62 <TIM_Base_SetConfig+0x56>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a13      	ldr	r2, [pc, #76]	; (8003aac <TIM_Base_SetConfig+0xa0>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d108      	bne.n	8003a74 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	4a12      	ldr	r2, [pc, #72]	; (8003ab0 <TIM_Base_SetConfig+0xa4>)
 8003a66:	4013      	ands	r3, r2
 8003a68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2280      	movs	r2, #128	; 0x80
 8003a78:	4393      	bics	r3, r2
 8003a7a:	001a      	movs	r2, r3
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	689a      	ldr	r2, [r3, #8]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	615a      	str	r2, [r3, #20]
}
 8003aa0:	46c0      	nop			; (mov r8, r8)
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	b004      	add	sp, #16
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40010800 	.word	0x40010800
 8003aac:	40011400 	.word	0x40011400
 8003ab0:	fffffcff 	.word	0xfffffcff

08003ab4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	4393      	bics	r3, r2
 8003ac6:	001a      	movs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2270      	movs	r2, #112	; 0x70
 8003ae2:	4393      	bics	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2203      	movs	r2, #3
 8003aea:	4393      	bics	r3, r2
 8003aec:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	2202      	movs	r2, #2
 8003afc:	4393      	bics	r3, r2
 8003afe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	621a      	str	r2, [r3, #32]
}
 8003b24:	46c0      	nop			; (mov r8, r8)
 8003b26:	46bd      	mov	sp, r7
 8003b28:	b006      	add	sp, #24
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	2210      	movs	r2, #16
 8003b3c:	4393      	bics	r3, r2
 8003b3e:	001a      	movs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4a13      	ldr	r2, [pc, #76]	; (8003ba8 <TIM_OC2_SetConfig+0x7c>)
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	4a12      	ldr	r2, [pc, #72]	; (8003bac <TIM_OC2_SetConfig+0x80>)
 8003b62:	4013      	ands	r3, r2
 8003b64:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	021b      	lsls	r3, r3, #8
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2220      	movs	r2, #32
 8003b76:	4393      	bics	r3, r2
 8003b78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	621a      	str	r2, [r3, #32]
}
 8003ba0:	46c0      	nop			; (mov r8, r8)
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	b006      	add	sp, #24
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	ffff8fff 	.word	0xffff8fff
 8003bac:	fffffcff 	.word	0xfffffcff

08003bb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	4a1a      	ldr	r2, [pc, #104]	; (8003c28 <TIM_OC3_SetConfig+0x78>)
 8003bc0:	401a      	ands	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2270      	movs	r2, #112	; 0x70
 8003bdc:	4393      	bics	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2203      	movs	r2, #3
 8003be4:	4393      	bics	r3, r2
 8003be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	4a0d      	ldr	r2, [pc, #52]	; (8003c2c <TIM_OC3_SetConfig+0x7c>)
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	621a      	str	r2, [r3, #32]
}
 8003c20:	46c0      	nop			; (mov r8, r8)
 8003c22:	46bd      	mov	sp, r7
 8003c24:	b006      	add	sp, #24
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	fffffeff 	.word	0xfffffeff
 8003c2c:	fffffdff 	.word	0xfffffdff

08003c30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	4a1b      	ldr	r2, [pc, #108]	; (8003cac <TIM_OC4_SetConfig+0x7c>)
 8003c40:	401a      	ands	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4a15      	ldr	r2, [pc, #84]	; (8003cb0 <TIM_OC4_SetConfig+0x80>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4a14      	ldr	r2, [pc, #80]	; (8003cb4 <TIM_OC4_SetConfig+0x84>)
 8003c64:	4013      	ands	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	021b      	lsls	r3, r3, #8
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	4a10      	ldr	r2, [pc, #64]	; (8003cb8 <TIM_OC4_SetConfig+0x88>)
 8003c78:	4013      	ands	r3, r2
 8003c7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	031b      	lsls	r3, r3, #12
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	621a      	str	r2, [r3, #32]
}
 8003ca2:	46c0      	nop			; (mov r8, r8)
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	b006      	add	sp, #24
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	46c0      	nop			; (mov r8, r8)
 8003cac:	ffffefff 	.word	0xffffefff
 8003cb0:	ffff8fff 	.word	0xffff8fff
 8003cb4:	fffffcff 	.word	0xfffffcff
 8003cb8:	ffffdfff 	.word	0xffffdfff

08003cbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	4393      	bics	r3, r2
 8003cd6:	001a      	movs	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	22f0      	movs	r2, #240	; 0xf0
 8003ce6:	4393      	bics	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	220a      	movs	r2, #10
 8003cf8:	4393      	bics	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	621a      	str	r2, [r3, #32]
}
 8003d10:	46c0      	nop			; (mov r8, r8)
 8003d12:	46bd      	mov	sp, r7
 8003d14:	b006      	add	sp, #24
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	2210      	movs	r2, #16
 8003d2a:	4393      	bics	r3, r2
 8003d2c:	001a      	movs	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	4a0d      	ldr	r2, [pc, #52]	; (8003d78 <TIM_TI2_ConfigInputStage+0x60>)
 8003d42:	4013      	ands	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	031b      	lsls	r3, r3, #12
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	22a0      	movs	r2, #160	; 0xa0
 8003d54:	4393      	bics	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	011b      	lsls	r3, r3, #4
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	621a      	str	r2, [r3, #32]
}
 8003d6e:	46c0      	nop			; (mov r8, r8)
 8003d70:	46bd      	mov	sp, r7
 8003d72:	b006      	add	sp, #24
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	46c0      	nop			; (mov r8, r8)
 8003d78:	ffff0fff 	.word	0xffff0fff

08003d7c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2270      	movs	r2, #112	; 0x70
 8003d90:	4393      	bics	r3, r2
 8003d92:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	2207      	movs	r2, #7
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	609a      	str	r2, [r3, #8]
}
 8003da6:	46c0      	nop			; (mov r8, r8)
 8003da8:	46bd      	mov	sp, r7
 8003daa:	b004      	add	sp, #16
 8003dac:	bd80      	pop	{r7, pc}
	...

08003db0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
 8003dbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	4a09      	ldr	r2, [pc, #36]	; (8003dec <TIM_ETR_SetConfig+0x3c>)
 8003dc8:	4013      	ands	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	021a      	lsls	r2, r3, #8
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	609a      	str	r2, [r3, #8]
}
 8003de4:	46c0      	nop			; (mov r8, r8)
 8003de6:	46bd      	mov	sp, r7
 8003de8:	b006      	add	sp, #24
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	ffff00ff 	.word	0xffff00ff

08003df0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	221f      	movs	r2, #31
 8003e00:	4013      	ands	r3, r2
 8003e02:	2201      	movs	r2, #1
 8003e04:	409a      	lsls	r2, r3
 8003e06:	0013      	movs	r3, r2
 8003e08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	43d2      	mvns	r2, r2
 8003e12:	401a      	ands	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a1a      	ldr	r2, [r3, #32]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	211f      	movs	r1, #31
 8003e20:	400b      	ands	r3, r1
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	4099      	lsls	r1, r3
 8003e26:	000b      	movs	r3, r1
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	621a      	str	r2, [r3, #32]
}
 8003e2e:	46c0      	nop			; (mov r8, r8)
 8003e30:	46bd      	mov	sp, r7
 8003e32:	b006      	add	sp, #24
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b084      	sub	sp, #16
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
 8003e3e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2238      	movs	r2, #56	; 0x38
 8003e44:	5c9b      	ldrb	r3, [r3, r2]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d101      	bne.n	8003e4e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	e032      	b.n	8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2238      	movs	r2, #56	; 0x38
 8003e52:	2101      	movs	r1, #1
 8003e54:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2239      	movs	r2, #57	; 0x39
 8003e5a:	2102      	movs	r1, #2
 8003e5c:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2270      	movs	r2, #112	; 0x70
 8003e72:	4393      	bics	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	2280      	movs	r2, #128	; 0x80
 8003e84:	4393      	bics	r3, r2
 8003e86:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2239      	movs	r2, #57	; 0x39
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2238      	movs	r2, #56	; 0x38
 8003eae:	2100      	movs	r1, #0
 8003eb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	b004      	add	sp, #16
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2244      	movs	r2, #68	; 0x44
 8003ec8:	2100      	movs	r1, #0
 8003eca:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ecc:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <USB_EnableGlobalInt+0x28>)
 8003ece:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	b299      	uxth	r1, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2240      	movs	r2, #64	; 0x40
 8003ed8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	0018      	movs	r0, r3
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	b004      	add	sp, #16
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	0000bf80 	.word	0x0000bf80

08003ee8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ef0:	4b09      	ldr	r3, [pc, #36]	; (8003f18 <USB_DisableGlobalInt+0x30>)
 8003ef2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2240      	movs	r2, #64	; 0x40
 8003ef8:	5a9b      	ldrh	r3, [r3, r2]
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	b292      	uxth	r2, r2
 8003f00:	43d2      	mvns	r2, r2
 8003f02:	b292      	uxth	r2, r2
 8003f04:	4013      	ands	r3, r2
 8003f06:	b299      	uxth	r1, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2240      	movs	r2, #64	; 0x40
 8003f0c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	0018      	movs	r0, r3
 8003f12:	46bd      	mov	sp, r7
 8003f14:	b004      	add	sp, #16
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	0000bf80 	.word	0x0000bf80

08003f1c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	b590      	push	{r4, r7, lr}
 8003f20:	46c6      	mov	lr, r8
 8003f22:	b500      	push	{lr}
 8003f24:	b082      	sub	sp, #8
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	2004      	movs	r0, #4
 8003f2c:	2410      	movs	r4, #16
 8003f2e:	46a4      	mov	ip, r4
 8003f30:	2408      	movs	r4, #8
 8003f32:	46a0      	mov	r8, r4
 8003f34:	44b8      	add	r8, r7
 8003f36:	44c4      	add	ip, r8
 8003f38:	4460      	add	r0, ip
 8003f3a:	6001      	str	r1, [r0, #0]
 8003f3c:	6042      	str	r2, [r0, #4]
 8003f3e:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2240      	movs	r2, #64	; 0x40
 8003f44:	2101      	movs	r1, #1
 8003f46:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2240      	movs	r2, #64	; 0x40
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2244      	movs	r2, #68	; 0x44
 8003f54:	2100      	movs	r1, #0
 8003f56:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2250      	movs	r2, #80	; 0x50
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	0018      	movs	r0, r3
 8003f64:	46bd      	mov	sp, r7
 8003f66:	b002      	add	sp, #8
 8003f68:	bc04      	pop	{r2}
 8003f6a:	4690      	mov	r8, r2
 8003f6c:	bc90      	pop	{r4, r7}
 8003f6e:	bc08      	pop	{r3}
 8003f70:	b004      	add	sp, #16
 8003f72:	4718      	bx	r3

08003f74 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b09a      	sub	sp, #104	; 0x68
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003f7e:	2367      	movs	r3, #103	; 0x67
 8003f80:	18fb      	adds	r3, r7, r3
 8003f82:	2200      	movs	r2, #0
 8003f84:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	18d3      	adds	r3, r2, r3
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	2364      	movs	r3, #100	; 0x64
 8003f96:	18fb      	adds	r3, r7, r3
 8003f98:	49cf      	ldr	r1, [pc, #828]	; (80042d8 <USB_ActivateEndpoint+0x364>)
 8003f9a:	400a      	ands	r2, r1
 8003f9c:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	78db      	ldrb	r3, [r3, #3]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d020      	beq.n	8003fe8 <USB_ActivateEndpoint+0x74>
 8003fa6:	dc02      	bgt.n	8003fae <USB_ActivateEndpoint+0x3a>
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d005      	beq.n	8003fb8 <USB_ActivateEndpoint+0x44>
 8003fac:	e025      	b.n	8003ffa <USB_ActivateEndpoint+0x86>
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d00b      	beq.n	8003fca <USB_ActivateEndpoint+0x56>
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d00f      	beq.n	8003fd6 <USB_ActivateEndpoint+0x62>
 8003fb6:	e020      	b.n	8003ffa <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003fb8:	2264      	movs	r2, #100	; 0x64
 8003fba:	18bb      	adds	r3, r7, r2
 8003fbc:	18ba      	adds	r2, r7, r2
 8003fbe:	8812      	ldrh	r2, [r2, #0]
 8003fc0:	2180      	movs	r1, #128	; 0x80
 8003fc2:	0089      	lsls	r1, r1, #2
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	801a      	strh	r2, [r3, #0]
      break;
 8003fc8:	e01c      	b.n	8004004 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8003fca:	2264      	movs	r2, #100	; 0x64
 8003fcc:	18bb      	adds	r3, r7, r2
 8003fce:	18ba      	adds	r2, r7, r2
 8003fd0:	8812      	ldrh	r2, [r2, #0]
 8003fd2:	801a      	strh	r2, [r3, #0]
      break;
 8003fd4:	e016      	b.n	8004004 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003fd6:	2264      	movs	r2, #100	; 0x64
 8003fd8:	18bb      	adds	r3, r7, r2
 8003fda:	18ba      	adds	r2, r7, r2
 8003fdc:	8812      	ldrh	r2, [r2, #0]
 8003fde:	21c0      	movs	r1, #192	; 0xc0
 8003fe0:	00c9      	lsls	r1, r1, #3
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	801a      	strh	r2, [r3, #0]
      break;
 8003fe6:	e00d      	b.n	8004004 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003fe8:	2264      	movs	r2, #100	; 0x64
 8003fea:	18bb      	adds	r3, r7, r2
 8003fec:	18ba      	adds	r2, r7, r2
 8003fee:	8812      	ldrh	r2, [r2, #0]
 8003ff0:	2180      	movs	r1, #128	; 0x80
 8003ff2:	00c9      	lsls	r1, r1, #3
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	801a      	strh	r2, [r3, #0]
      break;
 8003ff8:	e004      	b.n	8004004 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8003ffa:	2367      	movs	r3, #103	; 0x67
 8003ffc:	18fb      	adds	r3, r7, r3
 8003ffe:	2201      	movs	r2, #1
 8004000:	701a      	strb	r2, [r3, #0]
      break;
 8004002:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	18d3      	adds	r3, r2, r3
 800400e:	2264      	movs	r2, #100	; 0x64
 8004010:	18ba      	adds	r2, r7, r2
 8004012:	8812      	ldrh	r2, [r2, #0]
 8004014:	49b1      	ldr	r1, [pc, #708]	; (80042dc <USB_ActivateEndpoint+0x368>)
 8004016:	430a      	orrs	r2, r1
 8004018:	b292      	uxth	r2, r2
 800401a:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	18d3      	adds	r3, r2, r3
 8004026:	881b      	ldrh	r3, [r3, #0]
 8004028:	b29b      	uxth	r3, r3
 800402a:	b21b      	sxth	r3, r3
 800402c:	4aac      	ldr	r2, [pc, #688]	; (80042e0 <USB_ActivateEndpoint+0x36c>)
 800402e:	4013      	ands	r3, r2
 8004030:	b21a      	sxth	r2, r3
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	b21b      	sxth	r3, r3
 8004038:	4313      	orrs	r3, r2
 800403a:	b21a      	sxth	r2, r3
 800403c:	215e      	movs	r1, #94	; 0x5e
 800403e:	187b      	adds	r3, r7, r1
 8004040:	801a      	strh	r2, [r3, #0]
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	18d3      	adds	r3, r2, r3
 800404c:	187a      	adds	r2, r7, r1
 800404e:	8812      	ldrh	r2, [r2, #0]
 8004050:	49a2      	ldr	r1, [pc, #648]	; (80042dc <USB_ActivateEndpoint+0x368>)
 8004052:	430a      	orrs	r2, r1
 8004054:	b292      	uxth	r2, r2
 8004056:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	7b1b      	ldrb	r3, [r3, #12]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d000      	beq.n	8004062 <USB_ActivateEndpoint+0xee>
 8004060:	e150      	b.n	8004304 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	785b      	ldrb	r3, [r3, #1]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d100      	bne.n	800406c <USB_ActivateEndpoint+0xf8>
 800406a:	e07a      	b.n	8004162 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2250      	movs	r2, #80	; 0x50
 8004074:	5a9b      	ldrh	r3, [r3, r2]
 8004076:	b29b      	uxth	r3, r3
 8004078:	001a      	movs	r2, r3
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	189b      	adds	r3, r3, r2
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	00da      	lsls	r2, r3, #3
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	18d3      	adds	r3, r2, r3
 800408a:	2280      	movs	r2, #128	; 0x80
 800408c:	00d2      	lsls	r2, r2, #3
 800408e:	4694      	mov	ip, r2
 8004090:	4463      	add	r3, ip
 8004092:	613b      	str	r3, [r7, #16]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	88db      	ldrh	r3, [r3, #6]
 8004098:	085b      	lsrs	r3, r3, #1
 800409a:	b29b      	uxth	r3, r3
 800409c:	18db      	adds	r3, r3, r3
 800409e:	b29a      	uxth	r2, r3
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	18d2      	adds	r2, r2, r3
 80040ae:	210e      	movs	r1, #14
 80040b0:	187b      	adds	r3, r7, r1
 80040b2:	8812      	ldrh	r2, [r2, #0]
 80040b4:	801a      	strh	r2, [r3, #0]
 80040b6:	187b      	adds	r3, r7, r1
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	2240      	movs	r2, #64	; 0x40
 80040bc:	4013      	ands	r3, r2
 80040be:	d016      	beq.n	80040ee <USB_ActivateEndpoint+0x17a>
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	18d3      	adds	r3, r2, r3
 80040ca:	881b      	ldrh	r3, [r3, #0]
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	200c      	movs	r0, #12
 80040d0:	183b      	adds	r3, r7, r0
 80040d2:	4983      	ldr	r1, [pc, #524]	; (80042e0 <USB_ActivateEndpoint+0x36c>)
 80040d4:	400a      	ands	r2, r1
 80040d6:	801a      	strh	r2, [r3, #0]
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	18d3      	adds	r3, r2, r3
 80040e2:	183a      	adds	r2, r7, r0
 80040e4:	8812      	ldrh	r2, [r2, #0]
 80040e6:	497f      	ldr	r1, [pc, #508]	; (80042e4 <USB_ActivateEndpoint+0x370>)
 80040e8:	430a      	orrs	r2, r1
 80040ea:	b292      	uxth	r2, r2
 80040ec:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	78db      	ldrb	r3, [r3, #3]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d01d      	beq.n	8004132 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	18d3      	adds	r3, r2, r3
 8004100:	881b      	ldrh	r3, [r3, #0]
 8004102:	b29a      	uxth	r2, r3
 8004104:	2008      	movs	r0, #8
 8004106:	183b      	adds	r3, r7, r0
 8004108:	4977      	ldr	r1, [pc, #476]	; (80042e8 <USB_ActivateEndpoint+0x374>)
 800410a:	400a      	ands	r2, r1
 800410c:	801a      	strh	r2, [r3, #0]
 800410e:	183b      	adds	r3, r7, r0
 8004110:	183a      	adds	r2, r7, r0
 8004112:	8812      	ldrh	r2, [r2, #0]
 8004114:	2120      	movs	r1, #32
 8004116:	404a      	eors	r2, r1
 8004118:	801a      	strh	r2, [r3, #0]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	18d3      	adds	r3, r2, r3
 8004124:	183a      	adds	r2, r7, r0
 8004126:	8812      	ldrh	r2, [r2, #0]
 8004128:	496c      	ldr	r1, [pc, #432]	; (80042dc <USB_ActivateEndpoint+0x368>)
 800412a:	430a      	orrs	r2, r1
 800412c:	b292      	uxth	r2, r2
 800412e:	801a      	strh	r2, [r3, #0]
 8004130:	e25e      	b.n	80045f0 <USB_ActivateEndpoint+0x67c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	18d3      	adds	r3, r2, r3
 800413c:	881b      	ldrh	r3, [r3, #0]
 800413e:	b29a      	uxth	r2, r3
 8004140:	200a      	movs	r0, #10
 8004142:	183b      	adds	r3, r7, r0
 8004144:	4968      	ldr	r1, [pc, #416]	; (80042e8 <USB_ActivateEndpoint+0x374>)
 8004146:	400a      	ands	r2, r1
 8004148:	801a      	strh	r2, [r3, #0]
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	18d3      	adds	r3, r2, r3
 8004154:	183a      	adds	r2, r7, r0
 8004156:	8812      	ldrh	r2, [r2, #0]
 8004158:	4960      	ldr	r1, [pc, #384]	; (80042dc <USB_ActivateEndpoint+0x368>)
 800415a:	430a      	orrs	r2, r1
 800415c:	b292      	uxth	r2, r2
 800415e:	801a      	strh	r2, [r3, #0]
 8004160:	e246      	b.n	80045f0 <USB_ActivateEndpoint+0x67c>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2250      	movs	r2, #80	; 0x50
 800416a:	5a9b      	ldrh	r3, [r3, r2]
 800416c:	b29b      	uxth	r3, r3
 800416e:	001a      	movs	r2, r3
 8004170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004172:	189b      	adds	r3, r3, r2
 8004174:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	00da      	lsls	r2, r3, #3
 800417c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417e:	18d3      	adds	r3, r2, r3
 8004180:	4a5a      	ldr	r2, [pc, #360]	; (80042ec <USB_ActivateEndpoint+0x378>)
 8004182:	4694      	mov	ip, r2
 8004184:	4463      	add	r3, ip
 8004186:	62bb      	str	r3, [r7, #40]	; 0x28
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	88db      	ldrh	r3, [r3, #6]
 800418c:	085b      	lsrs	r3, r3, #1
 800418e:	b29b      	uxth	r3, r3
 8004190:	18db      	adds	r3, r3, r3
 8004192:	b29a      	uxth	r2, r3
 8004194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004196:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	627b      	str	r3, [r7, #36]	; 0x24
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2250      	movs	r2, #80	; 0x50
 80041a0:	5a9b      	ldrh	r3, [r3, r2]
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	001a      	movs	r2, r3
 80041a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a8:	189b      	adds	r3, r3, r2
 80041aa:	627b      	str	r3, [r7, #36]	; 0x24
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	00da      	lsls	r2, r3, #3
 80041b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b4:	18d3      	adds	r3, r2, r3
 80041b6:	4a4e      	ldr	r2, [pc, #312]	; (80042f0 <USB_ActivateEndpoint+0x37c>)
 80041b8:	4694      	mov	ip, r2
 80041ba:	4463      	add	r3, ip
 80041bc:	623b      	str	r3, [r7, #32]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d110      	bne.n	80041e8 <USB_ActivateEndpoint+0x274>
 80041c6:	6a3b      	ldr	r3, [r7, #32]
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	4a49      	ldr	r2, [pc, #292]	; (80042f4 <USB_ActivateEndpoint+0x380>)
 80041ce:	4013      	ands	r3, r2
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	801a      	strh	r2, [r3, #0]
 80041d6:	6a3b      	ldr	r3, [r7, #32]
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	b29b      	uxth	r3, r3
 80041dc:	4a46      	ldr	r2, [pc, #280]	; (80042f8 <USB_ActivateEndpoint+0x384>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	801a      	strh	r2, [r3, #0]
 80041e6:	e02b      	b.n	8004240 <USB_ActivateEndpoint+0x2cc>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	2b3e      	cmp	r3, #62	; 0x3e
 80041ee:	d812      	bhi.n	8004216 <USB_ActivateEndpoint+0x2a2>
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	085b      	lsrs	r3, r3, #1
 80041f6:	663b      	str	r3, [r7, #96]	; 0x60
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	2201      	movs	r2, #1
 80041fe:	4013      	ands	r3, r2
 8004200:	d002      	beq.n	8004208 <USB_ActivateEndpoint+0x294>
 8004202:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004204:	3301      	adds	r3, #1
 8004206:	663b      	str	r3, [r7, #96]	; 0x60
 8004208:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800420a:	b29b      	uxth	r3, r3
 800420c:	029b      	lsls	r3, r3, #10
 800420e:	b29a      	uxth	r2, r3
 8004210:	6a3b      	ldr	r3, [r7, #32]
 8004212:	801a      	strh	r2, [r3, #0]
 8004214:	e014      	b.n	8004240 <USB_ActivateEndpoint+0x2cc>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	095b      	lsrs	r3, r3, #5
 800421c:	663b      	str	r3, [r7, #96]	; 0x60
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	221f      	movs	r2, #31
 8004224:	4013      	ands	r3, r2
 8004226:	d102      	bne.n	800422e <USB_ActivateEndpoint+0x2ba>
 8004228:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800422a:	3b01      	subs	r3, #1
 800422c:	663b      	str	r3, [r7, #96]	; 0x60
 800422e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004230:	b29b      	uxth	r3, r3
 8004232:	029b      	lsls	r3, r3, #10
 8004234:	b29b      	uxth	r3, r3
 8004236:	4a30      	ldr	r2, [pc, #192]	; (80042f8 <USB_ActivateEndpoint+0x384>)
 8004238:	4313      	orrs	r3, r2
 800423a:	b29a      	uxth	r2, r3
 800423c:	6a3b      	ldr	r3, [r7, #32]
 800423e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	18d2      	adds	r2, r2, r3
 800424a:	211e      	movs	r1, #30
 800424c:	187b      	adds	r3, r7, r1
 800424e:	8812      	ldrh	r2, [r2, #0]
 8004250:	801a      	strh	r2, [r3, #0]
 8004252:	187b      	adds	r3, r7, r1
 8004254:	881a      	ldrh	r2, [r3, #0]
 8004256:	2380      	movs	r3, #128	; 0x80
 8004258:	01db      	lsls	r3, r3, #7
 800425a:	4013      	ands	r3, r2
 800425c:	d016      	beq.n	800428c <USB_ActivateEndpoint+0x318>
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	18d3      	adds	r3, r2, r3
 8004268:	881b      	ldrh	r3, [r3, #0]
 800426a:	b29a      	uxth	r2, r3
 800426c:	201c      	movs	r0, #28
 800426e:	183b      	adds	r3, r7, r0
 8004270:	491b      	ldr	r1, [pc, #108]	; (80042e0 <USB_ActivateEndpoint+0x36c>)
 8004272:	400a      	ands	r2, r1
 8004274:	801a      	strh	r2, [r3, #0]
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	18d3      	adds	r3, r2, r3
 8004280:	183a      	adds	r2, r7, r0
 8004282:	8812      	ldrh	r2, [r2, #0]
 8004284:	491d      	ldr	r1, [pc, #116]	; (80042fc <USB_ActivateEndpoint+0x388>)
 8004286:	430a      	orrs	r2, r1
 8004288:	b292      	uxth	r2, r2
 800428a:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	18d3      	adds	r3, r2, r3
 8004296:	881b      	ldrh	r3, [r3, #0]
 8004298:	b29a      	uxth	r2, r3
 800429a:	201a      	movs	r0, #26
 800429c:	183b      	adds	r3, r7, r0
 800429e:	4918      	ldr	r1, [pc, #96]	; (8004300 <USB_ActivateEndpoint+0x38c>)
 80042a0:	400a      	ands	r2, r1
 80042a2:	801a      	strh	r2, [r3, #0]
 80042a4:	183b      	adds	r3, r7, r0
 80042a6:	183a      	adds	r2, r7, r0
 80042a8:	8812      	ldrh	r2, [r2, #0]
 80042aa:	2180      	movs	r1, #128	; 0x80
 80042ac:	0149      	lsls	r1, r1, #5
 80042ae:	404a      	eors	r2, r1
 80042b0:	801a      	strh	r2, [r3, #0]
 80042b2:	183b      	adds	r3, r7, r0
 80042b4:	183a      	adds	r2, r7, r0
 80042b6:	8812      	ldrh	r2, [r2, #0]
 80042b8:	2180      	movs	r1, #128	; 0x80
 80042ba:	0189      	lsls	r1, r1, #6
 80042bc:	404a      	eors	r2, r1
 80042be:	801a      	strh	r2, [r3, #0]
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	18d3      	adds	r3, r2, r3
 80042ca:	183a      	adds	r2, r7, r0
 80042cc:	8812      	ldrh	r2, [r2, #0]
 80042ce:	4903      	ldr	r1, [pc, #12]	; (80042dc <USB_ActivateEndpoint+0x368>)
 80042d0:	430a      	orrs	r2, r1
 80042d2:	b292      	uxth	r2, r2
 80042d4:	801a      	strh	r2, [r3, #0]
 80042d6:	e18b      	b.n	80045f0 <USB_ActivateEndpoint+0x67c>
 80042d8:	ffff898f 	.word	0xffff898f
 80042dc:	ffff8080 	.word	0xffff8080
 80042e0:	ffff8f8f 	.word	0xffff8f8f
 80042e4:	ffff80c0 	.word	0xffff80c0
 80042e8:	ffff8fbf 	.word	0xffff8fbf
 80042ec:	00000404 	.word	0x00000404
 80042f0:	00000406 	.word	0x00000406
 80042f4:	ffff83ff 	.word	0xffff83ff
 80042f8:	ffff8000 	.word	0xffff8000
 80042fc:	ffffc080 	.word	0xffffc080
 8004300:	ffffbf8f 	.word	0xffffbf8f
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	18d3      	adds	r3, r2, r3
 800430e:	881b      	ldrh	r3, [r3, #0]
 8004310:	b29a      	uxth	r2, r3
 8004312:	205c      	movs	r0, #92	; 0x5c
 8004314:	183b      	adds	r3, r7, r0
 8004316:	49ba      	ldr	r1, [pc, #744]	; (8004600 <USB_ActivateEndpoint+0x68c>)
 8004318:	400a      	ands	r2, r1
 800431a:	801a      	strh	r2, [r3, #0]
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	18d3      	adds	r3, r2, r3
 8004326:	183a      	adds	r2, r7, r0
 8004328:	8812      	ldrh	r2, [r2, #0]
 800432a:	49b6      	ldr	r1, [pc, #728]	; (8004604 <USB_ActivateEndpoint+0x690>)
 800432c:	430a      	orrs	r2, r1
 800432e:	b292      	uxth	r2, r2
 8004330:	801a      	strh	r2, [r3, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	65bb      	str	r3, [r7, #88]	; 0x58
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2250      	movs	r2, #80	; 0x50
 800433a:	5a9b      	ldrh	r3, [r3, r2]
 800433c:	b29b      	uxth	r3, r3
 800433e:	001a      	movs	r2, r3
 8004340:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004342:	189b      	adds	r3, r3, r2
 8004344:	65bb      	str	r3, [r7, #88]	; 0x58
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	00da      	lsls	r2, r3, #3
 800434c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800434e:	18d3      	adds	r3, r2, r3
 8004350:	2280      	movs	r2, #128	; 0x80
 8004352:	00d2      	lsls	r2, r2, #3
 8004354:	4694      	mov	ip, r2
 8004356:	4463      	add	r3, ip
 8004358:	657b      	str	r3, [r7, #84]	; 0x54
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	891b      	ldrh	r3, [r3, #8]
 800435e:	085b      	lsrs	r3, r3, #1
 8004360:	b29b      	uxth	r3, r3
 8004362:	18db      	adds	r3, r3, r3
 8004364:	b29a      	uxth	r2, r3
 8004366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004368:	801a      	strh	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	653b      	str	r3, [r7, #80]	; 0x50
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2250      	movs	r2, #80	; 0x50
 8004372:	5a9b      	ldrh	r3, [r3, r2]
 8004374:	b29b      	uxth	r3, r3
 8004376:	001a      	movs	r2, r3
 8004378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800437a:	189b      	adds	r3, r3, r2
 800437c:	653b      	str	r3, [r7, #80]	; 0x50
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	00da      	lsls	r2, r3, #3
 8004384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004386:	18d3      	adds	r3, r2, r3
 8004388:	4a9f      	ldr	r2, [pc, #636]	; (8004608 <USB_ActivateEndpoint+0x694>)
 800438a:	4694      	mov	ip, r2
 800438c:	4463      	add	r3, ip
 800438e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	895b      	ldrh	r3, [r3, #10]
 8004394:	085b      	lsrs	r3, r3, #1
 8004396:	b29b      	uxth	r3, r3
 8004398:	18db      	adds	r3, r3, r3
 800439a:	b29a      	uxth	r2, r3
 800439c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800439e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	785b      	ldrb	r3, [r3, #1]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d000      	beq.n	80043aa <USB_ActivateEndpoint+0x436>
 80043a8:	e087      	b.n	80044ba <USB_ActivateEndpoint+0x546>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	18d2      	adds	r2, r2, r3
 80043b4:	213c      	movs	r1, #60	; 0x3c
 80043b6:	187b      	adds	r3, r7, r1
 80043b8:	8812      	ldrh	r2, [r2, #0]
 80043ba:	801a      	strh	r2, [r3, #0]
 80043bc:	187b      	adds	r3, r7, r1
 80043be:	881a      	ldrh	r2, [r3, #0]
 80043c0:	2380      	movs	r3, #128	; 0x80
 80043c2:	01db      	lsls	r3, r3, #7
 80043c4:	4013      	ands	r3, r2
 80043c6:	d016      	beq.n	80043f6 <USB_ActivateEndpoint+0x482>
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	18d3      	adds	r3, r2, r3
 80043d2:	881b      	ldrh	r3, [r3, #0]
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	203a      	movs	r0, #58	; 0x3a
 80043d8:	183b      	adds	r3, r7, r0
 80043da:	4989      	ldr	r1, [pc, #548]	; (8004600 <USB_ActivateEndpoint+0x68c>)
 80043dc:	400a      	ands	r2, r1
 80043de:	801a      	strh	r2, [r3, #0]
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	18d3      	adds	r3, r2, r3
 80043ea:	183a      	adds	r2, r7, r0
 80043ec:	8812      	ldrh	r2, [r2, #0]
 80043ee:	4987      	ldr	r1, [pc, #540]	; (800460c <USB_ActivateEndpoint+0x698>)
 80043f0:	430a      	orrs	r2, r1
 80043f2:	b292      	uxth	r2, r2
 80043f4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	18d2      	adds	r2, r2, r3
 8004400:	2138      	movs	r1, #56	; 0x38
 8004402:	187b      	adds	r3, r7, r1
 8004404:	8812      	ldrh	r2, [r2, #0]
 8004406:	801a      	strh	r2, [r3, #0]
 8004408:	187b      	adds	r3, r7, r1
 800440a:	881b      	ldrh	r3, [r3, #0]
 800440c:	2240      	movs	r2, #64	; 0x40
 800440e:	4013      	ands	r3, r2
 8004410:	d016      	beq.n	8004440 <USB_ActivateEndpoint+0x4cc>
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	18d3      	adds	r3, r2, r3
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	b29a      	uxth	r2, r3
 8004420:	2036      	movs	r0, #54	; 0x36
 8004422:	183b      	adds	r3, r7, r0
 8004424:	4976      	ldr	r1, [pc, #472]	; (8004600 <USB_ActivateEndpoint+0x68c>)
 8004426:	400a      	ands	r2, r1
 8004428:	801a      	strh	r2, [r3, #0]
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	18d3      	adds	r3, r2, r3
 8004434:	183a      	adds	r2, r7, r0
 8004436:	8812      	ldrh	r2, [r2, #0]
 8004438:	4975      	ldr	r1, [pc, #468]	; (8004610 <USB_ActivateEndpoint+0x69c>)
 800443a:	430a      	orrs	r2, r1
 800443c:	b292      	uxth	r2, r2
 800443e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	18d3      	adds	r3, r2, r3
 800444a:	881b      	ldrh	r3, [r3, #0]
 800444c:	b29a      	uxth	r2, r3
 800444e:	2034      	movs	r0, #52	; 0x34
 8004450:	183b      	adds	r3, r7, r0
 8004452:	4970      	ldr	r1, [pc, #448]	; (8004614 <USB_ActivateEndpoint+0x6a0>)
 8004454:	400a      	ands	r2, r1
 8004456:	801a      	strh	r2, [r3, #0]
 8004458:	183b      	adds	r3, r7, r0
 800445a:	183a      	adds	r2, r7, r0
 800445c:	8812      	ldrh	r2, [r2, #0]
 800445e:	2180      	movs	r1, #128	; 0x80
 8004460:	0149      	lsls	r1, r1, #5
 8004462:	404a      	eors	r2, r1
 8004464:	801a      	strh	r2, [r3, #0]
 8004466:	183b      	adds	r3, r7, r0
 8004468:	183a      	adds	r2, r7, r0
 800446a:	8812      	ldrh	r2, [r2, #0]
 800446c:	2180      	movs	r1, #128	; 0x80
 800446e:	0189      	lsls	r1, r1, #6
 8004470:	404a      	eors	r2, r1
 8004472:	801a      	strh	r2, [r3, #0]
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	18d3      	adds	r3, r2, r3
 800447e:	183a      	adds	r2, r7, r0
 8004480:	8812      	ldrh	r2, [r2, #0]
 8004482:	4965      	ldr	r1, [pc, #404]	; (8004618 <USB_ActivateEndpoint+0x6a4>)
 8004484:	430a      	orrs	r2, r1
 8004486:	b292      	uxth	r2, r2
 8004488:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	18d3      	adds	r3, r2, r3
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	b29a      	uxth	r2, r3
 8004498:	2032      	movs	r0, #50	; 0x32
 800449a:	183b      	adds	r3, r7, r0
 800449c:	495f      	ldr	r1, [pc, #380]	; (800461c <USB_ActivateEndpoint+0x6a8>)
 800449e:	400a      	ands	r2, r1
 80044a0:	801a      	strh	r2, [r3, #0]
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	18d3      	adds	r3, r2, r3
 80044ac:	183a      	adds	r2, r7, r0
 80044ae:	8812      	ldrh	r2, [r2, #0]
 80044b0:	4959      	ldr	r1, [pc, #356]	; (8004618 <USB_ActivateEndpoint+0x6a4>)
 80044b2:	430a      	orrs	r2, r1
 80044b4:	b292      	uxth	r2, r2
 80044b6:	801a      	strh	r2, [r3, #0]
 80044b8:	e09a      	b.n	80045f0 <USB_ActivateEndpoint+0x67c>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	18d2      	adds	r2, r2, r3
 80044c4:	214a      	movs	r1, #74	; 0x4a
 80044c6:	187b      	adds	r3, r7, r1
 80044c8:	8812      	ldrh	r2, [r2, #0]
 80044ca:	801a      	strh	r2, [r3, #0]
 80044cc:	187b      	adds	r3, r7, r1
 80044ce:	881a      	ldrh	r2, [r3, #0]
 80044d0:	2380      	movs	r3, #128	; 0x80
 80044d2:	01db      	lsls	r3, r3, #7
 80044d4:	4013      	ands	r3, r2
 80044d6:	d016      	beq.n	8004506 <USB_ActivateEndpoint+0x592>
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	18d3      	adds	r3, r2, r3
 80044e2:	881b      	ldrh	r3, [r3, #0]
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	2048      	movs	r0, #72	; 0x48
 80044e8:	183b      	adds	r3, r7, r0
 80044ea:	4945      	ldr	r1, [pc, #276]	; (8004600 <USB_ActivateEndpoint+0x68c>)
 80044ec:	400a      	ands	r2, r1
 80044ee:	801a      	strh	r2, [r3, #0]
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	18d3      	adds	r3, r2, r3
 80044fa:	183a      	adds	r2, r7, r0
 80044fc:	8812      	ldrh	r2, [r2, #0]
 80044fe:	4943      	ldr	r1, [pc, #268]	; (800460c <USB_ActivateEndpoint+0x698>)
 8004500:	430a      	orrs	r2, r1
 8004502:	b292      	uxth	r2, r2
 8004504:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	18d2      	adds	r2, r2, r3
 8004510:	2146      	movs	r1, #70	; 0x46
 8004512:	187b      	adds	r3, r7, r1
 8004514:	8812      	ldrh	r2, [r2, #0]
 8004516:	801a      	strh	r2, [r3, #0]
 8004518:	187b      	adds	r3, r7, r1
 800451a:	881b      	ldrh	r3, [r3, #0]
 800451c:	2240      	movs	r2, #64	; 0x40
 800451e:	4013      	ands	r3, r2
 8004520:	d016      	beq.n	8004550 <USB_ActivateEndpoint+0x5dc>
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	18d3      	adds	r3, r2, r3
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	b29a      	uxth	r2, r3
 8004530:	2044      	movs	r0, #68	; 0x44
 8004532:	183b      	adds	r3, r7, r0
 8004534:	4932      	ldr	r1, [pc, #200]	; (8004600 <USB_ActivateEndpoint+0x68c>)
 8004536:	400a      	ands	r2, r1
 8004538:	801a      	strh	r2, [r3, #0]
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	18d3      	adds	r3, r2, r3
 8004544:	183a      	adds	r2, r7, r0
 8004546:	8812      	ldrh	r2, [r2, #0]
 8004548:	4931      	ldr	r1, [pc, #196]	; (8004610 <USB_ActivateEndpoint+0x69c>)
 800454a:	430a      	orrs	r2, r1
 800454c:	b292      	uxth	r2, r2
 800454e:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	78db      	ldrb	r3, [r3, #3]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d01d      	beq.n	8004594 <USB_ActivateEndpoint+0x620>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	18d3      	adds	r3, r2, r3
 8004562:	881b      	ldrh	r3, [r3, #0]
 8004564:	b29a      	uxth	r2, r3
 8004566:	2040      	movs	r0, #64	; 0x40
 8004568:	183b      	adds	r3, r7, r0
 800456a:	492c      	ldr	r1, [pc, #176]	; (800461c <USB_ActivateEndpoint+0x6a8>)
 800456c:	400a      	ands	r2, r1
 800456e:	801a      	strh	r2, [r3, #0]
 8004570:	183b      	adds	r3, r7, r0
 8004572:	183a      	adds	r2, r7, r0
 8004574:	8812      	ldrh	r2, [r2, #0]
 8004576:	2120      	movs	r1, #32
 8004578:	404a      	eors	r2, r1
 800457a:	801a      	strh	r2, [r3, #0]
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	18d3      	adds	r3, r2, r3
 8004586:	183a      	adds	r2, r7, r0
 8004588:	8812      	ldrh	r2, [r2, #0]
 800458a:	4923      	ldr	r1, [pc, #140]	; (8004618 <USB_ActivateEndpoint+0x6a4>)
 800458c:	430a      	orrs	r2, r1
 800458e:	b292      	uxth	r2, r2
 8004590:	801a      	strh	r2, [r3, #0]
 8004592:	e016      	b.n	80045c2 <USB_ActivateEndpoint+0x64e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	18d3      	adds	r3, r2, r3
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	2042      	movs	r0, #66	; 0x42
 80045a4:	183b      	adds	r3, r7, r0
 80045a6:	491d      	ldr	r1, [pc, #116]	; (800461c <USB_ActivateEndpoint+0x6a8>)
 80045a8:	400a      	ands	r2, r1
 80045aa:	801a      	strh	r2, [r3, #0]
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	18d3      	adds	r3, r2, r3
 80045b6:	183a      	adds	r2, r7, r0
 80045b8:	8812      	ldrh	r2, [r2, #0]
 80045ba:	4917      	ldr	r1, [pc, #92]	; (8004618 <USB_ActivateEndpoint+0x6a4>)
 80045bc:	430a      	orrs	r2, r1
 80045be:	b292      	uxth	r2, r2
 80045c0:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	18d3      	adds	r3, r2, r3
 80045cc:	881b      	ldrh	r3, [r3, #0]
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	203e      	movs	r0, #62	; 0x3e
 80045d2:	183b      	adds	r3, r7, r0
 80045d4:	490f      	ldr	r1, [pc, #60]	; (8004614 <USB_ActivateEndpoint+0x6a0>)
 80045d6:	400a      	ands	r2, r1
 80045d8:	801a      	strh	r2, [r3, #0]
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	18d3      	adds	r3, r2, r3
 80045e4:	183a      	adds	r2, r7, r0
 80045e6:	8812      	ldrh	r2, [r2, #0]
 80045e8:	490b      	ldr	r1, [pc, #44]	; (8004618 <USB_ActivateEndpoint+0x6a4>)
 80045ea:	430a      	orrs	r2, r1
 80045ec:	b292      	uxth	r2, r2
 80045ee:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 80045f0:	2367      	movs	r3, #103	; 0x67
 80045f2:	18fb      	adds	r3, r7, r3
 80045f4:	781b      	ldrb	r3, [r3, #0]
}
 80045f6:	0018      	movs	r0, r3
 80045f8:	46bd      	mov	sp, r7
 80045fa:	b01a      	add	sp, #104	; 0x68
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	46c0      	nop			; (mov r8, r8)
 8004600:	ffff8f8f 	.word	0xffff8f8f
 8004604:	ffff8180 	.word	0xffff8180
 8004608:	00000404 	.word	0x00000404
 800460c:	ffffc080 	.word	0xffffc080
 8004610:	ffff80c0 	.word	0xffff80c0
 8004614:	ffffbf8f 	.word	0xffffbf8f
 8004618:	ffff8080 	.word	0xffff8080
 800461c:	ffff8fbf 	.word	0xffff8fbf

08004620 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b08c      	sub	sp, #48	; 0x30
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	7b1b      	ldrb	r3, [r3, #12]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d000      	beq.n	8004634 <USB_DeactivateEndpoint+0x14>
 8004632:	e07e      	b.n	8004732 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	785b      	ldrb	r3, [r3, #1]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d03c      	beq.n	80046b6 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	18d2      	adds	r2, r2, r3
 8004646:	210c      	movs	r1, #12
 8004648:	187b      	adds	r3, r7, r1
 800464a:	8812      	ldrh	r2, [r2, #0]
 800464c:	801a      	strh	r2, [r3, #0]
 800464e:	187b      	adds	r3, r7, r1
 8004650:	881b      	ldrh	r3, [r3, #0]
 8004652:	2240      	movs	r2, #64	; 0x40
 8004654:	4013      	ands	r3, r2
 8004656:	d016      	beq.n	8004686 <USB_DeactivateEndpoint+0x66>
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	18d3      	adds	r3, r2, r3
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	b29a      	uxth	r2, r3
 8004666:	200a      	movs	r0, #10
 8004668:	183b      	adds	r3, r7, r0
 800466a:	49c7      	ldr	r1, [pc, #796]	; (8004988 <USB_DeactivateEndpoint+0x368>)
 800466c:	400a      	ands	r2, r1
 800466e:	801a      	strh	r2, [r3, #0]
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	18d3      	adds	r3, r2, r3
 800467a:	183a      	adds	r2, r7, r0
 800467c:	8812      	ldrh	r2, [r2, #0]
 800467e:	49c3      	ldr	r1, [pc, #780]	; (800498c <USB_DeactivateEndpoint+0x36c>)
 8004680:	430a      	orrs	r2, r1
 8004682:	b292      	uxth	r2, r2
 8004684:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	18d3      	adds	r3, r2, r3
 8004690:	881b      	ldrh	r3, [r3, #0]
 8004692:	b29a      	uxth	r2, r3
 8004694:	2008      	movs	r0, #8
 8004696:	183b      	adds	r3, r7, r0
 8004698:	49bd      	ldr	r1, [pc, #756]	; (8004990 <USB_DeactivateEndpoint+0x370>)
 800469a:	400a      	ands	r2, r1
 800469c:	801a      	strh	r2, [r3, #0]
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	18d3      	adds	r3, r2, r3
 80046a8:	183a      	adds	r2, r7, r0
 80046aa:	8812      	ldrh	r2, [r2, #0]
 80046ac:	49b9      	ldr	r1, [pc, #740]	; (8004994 <USB_DeactivateEndpoint+0x374>)
 80046ae:	430a      	orrs	r2, r1
 80046b0:	b292      	uxth	r2, r2
 80046b2:	801a      	strh	r2, [r3, #0]
 80046b4:	e163      	b.n	800497e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	18d2      	adds	r2, r2, r3
 80046c0:	2112      	movs	r1, #18
 80046c2:	187b      	adds	r3, r7, r1
 80046c4:	8812      	ldrh	r2, [r2, #0]
 80046c6:	801a      	strh	r2, [r3, #0]
 80046c8:	187b      	adds	r3, r7, r1
 80046ca:	881a      	ldrh	r2, [r3, #0]
 80046cc:	2380      	movs	r3, #128	; 0x80
 80046ce:	01db      	lsls	r3, r3, #7
 80046d0:	4013      	ands	r3, r2
 80046d2:	d016      	beq.n	8004702 <USB_DeactivateEndpoint+0xe2>
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	18d3      	adds	r3, r2, r3
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	2010      	movs	r0, #16
 80046e4:	183b      	adds	r3, r7, r0
 80046e6:	49a8      	ldr	r1, [pc, #672]	; (8004988 <USB_DeactivateEndpoint+0x368>)
 80046e8:	400a      	ands	r2, r1
 80046ea:	801a      	strh	r2, [r3, #0]
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	18d3      	adds	r3, r2, r3
 80046f6:	183a      	adds	r2, r7, r0
 80046f8:	8812      	ldrh	r2, [r2, #0]
 80046fa:	49a7      	ldr	r1, [pc, #668]	; (8004998 <USB_DeactivateEndpoint+0x378>)
 80046fc:	430a      	orrs	r2, r1
 80046fe:	b292      	uxth	r2, r2
 8004700:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	18d3      	adds	r3, r2, r3
 800470c:	881b      	ldrh	r3, [r3, #0]
 800470e:	b29a      	uxth	r2, r3
 8004710:	200e      	movs	r0, #14
 8004712:	183b      	adds	r3, r7, r0
 8004714:	49a1      	ldr	r1, [pc, #644]	; (800499c <USB_DeactivateEndpoint+0x37c>)
 8004716:	400a      	ands	r2, r1
 8004718:	801a      	strh	r2, [r3, #0]
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	18d3      	adds	r3, r2, r3
 8004724:	183a      	adds	r2, r7, r0
 8004726:	8812      	ldrh	r2, [r2, #0]
 8004728:	499a      	ldr	r1, [pc, #616]	; (8004994 <USB_DeactivateEndpoint+0x374>)
 800472a:	430a      	orrs	r2, r1
 800472c:	b292      	uxth	r2, r2
 800472e:	801a      	strh	r2, [r3, #0]
 8004730:	e125      	b.n	800497e <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	785b      	ldrb	r3, [r3, #1]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d000      	beq.n	800473c <USB_DeactivateEndpoint+0x11c>
 800473a:	e090      	b.n	800485e <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	18d2      	adds	r2, r2, r3
 8004746:	2120      	movs	r1, #32
 8004748:	187b      	adds	r3, r7, r1
 800474a:	8812      	ldrh	r2, [r2, #0]
 800474c:	801a      	strh	r2, [r3, #0]
 800474e:	187b      	adds	r3, r7, r1
 8004750:	881a      	ldrh	r2, [r3, #0]
 8004752:	2380      	movs	r3, #128	; 0x80
 8004754:	01db      	lsls	r3, r3, #7
 8004756:	4013      	ands	r3, r2
 8004758:	d016      	beq.n	8004788 <USB_DeactivateEndpoint+0x168>
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	18d3      	adds	r3, r2, r3
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	b29a      	uxth	r2, r3
 8004768:	201e      	movs	r0, #30
 800476a:	183b      	adds	r3, r7, r0
 800476c:	4986      	ldr	r1, [pc, #536]	; (8004988 <USB_DeactivateEndpoint+0x368>)
 800476e:	400a      	ands	r2, r1
 8004770:	801a      	strh	r2, [r3, #0]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	18d3      	adds	r3, r2, r3
 800477c:	183a      	adds	r2, r7, r0
 800477e:	8812      	ldrh	r2, [r2, #0]
 8004780:	4985      	ldr	r1, [pc, #532]	; (8004998 <USB_DeactivateEndpoint+0x378>)
 8004782:	430a      	orrs	r2, r1
 8004784:	b292      	uxth	r2, r2
 8004786:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	18d2      	adds	r2, r2, r3
 8004792:	211c      	movs	r1, #28
 8004794:	187b      	adds	r3, r7, r1
 8004796:	8812      	ldrh	r2, [r2, #0]
 8004798:	801a      	strh	r2, [r3, #0]
 800479a:	187b      	adds	r3, r7, r1
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	2240      	movs	r2, #64	; 0x40
 80047a0:	4013      	ands	r3, r2
 80047a2:	d016      	beq.n	80047d2 <USB_DeactivateEndpoint+0x1b2>
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	18d3      	adds	r3, r2, r3
 80047ae:	881b      	ldrh	r3, [r3, #0]
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	201a      	movs	r0, #26
 80047b4:	183b      	adds	r3, r7, r0
 80047b6:	4974      	ldr	r1, [pc, #464]	; (8004988 <USB_DeactivateEndpoint+0x368>)
 80047b8:	400a      	ands	r2, r1
 80047ba:	801a      	strh	r2, [r3, #0]
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	18d3      	adds	r3, r2, r3
 80047c6:	183a      	adds	r2, r7, r0
 80047c8:	8812      	ldrh	r2, [r2, #0]
 80047ca:	4970      	ldr	r1, [pc, #448]	; (800498c <USB_DeactivateEndpoint+0x36c>)
 80047cc:	430a      	orrs	r2, r1
 80047ce:	b292      	uxth	r2, r2
 80047d0:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	18d3      	adds	r3, r2, r3
 80047dc:	881b      	ldrh	r3, [r3, #0]
 80047de:	b29a      	uxth	r2, r3
 80047e0:	2018      	movs	r0, #24
 80047e2:	183b      	adds	r3, r7, r0
 80047e4:	4968      	ldr	r1, [pc, #416]	; (8004988 <USB_DeactivateEndpoint+0x368>)
 80047e6:	400a      	ands	r2, r1
 80047e8:	801a      	strh	r2, [r3, #0]
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	18d3      	adds	r3, r2, r3
 80047f4:	183a      	adds	r2, r7, r0
 80047f6:	8812      	ldrh	r2, [r2, #0]
 80047f8:	4964      	ldr	r1, [pc, #400]	; (800498c <USB_DeactivateEndpoint+0x36c>)
 80047fa:	430a      	orrs	r2, r1
 80047fc:	b292      	uxth	r2, r2
 80047fe:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	18d3      	adds	r3, r2, r3
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	b29a      	uxth	r2, r3
 800480e:	2016      	movs	r0, #22
 8004810:	183b      	adds	r3, r7, r0
 8004812:	4962      	ldr	r1, [pc, #392]	; (800499c <USB_DeactivateEndpoint+0x37c>)
 8004814:	400a      	ands	r2, r1
 8004816:	801a      	strh	r2, [r3, #0]
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	18d3      	adds	r3, r2, r3
 8004822:	183a      	adds	r2, r7, r0
 8004824:	8812      	ldrh	r2, [r2, #0]
 8004826:	495b      	ldr	r1, [pc, #364]	; (8004994 <USB_DeactivateEndpoint+0x374>)
 8004828:	430a      	orrs	r2, r1
 800482a:	b292      	uxth	r2, r2
 800482c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	18d3      	adds	r3, r2, r3
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	b29a      	uxth	r2, r3
 800483c:	2014      	movs	r0, #20
 800483e:	183b      	adds	r3, r7, r0
 8004840:	4953      	ldr	r1, [pc, #332]	; (8004990 <USB_DeactivateEndpoint+0x370>)
 8004842:	400a      	ands	r2, r1
 8004844:	801a      	strh	r2, [r3, #0]
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	18d3      	adds	r3, r2, r3
 8004850:	183a      	adds	r2, r7, r0
 8004852:	8812      	ldrh	r2, [r2, #0]
 8004854:	494f      	ldr	r1, [pc, #316]	; (8004994 <USB_DeactivateEndpoint+0x374>)
 8004856:	430a      	orrs	r2, r1
 8004858:	b292      	uxth	r2, r2
 800485a:	801a      	strh	r2, [r3, #0]
 800485c:	e08f      	b.n	800497e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	18d2      	adds	r2, r2, r3
 8004868:	212e      	movs	r1, #46	; 0x2e
 800486a:	187b      	adds	r3, r7, r1
 800486c:	8812      	ldrh	r2, [r2, #0]
 800486e:	801a      	strh	r2, [r3, #0]
 8004870:	187b      	adds	r3, r7, r1
 8004872:	881a      	ldrh	r2, [r3, #0]
 8004874:	2380      	movs	r3, #128	; 0x80
 8004876:	01db      	lsls	r3, r3, #7
 8004878:	4013      	ands	r3, r2
 800487a:	d016      	beq.n	80048aa <USB_DeactivateEndpoint+0x28a>
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	18d3      	adds	r3, r2, r3
 8004886:	881b      	ldrh	r3, [r3, #0]
 8004888:	b29a      	uxth	r2, r3
 800488a:	202c      	movs	r0, #44	; 0x2c
 800488c:	183b      	adds	r3, r7, r0
 800488e:	493e      	ldr	r1, [pc, #248]	; (8004988 <USB_DeactivateEndpoint+0x368>)
 8004890:	400a      	ands	r2, r1
 8004892:	801a      	strh	r2, [r3, #0]
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	18d3      	adds	r3, r2, r3
 800489e:	183a      	adds	r2, r7, r0
 80048a0:	8812      	ldrh	r2, [r2, #0]
 80048a2:	493d      	ldr	r1, [pc, #244]	; (8004998 <USB_DeactivateEndpoint+0x378>)
 80048a4:	430a      	orrs	r2, r1
 80048a6:	b292      	uxth	r2, r2
 80048a8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	18d2      	adds	r2, r2, r3
 80048b4:	212a      	movs	r1, #42	; 0x2a
 80048b6:	187b      	adds	r3, r7, r1
 80048b8:	8812      	ldrh	r2, [r2, #0]
 80048ba:	801a      	strh	r2, [r3, #0]
 80048bc:	187b      	adds	r3, r7, r1
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	2240      	movs	r2, #64	; 0x40
 80048c2:	4013      	ands	r3, r2
 80048c4:	d016      	beq.n	80048f4 <USB_DeactivateEndpoint+0x2d4>
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	18d3      	adds	r3, r2, r3
 80048d0:	881b      	ldrh	r3, [r3, #0]
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	2028      	movs	r0, #40	; 0x28
 80048d6:	183b      	adds	r3, r7, r0
 80048d8:	492b      	ldr	r1, [pc, #172]	; (8004988 <USB_DeactivateEndpoint+0x368>)
 80048da:	400a      	ands	r2, r1
 80048dc:	801a      	strh	r2, [r3, #0]
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	18d3      	adds	r3, r2, r3
 80048e8:	183a      	adds	r2, r7, r0
 80048ea:	8812      	ldrh	r2, [r2, #0]
 80048ec:	4927      	ldr	r1, [pc, #156]	; (800498c <USB_DeactivateEndpoint+0x36c>)
 80048ee:	430a      	orrs	r2, r1
 80048f0:	b292      	uxth	r2, r2
 80048f2:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	18d3      	adds	r3, r2, r3
 80048fe:	881b      	ldrh	r3, [r3, #0]
 8004900:	b29a      	uxth	r2, r3
 8004902:	2026      	movs	r0, #38	; 0x26
 8004904:	183b      	adds	r3, r7, r0
 8004906:	4920      	ldr	r1, [pc, #128]	; (8004988 <USB_DeactivateEndpoint+0x368>)
 8004908:	400a      	ands	r2, r1
 800490a:	801a      	strh	r2, [r3, #0]
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	18d3      	adds	r3, r2, r3
 8004916:	183a      	adds	r2, r7, r0
 8004918:	8812      	ldrh	r2, [r2, #0]
 800491a:	491f      	ldr	r1, [pc, #124]	; (8004998 <USB_DeactivateEndpoint+0x378>)
 800491c:	430a      	orrs	r2, r1
 800491e:	b292      	uxth	r2, r2
 8004920:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	18d3      	adds	r3, r2, r3
 800492c:	881b      	ldrh	r3, [r3, #0]
 800492e:	b29a      	uxth	r2, r3
 8004930:	2024      	movs	r0, #36	; 0x24
 8004932:	183b      	adds	r3, r7, r0
 8004934:	4916      	ldr	r1, [pc, #88]	; (8004990 <USB_DeactivateEndpoint+0x370>)
 8004936:	400a      	ands	r2, r1
 8004938:	801a      	strh	r2, [r3, #0]
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	18d3      	adds	r3, r2, r3
 8004944:	183a      	adds	r2, r7, r0
 8004946:	8812      	ldrh	r2, [r2, #0]
 8004948:	4912      	ldr	r1, [pc, #72]	; (8004994 <USB_DeactivateEndpoint+0x374>)
 800494a:	430a      	orrs	r2, r1
 800494c:	b292      	uxth	r2, r2
 800494e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	18d3      	adds	r3, r2, r3
 800495a:	881b      	ldrh	r3, [r3, #0]
 800495c:	b29a      	uxth	r2, r3
 800495e:	2022      	movs	r0, #34	; 0x22
 8004960:	183b      	adds	r3, r7, r0
 8004962:	490e      	ldr	r1, [pc, #56]	; (800499c <USB_DeactivateEndpoint+0x37c>)
 8004964:	400a      	ands	r2, r1
 8004966:	801a      	strh	r2, [r3, #0]
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	18d3      	adds	r3, r2, r3
 8004972:	183a      	adds	r2, r7, r0
 8004974:	8812      	ldrh	r2, [r2, #0]
 8004976:	4907      	ldr	r1, [pc, #28]	; (8004994 <USB_DeactivateEndpoint+0x374>)
 8004978:	430a      	orrs	r2, r1
 800497a:	b292      	uxth	r2, r2
 800497c:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	0018      	movs	r0, r3
 8004982:	46bd      	mov	sp, r7
 8004984:	b00c      	add	sp, #48	; 0x30
 8004986:	bd80      	pop	{r7, pc}
 8004988:	ffff8f8f 	.word	0xffff8f8f
 800498c:	ffff80c0 	.word	0xffff80c0
 8004990:	ffff8fbf 	.word	0xffff8fbf
 8004994:	ffff8080 	.word	0xffff8080
 8004998:	ffffc080 	.word	0xffffc080
 800499c:	ffffbf8f 	.word	0xffffbf8f

080049a0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049a0:	b5b0      	push	{r4, r5, r7, lr}
 80049a2:	b0c4      	sub	sp, #272	; 0x110
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	785b      	ldrb	r3, [r3, #1]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d001      	beq.n	80049b6 <USB_EPStartXfer+0x16>
 80049b2:	f000 fd63 	bl	800547c <USB_EPStartXfer+0xadc>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	699a      	ldr	r2, [r3, #24]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d906      	bls.n	80049d0 <USB_EPStartXfer+0x30>
    {
      len = ep->maxpacket;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	2286      	movs	r2, #134	; 0x86
 80049c8:	0052      	lsls	r2, r2, #1
 80049ca:	18ba      	adds	r2, r7, r2
 80049cc:	6013      	str	r3, [r2, #0]
 80049ce:	e005      	b.n	80049dc <USB_EPStartXfer+0x3c>
    }
    else
    {
      len = ep->xfer_len;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	2286      	movs	r2, #134	; 0x86
 80049d6:	0052      	lsls	r2, r2, #1
 80049d8:	18ba      	adds	r2, r7, r2
 80049da:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	7b1b      	ldrb	r3, [r3, #12]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d125      	bne.n	8004a30 <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	6959      	ldr	r1, [r3, #20]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	88da      	ldrh	r2, [r3, #6]
 80049ec:	2486      	movs	r4, #134	; 0x86
 80049ee:	0064      	lsls	r4, r4, #1
 80049f0:	193b      	adds	r3, r7, r4
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f001 fa62 	bl	8005ec0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	617b      	str	r3, [r7, #20]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2250      	movs	r2, #80	; 0x50
 8004a04:	5a9b      	ldrh	r3, [r3, r2]
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	001a      	movs	r2, r3
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	189b      	adds	r3, r3, r2
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	00da      	lsls	r2, r3, #3
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	18d3      	adds	r3, r2, r3
 8004a1a:	4ad4      	ldr	r2, [pc, #848]	; (8004d6c <USB_EPStartXfer+0x3cc>)
 8004a1c:	4694      	mov	ip, r2
 8004a1e:	4463      	add	r3, ip
 8004a20:	613b      	str	r3, [r7, #16]
 8004a22:	193b      	adds	r3, r7, r4
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	801a      	strh	r2, [r3, #0]
 8004a2c:	f000 fce4 	bl	80053f8 <USB_EPStartXfer+0xa58>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	78db      	ldrb	r3, [r3, #3]
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d000      	beq.n	8004a3a <USB_EPStartXfer+0x9a>
 8004a38:	e358      	b.n	80050ec <USB_EPStartXfer+0x74c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	6a1a      	ldr	r2, [r3, #32]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d800      	bhi.n	8004a48 <USB_EPStartXfer+0xa8>
 8004a46:	e2fe      	b.n	8005046 <USB_EPStartXfer+0x6a6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	18d3      	adds	r3, r2, r3
 8004a52:	881b      	ldrh	r3, [r3, #0]
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	205a      	movs	r0, #90	; 0x5a
 8004a58:	183b      	adds	r3, r7, r0
 8004a5a:	49c5      	ldr	r1, [pc, #788]	; (8004d70 <USB_EPStartXfer+0x3d0>)
 8004a5c:	400a      	ands	r2, r1
 8004a5e:	801a      	strh	r2, [r3, #0]
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	18d3      	adds	r3, r2, r3
 8004a6a:	183a      	adds	r2, r7, r0
 8004a6c:	8812      	ldrh	r2, [r2, #0]
 8004a6e:	49c1      	ldr	r1, [pc, #772]	; (8004d74 <USB_EPStartXfer+0x3d4>)
 8004a70:	430a      	orrs	r2, r1
 8004a72:	b292      	uxth	r2, r2
 8004a74:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	6a1a      	ldr	r2, [r3, #32]
 8004a7a:	2386      	movs	r3, #134	; 0x86
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	18fb      	adds	r3, r7, r3
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	1ad2      	subs	r2, r2, r3
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	18d3      	adds	r3, r2, r3
 8004a92:	881b      	ldrh	r3, [r3, #0]
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	001a      	movs	r2, r3
 8004a98:	2340      	movs	r3, #64	; 0x40
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	d100      	bne.n	8004aa0 <USB_EPStartXfer+0x100>
 8004a9e:	e171      	b.n	8004d84 <USB_EPStartXfer+0x3e4>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	785b      	ldrb	r3, [r3, #1]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d16c      	bne.n	8004b86 <USB_EPStartXfer+0x1e6>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2250      	movs	r2, #80	; 0x50
 8004ab4:	5a9b      	ldrh	r3, [r3, r2]
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	001a      	movs	r2, r3
 8004aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004abc:	189b      	adds	r3, r3, r2
 8004abe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	00da      	lsls	r2, r3, #3
 8004ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac8:	18d3      	adds	r3, r2, r3
 8004aca:	4aab      	ldr	r2, [pc, #684]	; (8004d78 <USB_EPStartXfer+0x3d8>)
 8004acc:	4694      	mov	ip, r2
 8004ace:	4463      	add	r3, ip
 8004ad0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ad2:	2386      	movs	r3, #134	; 0x86
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	18fb      	adds	r3, r7, r3
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d110      	bne.n	8004b00 <USB_EPStartXfer+0x160>
 8004ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	4aa5      	ldr	r2, [pc, #660]	; (8004d7c <USB_EPStartXfer+0x3dc>)
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aec:	801a      	strh	r2, [r3, #0]
 8004aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	4aa2      	ldr	r2, [pc, #648]	; (8004d80 <USB_EPStartXfer+0x3e0>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afc:	801a      	strh	r2, [r3, #0]
 8004afe:	e05e      	b.n	8004bbe <USB_EPStartXfer+0x21e>
 8004b00:	2386      	movs	r3, #134	; 0x86
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	18fb      	adds	r3, r7, r3
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b3e      	cmp	r3, #62	; 0x3e
 8004b0a:	d81c      	bhi.n	8004b46 <USB_EPStartXfer+0x1a6>
 8004b0c:	2286      	movs	r2, #134	; 0x86
 8004b0e:	0052      	lsls	r2, r2, #1
 8004b10:	18bb      	adds	r3, r7, r2
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	085b      	lsrs	r3, r3, #1
 8004b16:	1d79      	adds	r1, r7, #5
 8004b18:	31ff      	adds	r1, #255	; 0xff
 8004b1a:	600b      	str	r3, [r1, #0]
 8004b1c:	18bb      	adds	r3, r7, r2
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2201      	movs	r2, #1
 8004b22:	4013      	ands	r3, r2
 8004b24:	d006      	beq.n	8004b34 <USB_EPStartXfer+0x194>
 8004b26:	1d7b      	adds	r3, r7, #5
 8004b28:	33ff      	adds	r3, #255	; 0xff
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	1d7a      	adds	r2, r7, #5
 8004b30:	32ff      	adds	r2, #255	; 0xff
 8004b32:	6013      	str	r3, [r2, #0]
 8004b34:	1d7b      	adds	r3, r7, #5
 8004b36:	33ff      	adds	r3, #255	; 0xff
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	029b      	lsls	r3, r3, #10
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b42:	801a      	strh	r2, [r3, #0]
 8004b44:	e03b      	b.n	8004bbe <USB_EPStartXfer+0x21e>
 8004b46:	2286      	movs	r2, #134	; 0x86
 8004b48:	0052      	lsls	r2, r2, #1
 8004b4a:	18bb      	adds	r3, r7, r2
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	095b      	lsrs	r3, r3, #5
 8004b50:	1d79      	adds	r1, r7, #5
 8004b52:	31ff      	adds	r1, #255	; 0xff
 8004b54:	600b      	str	r3, [r1, #0]
 8004b56:	18bb      	adds	r3, r7, r2
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	221f      	movs	r2, #31
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	d106      	bne.n	8004b6e <USB_EPStartXfer+0x1ce>
 8004b60:	1d7b      	adds	r3, r7, #5
 8004b62:	33ff      	adds	r3, #255	; 0xff
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	3b01      	subs	r3, #1
 8004b68:	1d7a      	adds	r2, r7, #5
 8004b6a:	32ff      	adds	r2, #255	; 0xff
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	1d7b      	adds	r3, r7, #5
 8004b70:	33ff      	adds	r3, #255	; 0xff
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	029b      	lsls	r3, r3, #10
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	4a81      	ldr	r2, [pc, #516]	; (8004d80 <USB_EPStartXfer+0x3e0>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b82:	801a      	strh	r2, [r3, #0]
 8004b84:	e01b      	b.n	8004bbe <USB_EPStartXfer+0x21e>
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	785b      	ldrb	r3, [r3, #1]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d117      	bne.n	8004bbe <USB_EPStartXfer+0x21e>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2250      	movs	r2, #80	; 0x50
 8004b92:	5a9b      	ldrh	r3, [r3, r2]
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	001a      	movs	r2, r3
 8004b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b9a:	189b      	adds	r3, r3, r2
 8004b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	00da      	lsls	r2, r3, #3
 8004ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba6:	18d3      	adds	r3, r2, r3
 8004ba8:	4a73      	ldr	r2, [pc, #460]	; (8004d78 <USB_EPStartXfer+0x3d8>)
 8004baa:	4694      	mov	ip, r2
 8004bac:	4463      	add	r3, ip
 8004bae:	633b      	str	r3, [r7, #48]	; 0x30
 8004bb0:	2386      	movs	r3, #134	; 0x86
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	18fb      	adds	r3, r7, r3
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004bbe:	2085      	movs	r0, #133	; 0x85
 8004bc0:	0040      	lsls	r0, r0, #1
 8004bc2:	183b      	adds	r3, r7, r0
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	8952      	ldrh	r2, [r2, #10]
 8004bc8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	6959      	ldr	r1, [r3, #20]
 8004bce:	2586      	movs	r5, #134	; 0x86
 8004bd0:	006d      	lsls	r5, r5, #1
 8004bd2:	197b      	adds	r3, r7, r5
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	b29c      	uxth	r4, r3
 8004bd8:	183b      	adds	r3, r7, r0
 8004bda:	881a      	ldrh	r2, [r3, #0]
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	0023      	movs	r3, r4
 8004be0:	f001 f96e 	bl	8005ec0 <USB_WritePMA>
            ep->xfer_buff += len;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	695a      	ldr	r2, [r3, #20]
 8004be8:	197b      	adds	r3, r7, r5
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	18d2      	adds	r2, r2, r3
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	6a1a      	ldr	r2, [r3, #32]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d909      	bls.n	8004c12 <USB_EPStartXfer+0x272>
            {
              ep->xfer_len_db -= len;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	6a1a      	ldr	r2, [r3, #32]
 8004c02:	2386      	movs	r3, #134	; 0x86
 8004c04:	005b      	lsls	r3, r3, #1
 8004c06:	18fb      	adds	r3, r7, r3
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	1ad2      	subs	r2, r2, r3
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	621a      	str	r2, [r3, #32]
 8004c10:	e008      	b.n	8004c24 <USB_EPStartXfer+0x284>
            }
            else
            {
              len = ep->xfer_len_db;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	2286      	movs	r2, #134	; 0x86
 8004c18:	0052      	lsls	r2, r2, #1
 8004c1a:	18ba      	adds	r2, r7, r2
 8004c1c:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2200      	movs	r2, #0
 8004c22:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	785b      	ldrb	r3, [r3, #1]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d16c      	bne.n	8004d06 <USB_EPStartXfer+0x366>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	61fb      	str	r3, [r7, #28]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2250      	movs	r2, #80	; 0x50
 8004c34:	5a9b      	ldrh	r3, [r3, r2]
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	001a      	movs	r2, r3
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	189b      	adds	r3, r3, r2
 8004c3e:	61fb      	str	r3, [r7, #28]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	00da      	lsls	r2, r3, #3
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	18d3      	adds	r3, r2, r3
 8004c4a:	4a48      	ldr	r2, [pc, #288]	; (8004d6c <USB_EPStartXfer+0x3cc>)
 8004c4c:	4694      	mov	ip, r2
 8004c4e:	4463      	add	r3, ip
 8004c50:	61bb      	str	r3, [r7, #24]
 8004c52:	2386      	movs	r3, #134	; 0x86
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	18fb      	adds	r3, r7, r3
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d110      	bne.n	8004c80 <USB_EPStartXfer+0x2e0>
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	4a45      	ldr	r2, [pc, #276]	; (8004d7c <USB_EPStartXfer+0x3dc>)
 8004c66:	4013      	ands	r3, r2
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	801a      	strh	r2, [r3, #0]
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	881b      	ldrh	r3, [r3, #0]
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	4a42      	ldr	r2, [pc, #264]	; (8004d80 <USB_EPStartXfer+0x3e0>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	801a      	strh	r2, [r3, #0]
 8004c7e:	e060      	b.n	8004d42 <USB_EPStartXfer+0x3a2>
 8004c80:	2386      	movs	r3, #134	; 0x86
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	18fb      	adds	r3, r7, r3
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b3e      	cmp	r3, #62	; 0x3e
 8004c8a:	d81c      	bhi.n	8004cc6 <USB_EPStartXfer+0x326>
 8004c8c:	2286      	movs	r2, #134	; 0x86
 8004c8e:	0052      	lsls	r2, r2, #1
 8004c90:	18bb      	adds	r3, r7, r2
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	085b      	lsrs	r3, r3, #1
 8004c96:	1c79      	adds	r1, r7, #1
 8004c98:	31ff      	adds	r1, #255	; 0xff
 8004c9a:	600b      	str	r3, [r1, #0]
 8004c9c:	18bb      	adds	r3, r7, r2
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	d006      	beq.n	8004cb4 <USB_EPStartXfer+0x314>
 8004ca6:	1c7b      	adds	r3, r7, #1
 8004ca8:	33ff      	adds	r3, #255	; 0xff
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	3301      	adds	r3, #1
 8004cae:	1c7a      	adds	r2, r7, #1
 8004cb0:	32ff      	adds	r2, #255	; 0xff
 8004cb2:	6013      	str	r3, [r2, #0]
 8004cb4:	1c7b      	adds	r3, r7, #1
 8004cb6:	33ff      	adds	r3, #255	; 0xff
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	029b      	lsls	r3, r3, #10
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	801a      	strh	r2, [r3, #0]
 8004cc4:	e03d      	b.n	8004d42 <USB_EPStartXfer+0x3a2>
 8004cc6:	2286      	movs	r2, #134	; 0x86
 8004cc8:	0052      	lsls	r2, r2, #1
 8004cca:	18bb      	adds	r3, r7, r2
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	095b      	lsrs	r3, r3, #5
 8004cd0:	1c79      	adds	r1, r7, #1
 8004cd2:	31ff      	adds	r1, #255	; 0xff
 8004cd4:	600b      	str	r3, [r1, #0]
 8004cd6:	18bb      	adds	r3, r7, r2
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	221f      	movs	r2, #31
 8004cdc:	4013      	ands	r3, r2
 8004cde:	d106      	bne.n	8004cee <USB_EPStartXfer+0x34e>
 8004ce0:	1c7b      	adds	r3, r7, #1
 8004ce2:	33ff      	adds	r3, #255	; 0xff
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	1c7a      	adds	r2, r7, #1
 8004cea:	32ff      	adds	r2, #255	; 0xff
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	1c7b      	adds	r3, r7, #1
 8004cf0:	33ff      	adds	r3, #255	; 0xff
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	029b      	lsls	r3, r3, #10
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	4a21      	ldr	r2, [pc, #132]	; (8004d80 <USB_EPStartXfer+0x3e0>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	801a      	strh	r2, [r3, #0]
 8004d04:	e01d      	b.n	8004d42 <USB_EPStartXfer+0x3a2>
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	785b      	ldrb	r3, [r3, #1]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d119      	bne.n	8004d42 <USB_EPStartXfer+0x3a2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	627b      	str	r3, [r7, #36]	; 0x24
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2250      	movs	r2, #80	; 0x50
 8004d16:	5a9b      	ldrh	r3, [r3, r2]
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	001a      	movs	r2, r3
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	189b      	adds	r3, r3, r2
 8004d20:	627b      	str	r3, [r7, #36]	; 0x24
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	00da      	lsls	r2, r3, #3
 8004d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2a:	18d3      	adds	r3, r2, r3
 8004d2c:	4a0f      	ldr	r2, [pc, #60]	; (8004d6c <USB_EPStartXfer+0x3cc>)
 8004d2e:	4694      	mov	ip, r2
 8004d30:	4463      	add	r3, ip
 8004d32:	623b      	str	r3, [r7, #32]
 8004d34:	2386      	movs	r3, #134	; 0x86
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	18fb      	adds	r3, r7, r3
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	6a3b      	ldr	r3, [r7, #32]
 8004d40:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004d42:	2085      	movs	r0, #133	; 0x85
 8004d44:	0040      	lsls	r0, r0, #1
 8004d46:	183b      	adds	r3, r7, r0
 8004d48:	683a      	ldr	r2, [r7, #0]
 8004d4a:	8912      	ldrh	r2, [r2, #8]
 8004d4c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	6959      	ldr	r1, [r3, #20]
 8004d52:	2386      	movs	r3, #134	; 0x86
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	18fb      	adds	r3, r7, r3
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	b29c      	uxth	r4, r3
 8004d5c:	183b      	adds	r3, r7, r0
 8004d5e:	881a      	ldrh	r2, [r3, #0]
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	0023      	movs	r3, r4
 8004d64:	f001 f8ac 	bl	8005ec0 <USB_WritePMA>
 8004d68:	e346      	b.n	80053f8 <USB_EPStartXfer+0xa58>
 8004d6a:	46c0      	nop			; (mov r8, r8)
 8004d6c:	00000402 	.word	0x00000402
 8004d70:	ffff8f8f 	.word	0xffff8f8f
 8004d74:	ffff8180 	.word	0xffff8180
 8004d78:	00000406 	.word	0x00000406
 8004d7c:	ffff83ff 	.word	0xffff83ff
 8004d80:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	785b      	ldrb	r3, [r3, #1]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d16a      	bne.n	8004e62 <USB_EPStartXfer+0x4c2>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2250      	movs	r2, #80	; 0x50
 8004d94:	5a9b      	ldrh	r3, [r3, r2]
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	001a      	movs	r2, r3
 8004d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d9c:	189b      	adds	r3, r3, r2
 8004d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	00da      	lsls	r2, r3, #3
 8004da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da8:	18d3      	adds	r3, r2, r3
 8004daa:	4aca      	ldr	r2, [pc, #808]	; (80050d4 <USB_EPStartXfer+0x734>)
 8004dac:	4694      	mov	ip, r2
 8004dae:	4463      	add	r3, ip
 8004db0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004db2:	2386      	movs	r3, #134	; 0x86
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	18fb      	adds	r3, r7, r3
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d110      	bne.n	8004de0 <USB_EPStartXfer+0x440>
 8004dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dc0:	881b      	ldrh	r3, [r3, #0]
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	4ac4      	ldr	r2, [pc, #784]	; (80050d8 <USB_EPStartXfer+0x738>)
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dcc:	801a      	strh	r2, [r3, #0]
 8004dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	4ac1      	ldr	r2, [pc, #772]	; (80050dc <USB_EPStartXfer+0x73c>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ddc:	801a      	strh	r2, [r3, #0]
 8004dde:	e05e      	b.n	8004e9e <USB_EPStartXfer+0x4fe>
 8004de0:	2386      	movs	r3, #134	; 0x86
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	18fb      	adds	r3, r7, r3
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2b3e      	cmp	r3, #62	; 0x3e
 8004dea:	d81b      	bhi.n	8004e24 <USB_EPStartXfer+0x484>
 8004dec:	2286      	movs	r2, #134	; 0x86
 8004dee:	0052      	lsls	r2, r2, #1
 8004df0:	18bb      	adds	r3, r7, r2
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	085b      	lsrs	r3, r3, #1
 8004df6:	21fc      	movs	r1, #252	; 0xfc
 8004df8:	1879      	adds	r1, r7, r1
 8004dfa:	600b      	str	r3, [r1, #0]
 8004dfc:	18bb      	adds	r3, r7, r2
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2201      	movs	r2, #1
 8004e02:	4013      	ands	r3, r2
 8004e04:	d005      	beq.n	8004e12 <USB_EPStartXfer+0x472>
 8004e06:	22fc      	movs	r2, #252	; 0xfc
 8004e08:	18bb      	adds	r3, r7, r2
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	18ba      	adds	r2, r7, r2
 8004e10:	6013      	str	r3, [r2, #0]
 8004e12:	23fc      	movs	r3, #252	; 0xfc
 8004e14:	18fb      	adds	r3, r7, r3
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	029b      	lsls	r3, r3, #10
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e20:	801a      	strh	r2, [r3, #0]
 8004e22:	e03c      	b.n	8004e9e <USB_EPStartXfer+0x4fe>
 8004e24:	2286      	movs	r2, #134	; 0x86
 8004e26:	0052      	lsls	r2, r2, #1
 8004e28:	18bb      	adds	r3, r7, r2
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	095b      	lsrs	r3, r3, #5
 8004e2e:	21fc      	movs	r1, #252	; 0xfc
 8004e30:	1879      	adds	r1, r7, r1
 8004e32:	600b      	str	r3, [r1, #0]
 8004e34:	18bb      	adds	r3, r7, r2
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	221f      	movs	r2, #31
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	d105      	bne.n	8004e4a <USB_EPStartXfer+0x4aa>
 8004e3e:	22fc      	movs	r2, #252	; 0xfc
 8004e40:	18bb      	adds	r3, r7, r2
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3b01      	subs	r3, #1
 8004e46:	18ba      	adds	r2, r7, r2
 8004e48:	6013      	str	r3, [r2, #0]
 8004e4a:	23fc      	movs	r3, #252	; 0xfc
 8004e4c:	18fb      	adds	r3, r7, r3
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	029b      	lsls	r3, r3, #10
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	4aa1      	ldr	r2, [pc, #644]	; (80050dc <USB_EPStartXfer+0x73c>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e5e:	801a      	strh	r2, [r3, #0]
 8004e60:	e01d      	b.n	8004e9e <USB_EPStartXfer+0x4fe>
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	785b      	ldrb	r3, [r3, #1]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d119      	bne.n	8004e9e <USB_EPStartXfer+0x4fe>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	657b      	str	r3, [r7, #84]	; 0x54
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2250      	movs	r2, #80	; 0x50
 8004e72:	5a9b      	ldrh	r3, [r3, r2]
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	001a      	movs	r2, r3
 8004e78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e7a:	189b      	adds	r3, r3, r2
 8004e7c:	657b      	str	r3, [r7, #84]	; 0x54
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	00da      	lsls	r2, r3, #3
 8004e84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e86:	18d3      	adds	r3, r2, r3
 8004e88:	4a92      	ldr	r2, [pc, #584]	; (80050d4 <USB_EPStartXfer+0x734>)
 8004e8a:	4694      	mov	ip, r2
 8004e8c:	4463      	add	r3, ip
 8004e8e:	653b      	str	r3, [r7, #80]	; 0x50
 8004e90:	2386      	movs	r3, #134	; 0x86
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	18fb      	adds	r3, r7, r3
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e9c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004e9e:	2085      	movs	r0, #133	; 0x85
 8004ea0:	0040      	lsls	r0, r0, #1
 8004ea2:	183b      	adds	r3, r7, r0
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	8912      	ldrh	r2, [r2, #8]
 8004ea8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	6959      	ldr	r1, [r3, #20]
 8004eae:	2586      	movs	r5, #134	; 0x86
 8004eb0:	006d      	lsls	r5, r5, #1
 8004eb2:	197b      	adds	r3, r7, r5
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	b29c      	uxth	r4, r3
 8004eb8:	183b      	adds	r3, r7, r0
 8004eba:	881a      	ldrh	r2, [r3, #0]
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	0023      	movs	r3, r4
 8004ec0:	f000 fffe 	bl	8005ec0 <USB_WritePMA>
            ep->xfer_buff += len;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	695a      	ldr	r2, [r3, #20]
 8004ec8:	197b      	adds	r3, r7, r5
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	18d2      	adds	r2, r2, r3
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	6a1a      	ldr	r2, [r3, #32]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d909      	bls.n	8004ef2 <USB_EPStartXfer+0x552>
            {
              ep->xfer_len_db -= len;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	6a1a      	ldr	r2, [r3, #32]
 8004ee2:	2386      	movs	r3, #134	; 0x86
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	18fb      	adds	r3, r7, r3
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	1ad2      	subs	r2, r2, r3
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	621a      	str	r2, [r3, #32]
 8004ef0:	e008      	b.n	8004f04 <USB_EPStartXfer+0x564>
            }
            else
            {
              len = ep->xfer_len_db;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	2286      	movs	r2, #134	; 0x86
 8004ef8:	0052      	lsls	r2, r2, #1
 8004efa:	18ba      	adds	r2, r7, r2
 8004efc:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	2200      	movs	r2, #0
 8004f02:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	647b      	str	r3, [r7, #68]	; 0x44
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	785b      	ldrb	r3, [r3, #1]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d16a      	bne.n	8004fe6 <USB_EPStartXfer+0x646>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2250      	movs	r2, #80	; 0x50
 8004f18:	5a9b      	ldrh	r3, [r3, r2]
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	001a      	movs	r2, r3
 8004f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f20:	189b      	adds	r3, r3, r2
 8004f22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	00da      	lsls	r2, r3, #3
 8004f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f2c:	18d3      	adds	r3, r2, r3
 8004f2e:	4a6c      	ldr	r2, [pc, #432]	; (80050e0 <USB_EPStartXfer+0x740>)
 8004f30:	4694      	mov	ip, r2
 8004f32:	4463      	add	r3, ip
 8004f34:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f36:	2386      	movs	r3, #134	; 0x86
 8004f38:	005b      	lsls	r3, r3, #1
 8004f3a:	18fb      	adds	r3, r7, r3
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d110      	bne.n	8004f64 <USB_EPStartXfer+0x5c4>
 8004f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	4a63      	ldr	r2, [pc, #396]	; (80050d8 <USB_EPStartXfer+0x738>)
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f50:	801a      	strh	r2, [r3, #0]
 8004f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f54:	881b      	ldrh	r3, [r3, #0]
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	4a60      	ldr	r2, [pc, #384]	; (80050dc <USB_EPStartXfer+0x73c>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f60:	801a      	strh	r2, [r3, #0]
 8004f62:	e05c      	b.n	800501e <USB_EPStartXfer+0x67e>
 8004f64:	2386      	movs	r3, #134	; 0x86
 8004f66:	005b      	lsls	r3, r3, #1
 8004f68:	18fb      	adds	r3, r7, r3
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b3e      	cmp	r3, #62	; 0x3e
 8004f6e:	d81b      	bhi.n	8004fa8 <USB_EPStartXfer+0x608>
 8004f70:	2286      	movs	r2, #134	; 0x86
 8004f72:	0052      	lsls	r2, r2, #1
 8004f74:	18bb      	adds	r3, r7, r2
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	085b      	lsrs	r3, r3, #1
 8004f7a:	21f8      	movs	r1, #248	; 0xf8
 8004f7c:	1879      	adds	r1, r7, r1
 8004f7e:	600b      	str	r3, [r1, #0]
 8004f80:	18bb      	adds	r3, r7, r2
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2201      	movs	r2, #1
 8004f86:	4013      	ands	r3, r2
 8004f88:	d005      	beq.n	8004f96 <USB_EPStartXfer+0x5f6>
 8004f8a:	22f8      	movs	r2, #248	; 0xf8
 8004f8c:	18bb      	adds	r3, r7, r2
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3301      	adds	r3, #1
 8004f92:	18ba      	adds	r2, r7, r2
 8004f94:	6013      	str	r3, [r2, #0]
 8004f96:	23f8      	movs	r3, #248	; 0xf8
 8004f98:	18fb      	adds	r3, r7, r3
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	029b      	lsls	r3, r3, #10
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa4:	801a      	strh	r2, [r3, #0]
 8004fa6:	e03a      	b.n	800501e <USB_EPStartXfer+0x67e>
 8004fa8:	2286      	movs	r2, #134	; 0x86
 8004faa:	0052      	lsls	r2, r2, #1
 8004fac:	18bb      	adds	r3, r7, r2
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	095b      	lsrs	r3, r3, #5
 8004fb2:	21f8      	movs	r1, #248	; 0xf8
 8004fb4:	1879      	adds	r1, r7, r1
 8004fb6:	600b      	str	r3, [r1, #0]
 8004fb8:	18bb      	adds	r3, r7, r2
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	221f      	movs	r2, #31
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	d105      	bne.n	8004fce <USB_EPStartXfer+0x62e>
 8004fc2:	22f8      	movs	r2, #248	; 0xf8
 8004fc4:	18bb      	adds	r3, r7, r2
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	18ba      	adds	r2, r7, r2
 8004fcc:	6013      	str	r3, [r2, #0]
 8004fce:	23f8      	movs	r3, #248	; 0xf8
 8004fd0:	18fb      	adds	r3, r7, r3
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	029b      	lsls	r3, r3, #10
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	4a40      	ldr	r2, [pc, #256]	; (80050dc <USB_EPStartXfer+0x73c>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe2:	801a      	strh	r2, [r3, #0]
 8004fe4:	e01b      	b.n	800501e <USB_EPStartXfer+0x67e>
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	785b      	ldrb	r3, [r3, #1]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d117      	bne.n	800501e <USB_EPStartXfer+0x67e>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2250      	movs	r2, #80	; 0x50
 8004ff2:	5a9b      	ldrh	r3, [r3, r2]
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	001a      	movs	r2, r3
 8004ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ffa:	189b      	adds	r3, r3, r2
 8004ffc:	647b      	str	r3, [r7, #68]	; 0x44
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	00da      	lsls	r2, r3, #3
 8005004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005006:	18d3      	adds	r3, r2, r3
 8005008:	4a35      	ldr	r2, [pc, #212]	; (80050e0 <USB_EPStartXfer+0x740>)
 800500a:	4694      	mov	ip, r2
 800500c:	4463      	add	r3, ip
 800500e:	643b      	str	r3, [r7, #64]	; 0x40
 8005010:	2386      	movs	r3, #134	; 0x86
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	18fb      	adds	r3, r7, r3
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	b29a      	uxth	r2, r3
 800501a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800501c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800501e:	2085      	movs	r0, #133	; 0x85
 8005020:	0040      	lsls	r0, r0, #1
 8005022:	183b      	adds	r3, r7, r0
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	8952      	ldrh	r2, [r2, #10]
 8005028:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	6959      	ldr	r1, [r3, #20]
 800502e:	2386      	movs	r3, #134	; 0x86
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	18fb      	adds	r3, r7, r3
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	b29c      	uxth	r4, r3
 8005038:	183b      	adds	r3, r7, r0
 800503a:	881a      	ldrh	r2, [r3, #0]
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	0023      	movs	r3, r4
 8005040:	f000 ff3e 	bl	8005ec0 <USB_WritePMA>
 8005044:	e1d8      	b.n	80053f8 <USB_EPStartXfer+0xa58>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	2086      	movs	r0, #134	; 0x86
 800504c:	0040      	lsls	r0, r0, #1
 800504e:	183a      	adds	r2, r7, r0
 8005050:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	18d3      	adds	r3, r2, r3
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	b29a      	uxth	r2, r3
 8005060:	2466      	movs	r4, #102	; 0x66
 8005062:	193b      	adds	r3, r7, r4
 8005064:	491f      	ldr	r1, [pc, #124]	; (80050e4 <USB_EPStartXfer+0x744>)
 8005066:	400a      	ands	r2, r1
 8005068:	801a      	strh	r2, [r3, #0]
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	18d3      	adds	r3, r2, r3
 8005074:	193a      	adds	r2, r7, r4
 8005076:	8812      	ldrh	r2, [r2, #0]
 8005078:	491b      	ldr	r1, [pc, #108]	; (80050e8 <USB_EPStartXfer+0x748>)
 800507a:	430a      	orrs	r2, r1
 800507c:	b292      	uxth	r2, r2
 800507e:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	663b      	str	r3, [r7, #96]	; 0x60
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2250      	movs	r2, #80	; 0x50
 8005088:	5a9b      	ldrh	r3, [r3, r2]
 800508a:	b29b      	uxth	r3, r3
 800508c:	001a      	movs	r2, r3
 800508e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005090:	189b      	adds	r3, r3, r2
 8005092:	663b      	str	r3, [r7, #96]	; 0x60
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	00da      	lsls	r2, r3, #3
 800509a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800509c:	18d3      	adds	r3, r2, r3
 800509e:	4a0d      	ldr	r2, [pc, #52]	; (80050d4 <USB_EPStartXfer+0x734>)
 80050a0:	4694      	mov	ip, r2
 80050a2:	4463      	add	r3, ip
 80050a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050a6:	183b      	adds	r3, r7, r0
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050ae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80050b0:	2585      	movs	r5, #133	; 0x85
 80050b2:	006d      	lsls	r5, r5, #1
 80050b4:	197b      	adds	r3, r7, r5
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	8912      	ldrh	r2, [r2, #8]
 80050ba:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	6959      	ldr	r1, [r3, #20]
 80050c0:	183b      	adds	r3, r7, r0
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	b29c      	uxth	r4, r3
 80050c6:	197b      	adds	r3, r7, r5
 80050c8:	881a      	ldrh	r2, [r3, #0]
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	0023      	movs	r3, r4
 80050ce:	f000 fef7 	bl	8005ec0 <USB_WritePMA>
 80050d2:	e191      	b.n	80053f8 <USB_EPStartXfer+0xa58>
 80050d4:	00000402 	.word	0x00000402
 80050d8:	ffff83ff 	.word	0xffff83ff
 80050dc:	ffff8000 	.word	0xffff8000
 80050e0:	00000406 	.word	0x00000406
 80050e4:	ffff8e8f 	.word	0xffff8e8f
 80050e8:	ffff8080 	.word	0xffff8080

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	18d3      	adds	r3, r2, r3
 80050f6:	881b      	ldrh	r3, [r3, #0]
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	001a      	movs	r2, r3
 80050fc:	2340      	movs	r3, #64	; 0x40
 80050fe:	4013      	ands	r3, r2
 8005100:	d100      	bne.n	8005104 <USB_EPStartXfer+0x764>
 8005102:	e093      	b.n	800522c <USB_EPStartXfer+0x88c>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	67bb      	str	r3, [r7, #120]	; 0x78
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	785b      	ldrb	r3, [r3, #1]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d16a      	bne.n	80051e6 <USB_EPStartXfer+0x846>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	673b      	str	r3, [r7, #112]	; 0x70
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2250      	movs	r2, #80	; 0x50
 8005118:	5a9b      	ldrh	r3, [r3, r2]
 800511a:	b29b      	uxth	r3, r3
 800511c:	001a      	movs	r2, r3
 800511e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005120:	189b      	adds	r3, r3, r2
 8005122:	673b      	str	r3, [r7, #112]	; 0x70
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	00da      	lsls	r2, r3, #3
 800512a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800512c:	18d3      	adds	r3, r2, r3
 800512e:	4ae0      	ldr	r2, [pc, #896]	; (80054b0 <USB_EPStartXfer+0xb10>)
 8005130:	4694      	mov	ip, r2
 8005132:	4463      	add	r3, ip
 8005134:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005136:	2386      	movs	r3, #134	; 0x86
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	18fb      	adds	r3, r7, r3
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d110      	bne.n	8005164 <USB_EPStartXfer+0x7c4>
 8005142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	b29b      	uxth	r3, r3
 8005148:	4ada      	ldr	r2, [pc, #872]	; (80054b4 <USB_EPStartXfer+0xb14>)
 800514a:	4013      	ands	r3, r2
 800514c:	b29a      	uxth	r2, r3
 800514e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005150:	801a      	strh	r2, [r3, #0]
 8005152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	b29b      	uxth	r3, r3
 8005158:	4ad7      	ldr	r2, [pc, #860]	; (80054b8 <USB_EPStartXfer+0xb18>)
 800515a:	4313      	orrs	r3, r2
 800515c:	b29a      	uxth	r2, r3
 800515e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005160:	801a      	strh	r2, [r3, #0]
 8005162:	e05c      	b.n	800521e <USB_EPStartXfer+0x87e>
 8005164:	2386      	movs	r3, #134	; 0x86
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	18fb      	adds	r3, r7, r3
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2b3e      	cmp	r3, #62	; 0x3e
 800516e:	d81b      	bhi.n	80051a8 <USB_EPStartXfer+0x808>
 8005170:	2286      	movs	r2, #134	; 0x86
 8005172:	0052      	lsls	r2, r2, #1
 8005174:	18bb      	adds	r3, r7, r2
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	085b      	lsrs	r3, r3, #1
 800517a:	21f4      	movs	r1, #244	; 0xf4
 800517c:	1879      	adds	r1, r7, r1
 800517e:	600b      	str	r3, [r1, #0]
 8005180:	18bb      	adds	r3, r7, r2
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2201      	movs	r2, #1
 8005186:	4013      	ands	r3, r2
 8005188:	d005      	beq.n	8005196 <USB_EPStartXfer+0x7f6>
 800518a:	22f4      	movs	r2, #244	; 0xf4
 800518c:	18bb      	adds	r3, r7, r2
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	3301      	adds	r3, #1
 8005192:	18ba      	adds	r2, r7, r2
 8005194:	6013      	str	r3, [r2, #0]
 8005196:	23f4      	movs	r3, #244	; 0xf4
 8005198:	18fb      	adds	r3, r7, r3
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	b29b      	uxth	r3, r3
 800519e:	029b      	lsls	r3, r3, #10
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051a4:	801a      	strh	r2, [r3, #0]
 80051a6:	e03a      	b.n	800521e <USB_EPStartXfer+0x87e>
 80051a8:	2286      	movs	r2, #134	; 0x86
 80051aa:	0052      	lsls	r2, r2, #1
 80051ac:	18bb      	adds	r3, r7, r2
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	095b      	lsrs	r3, r3, #5
 80051b2:	21f4      	movs	r1, #244	; 0xf4
 80051b4:	1879      	adds	r1, r7, r1
 80051b6:	600b      	str	r3, [r1, #0]
 80051b8:	18bb      	adds	r3, r7, r2
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	221f      	movs	r2, #31
 80051be:	4013      	ands	r3, r2
 80051c0:	d105      	bne.n	80051ce <USB_EPStartXfer+0x82e>
 80051c2:	22f4      	movs	r2, #244	; 0xf4
 80051c4:	18bb      	adds	r3, r7, r2
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	3b01      	subs	r3, #1
 80051ca:	18ba      	adds	r2, r7, r2
 80051cc:	6013      	str	r3, [r2, #0]
 80051ce:	23f4      	movs	r3, #244	; 0xf4
 80051d0:	18fb      	adds	r3, r7, r3
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	029b      	lsls	r3, r3, #10
 80051d8:	b29b      	uxth	r3, r3
 80051da:	4ab7      	ldr	r2, [pc, #732]	; (80054b8 <USB_EPStartXfer+0xb18>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	b29a      	uxth	r2, r3
 80051e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051e2:	801a      	strh	r2, [r3, #0]
 80051e4:	e01b      	b.n	800521e <USB_EPStartXfer+0x87e>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	785b      	ldrb	r3, [r3, #1]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d117      	bne.n	800521e <USB_EPStartXfer+0x87e>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2250      	movs	r2, #80	; 0x50
 80051f2:	5a9b      	ldrh	r3, [r3, r2]
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	001a      	movs	r2, r3
 80051f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051fa:	189b      	adds	r3, r3, r2
 80051fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	00da      	lsls	r2, r3, #3
 8005204:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005206:	18d3      	adds	r3, r2, r3
 8005208:	4aa9      	ldr	r2, [pc, #676]	; (80054b0 <USB_EPStartXfer+0xb10>)
 800520a:	4694      	mov	ip, r2
 800520c:	4463      	add	r3, ip
 800520e:	677b      	str	r3, [r7, #116]	; 0x74
 8005210:	2386      	movs	r3, #134	; 0x86
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	18fb      	adds	r3, r7, r3
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	b29a      	uxth	r2, r3
 800521a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800521c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800521e:	2385      	movs	r3, #133	; 0x85
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	18fb      	adds	r3, r7, r3
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	8952      	ldrh	r2, [r2, #10]
 8005228:	801a      	strh	r2, [r3, #0]
 800522a:	e09f      	b.n	800536c <USB_EPStartXfer+0x9cc>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	785b      	ldrb	r3, [r3, #1]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d16f      	bne.n	8005314 <USB_EPStartXfer+0x974>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2180      	movs	r1, #128	; 0x80
 8005238:	187a      	adds	r2, r7, r1
 800523a:	6013      	str	r3, [r2, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2250      	movs	r2, #80	; 0x50
 8005240:	5a9b      	ldrh	r3, [r3, r2]
 8005242:	b29b      	uxth	r3, r3
 8005244:	001a      	movs	r2, r3
 8005246:	187b      	adds	r3, r7, r1
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	189b      	adds	r3, r3, r2
 800524c:	187a      	adds	r2, r7, r1
 800524e:	6013      	str	r3, [r2, #0]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	00da      	lsls	r2, r3, #3
 8005256:	187b      	adds	r3, r7, r1
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	18d3      	adds	r3, r2, r3
 800525c:	4a97      	ldr	r2, [pc, #604]	; (80054bc <USB_EPStartXfer+0xb1c>)
 800525e:	4694      	mov	ip, r2
 8005260:	4463      	add	r3, ip
 8005262:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005264:	2386      	movs	r3, #134	; 0x86
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	18fb      	adds	r3, r7, r3
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d110      	bne.n	8005292 <USB_EPStartXfer+0x8f2>
 8005270:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005272:	881b      	ldrh	r3, [r3, #0]
 8005274:	b29b      	uxth	r3, r3
 8005276:	4a8f      	ldr	r2, [pc, #572]	; (80054b4 <USB_EPStartXfer+0xb14>)
 8005278:	4013      	ands	r3, r2
 800527a:	b29a      	uxth	r2, r3
 800527c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800527e:	801a      	strh	r2, [r3, #0]
 8005280:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	b29b      	uxth	r3, r3
 8005286:	4a8c      	ldr	r2, [pc, #560]	; (80054b8 <USB_EPStartXfer+0xb18>)
 8005288:	4313      	orrs	r3, r2
 800528a:	b29a      	uxth	r2, r3
 800528c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800528e:	801a      	strh	r2, [r3, #0]
 8005290:	e066      	b.n	8005360 <USB_EPStartXfer+0x9c0>
 8005292:	2386      	movs	r3, #134	; 0x86
 8005294:	005b      	lsls	r3, r3, #1
 8005296:	18fb      	adds	r3, r7, r3
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2b3e      	cmp	r3, #62	; 0x3e
 800529c:	d81b      	bhi.n	80052d6 <USB_EPStartXfer+0x936>
 800529e:	2286      	movs	r2, #134	; 0x86
 80052a0:	0052      	lsls	r2, r2, #1
 80052a2:	18bb      	adds	r3, r7, r2
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	085b      	lsrs	r3, r3, #1
 80052a8:	21f0      	movs	r1, #240	; 0xf0
 80052aa:	1879      	adds	r1, r7, r1
 80052ac:	600b      	str	r3, [r1, #0]
 80052ae:	18bb      	adds	r3, r7, r2
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2201      	movs	r2, #1
 80052b4:	4013      	ands	r3, r2
 80052b6:	d005      	beq.n	80052c4 <USB_EPStartXfer+0x924>
 80052b8:	22f0      	movs	r2, #240	; 0xf0
 80052ba:	18bb      	adds	r3, r7, r2
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	3301      	adds	r3, #1
 80052c0:	18ba      	adds	r2, r7, r2
 80052c2:	6013      	str	r3, [r2, #0]
 80052c4:	23f0      	movs	r3, #240	; 0xf0
 80052c6:	18fb      	adds	r3, r7, r3
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	029b      	lsls	r3, r3, #10
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052d2:	801a      	strh	r2, [r3, #0]
 80052d4:	e044      	b.n	8005360 <USB_EPStartXfer+0x9c0>
 80052d6:	2286      	movs	r2, #134	; 0x86
 80052d8:	0052      	lsls	r2, r2, #1
 80052da:	18bb      	adds	r3, r7, r2
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	095b      	lsrs	r3, r3, #5
 80052e0:	21f0      	movs	r1, #240	; 0xf0
 80052e2:	1879      	adds	r1, r7, r1
 80052e4:	600b      	str	r3, [r1, #0]
 80052e6:	18bb      	adds	r3, r7, r2
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	221f      	movs	r2, #31
 80052ec:	4013      	ands	r3, r2
 80052ee:	d105      	bne.n	80052fc <USB_EPStartXfer+0x95c>
 80052f0:	22f0      	movs	r2, #240	; 0xf0
 80052f2:	18bb      	adds	r3, r7, r2
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	18ba      	adds	r2, r7, r2
 80052fa:	6013      	str	r3, [r2, #0]
 80052fc:	23f0      	movs	r3, #240	; 0xf0
 80052fe:	18fb      	adds	r3, r7, r3
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	b29b      	uxth	r3, r3
 8005304:	029b      	lsls	r3, r3, #10
 8005306:	b29b      	uxth	r3, r3
 8005308:	4a6b      	ldr	r2, [pc, #428]	; (80054b8 <USB_EPStartXfer+0xb18>)
 800530a:	4313      	orrs	r3, r2
 800530c:	b29a      	uxth	r2, r3
 800530e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005310:	801a      	strh	r2, [r3, #0]
 8005312:	e025      	b.n	8005360 <USB_EPStartXfer+0x9c0>
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	785b      	ldrb	r3, [r3, #1]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d121      	bne.n	8005360 <USB_EPStartXfer+0x9c0>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2188      	movs	r1, #136	; 0x88
 8005320:	187a      	adds	r2, r7, r1
 8005322:	6013      	str	r3, [r2, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2250      	movs	r2, #80	; 0x50
 8005328:	5a9b      	ldrh	r3, [r3, r2]
 800532a:	b29b      	uxth	r3, r3
 800532c:	001a      	movs	r2, r3
 800532e:	187b      	adds	r3, r7, r1
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	189b      	adds	r3, r3, r2
 8005334:	187a      	adds	r2, r7, r1
 8005336:	6013      	str	r3, [r2, #0]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	00da      	lsls	r2, r3, #3
 800533e:	187b      	adds	r3, r7, r1
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	18d3      	adds	r3, r2, r3
 8005344:	4a5d      	ldr	r2, [pc, #372]	; (80054bc <USB_EPStartXfer+0xb1c>)
 8005346:	4694      	mov	ip, r2
 8005348:	4463      	add	r3, ip
 800534a:	2184      	movs	r1, #132	; 0x84
 800534c:	187a      	adds	r2, r7, r1
 800534e:	6013      	str	r3, [r2, #0]
 8005350:	2386      	movs	r3, #134	; 0x86
 8005352:	005b      	lsls	r3, r3, #1
 8005354:	18fb      	adds	r3, r7, r3
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	b29a      	uxth	r2, r3
 800535a:	187b      	adds	r3, r7, r1
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005360:	2385      	movs	r3, #133	; 0x85
 8005362:	005b      	lsls	r3, r3, #1
 8005364:	18fb      	adds	r3, r7, r3
 8005366:	683a      	ldr	r2, [r7, #0]
 8005368:	8912      	ldrh	r2, [r2, #8]
 800536a:	801a      	strh	r2, [r3, #0]
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	6959      	ldr	r1, [r3, #20]
 8005370:	2386      	movs	r3, #134	; 0x86
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	18fb      	adds	r3, r7, r3
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	b29c      	uxth	r4, r3
 800537a:	2385      	movs	r3, #133	; 0x85
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	18fb      	adds	r3, r7, r3
 8005380:	881a      	ldrh	r2, [r3, #0]
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	0023      	movs	r3, r4
 8005386:	f000 fd9b 	bl	8005ec0 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	785b      	ldrb	r3, [r3, #1]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d117      	bne.n	80053c2 <USB_EPStartXfer+0xa22>
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	18d3      	adds	r3, r2, r3
 800539c:	881b      	ldrh	r3, [r3, #0]
 800539e:	b29a      	uxth	r2, r3
 80053a0:	2068      	movs	r0, #104	; 0x68
 80053a2:	183b      	adds	r3, r7, r0
 80053a4:	4946      	ldr	r1, [pc, #280]	; (80054c0 <USB_EPStartXfer+0xb20>)
 80053a6:	400a      	ands	r2, r1
 80053a8:	801a      	strh	r2, [r3, #0]
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	18d3      	adds	r3, r2, r3
 80053b4:	183a      	adds	r2, r7, r0
 80053b6:	8812      	ldrh	r2, [r2, #0]
 80053b8:	4942      	ldr	r1, [pc, #264]	; (80054c4 <USB_EPStartXfer+0xb24>)
 80053ba:	430a      	orrs	r2, r1
 80053bc:	b292      	uxth	r2, r2
 80053be:	801a      	strh	r2, [r3, #0]
 80053c0:	e01a      	b.n	80053f8 <USB_EPStartXfer+0xa58>
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	785b      	ldrb	r3, [r3, #1]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d116      	bne.n	80053f8 <USB_EPStartXfer+0xa58>
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	18d3      	adds	r3, r2, r3
 80053d4:	881b      	ldrh	r3, [r3, #0]
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	206a      	movs	r0, #106	; 0x6a
 80053da:	183b      	adds	r3, r7, r0
 80053dc:	4938      	ldr	r1, [pc, #224]	; (80054c0 <USB_EPStartXfer+0xb20>)
 80053de:	400a      	ands	r2, r1
 80053e0:	801a      	strh	r2, [r3, #0]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	18d3      	adds	r3, r2, r3
 80053ec:	183a      	adds	r2, r7, r0
 80053ee:	8812      	ldrh	r2, [r2, #0]
 80053f0:	4935      	ldr	r1, [pc, #212]	; (80054c8 <USB_EPStartXfer+0xb28>)
 80053f2:	430a      	orrs	r2, r1
 80053f4:	b292      	uxth	r2, r2
 80053f6:	801a      	strh	r2, [r3, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	18d3      	adds	r3, r2, r3
 8005402:	881b      	ldrh	r3, [r3, #0]
 8005404:	b29a      	uxth	r2, r3
 8005406:	4b31      	ldr	r3, [pc, #196]	; (80054cc <USB_EPStartXfer+0xb2c>)
 8005408:	2188      	movs	r1, #136	; 0x88
 800540a:	0049      	lsls	r1, r1, #1
 800540c:	468c      	mov	ip, r1
 800540e:	44bc      	add	ip, r7
 8005410:	4463      	add	r3, ip
 8005412:	492f      	ldr	r1, [pc, #188]	; (80054d0 <USB_EPStartXfer+0xb30>)
 8005414:	400a      	ands	r2, r1
 8005416:	801a      	strh	r2, [r3, #0]
 8005418:	4b2c      	ldr	r3, [pc, #176]	; (80054cc <USB_EPStartXfer+0xb2c>)
 800541a:	2288      	movs	r2, #136	; 0x88
 800541c:	0052      	lsls	r2, r2, #1
 800541e:	4694      	mov	ip, r2
 8005420:	44bc      	add	ip, r7
 8005422:	4463      	add	r3, ip
 8005424:	4a29      	ldr	r2, [pc, #164]	; (80054cc <USB_EPStartXfer+0xb2c>)
 8005426:	2188      	movs	r1, #136	; 0x88
 8005428:	0049      	lsls	r1, r1, #1
 800542a:	468c      	mov	ip, r1
 800542c:	44bc      	add	ip, r7
 800542e:	4462      	add	r2, ip
 8005430:	8812      	ldrh	r2, [r2, #0]
 8005432:	2110      	movs	r1, #16
 8005434:	404a      	eors	r2, r1
 8005436:	801a      	strh	r2, [r3, #0]
 8005438:	4b24      	ldr	r3, [pc, #144]	; (80054cc <USB_EPStartXfer+0xb2c>)
 800543a:	2288      	movs	r2, #136	; 0x88
 800543c:	0052      	lsls	r2, r2, #1
 800543e:	4694      	mov	ip, r2
 8005440:	44bc      	add	ip, r7
 8005442:	4463      	add	r3, ip
 8005444:	4a21      	ldr	r2, [pc, #132]	; (80054cc <USB_EPStartXfer+0xb2c>)
 8005446:	2188      	movs	r1, #136	; 0x88
 8005448:	0049      	lsls	r1, r1, #1
 800544a:	468c      	mov	ip, r1
 800544c:	44bc      	add	ip, r7
 800544e:	4462      	add	r2, ip
 8005450:	8812      	ldrh	r2, [r2, #0]
 8005452:	2120      	movs	r1, #32
 8005454:	404a      	eors	r2, r1
 8005456:	801a      	strh	r2, [r3, #0]
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	18d3      	adds	r3, r2, r3
 8005462:	4a1a      	ldr	r2, [pc, #104]	; (80054cc <USB_EPStartXfer+0xb2c>)
 8005464:	2188      	movs	r1, #136	; 0x88
 8005466:	0049      	lsls	r1, r1, #1
 8005468:	468c      	mov	ip, r1
 800546a:	44bc      	add	ip, r7
 800546c:	4462      	add	r2, ip
 800546e:	8812      	ldrh	r2, [r2, #0]
 8005470:	4918      	ldr	r1, [pc, #96]	; (80054d4 <USB_EPStartXfer+0xb34>)
 8005472:	430a      	orrs	r2, r1
 8005474:	b292      	uxth	r2, r2
 8005476:	801a      	strh	r2, [r3, #0]
 8005478:	f000 fbdd 	bl	8005c36 <USB_EPStartXfer+0x1296>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	7b1b      	ldrb	r3, [r3, #12]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d000      	beq.n	8005486 <USB_EPStartXfer+0xae6>
 8005484:	e0ac      	b.n	80055e0 <USB_EPStartXfer+0xc40>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	699a      	ldr	r2, [r3, #24]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	429a      	cmp	r2, r3
 8005490:	d922      	bls.n	80054d8 <USB_EPStartXfer+0xb38>
      {
        len = ep->maxpacket;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	2186      	movs	r1, #134	; 0x86
 8005498:	0049      	lsls	r1, r1, #1
 800549a:	187a      	adds	r2, r7, r1
 800549c:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	699a      	ldr	r2, [r3, #24]
 80054a2:	187b      	adds	r3, r7, r1
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	1ad2      	subs	r2, r2, r3
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	619a      	str	r2, [r3, #24]
 80054ac:	e01d      	b.n	80054ea <USB_EPStartXfer+0xb4a>
 80054ae:	46c0      	nop			; (mov r8, r8)
 80054b0:	00000406 	.word	0x00000406
 80054b4:	ffff83ff 	.word	0xffff83ff
 80054b8:	ffff8000 	.word	0xffff8000
 80054bc:	00000402 	.word	0x00000402
 80054c0:	ffff8f8f 	.word	0xffff8f8f
 80054c4:	ffff80c0 	.word	0xffff80c0
 80054c8:	ffffc080 	.word	0xffffc080
 80054cc:	fffffefe 	.word	0xfffffefe
 80054d0:	ffff8fbf 	.word	0xffff8fbf
 80054d4:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	2286      	movs	r2, #134	; 0x86
 80054de:	0052      	lsls	r2, r2, #1
 80054e0:	18ba      	adds	r2, r7, r2
 80054e2:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	2200      	movs	r2, #0
 80054e8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2194      	movs	r1, #148	; 0x94
 80054ee:	187a      	adds	r2, r7, r1
 80054f0:	6013      	str	r3, [r2, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2250      	movs	r2, #80	; 0x50
 80054f6:	5a9b      	ldrh	r3, [r3, r2]
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	001a      	movs	r2, r3
 80054fc:	187b      	adds	r3, r7, r1
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	189b      	adds	r3, r3, r2
 8005502:	187a      	adds	r2, r7, r1
 8005504:	6013      	str	r3, [r2, #0]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	00da      	lsls	r2, r3, #3
 800550c:	187b      	adds	r3, r7, r1
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	18d3      	adds	r3, r2, r3
 8005512:	4ac2      	ldr	r2, [pc, #776]	; (800581c <USB_EPStartXfer+0xe7c>)
 8005514:	4694      	mov	ip, r2
 8005516:	4463      	add	r3, ip
 8005518:	2290      	movs	r2, #144	; 0x90
 800551a:	18ba      	adds	r2, r7, r2
 800551c:	6013      	str	r3, [r2, #0]
 800551e:	2386      	movs	r3, #134	; 0x86
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	18fb      	adds	r3, r7, r3
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d115      	bne.n	8005556 <USB_EPStartXfer+0xbb6>
 800552a:	2190      	movs	r1, #144	; 0x90
 800552c:	187b      	adds	r3, r7, r1
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	881b      	ldrh	r3, [r3, #0]
 8005532:	b29b      	uxth	r3, r3
 8005534:	4aba      	ldr	r2, [pc, #744]	; (8005820 <USB_EPStartXfer+0xe80>)
 8005536:	4013      	ands	r3, r2
 8005538:	b29a      	uxth	r2, r3
 800553a:	187b      	adds	r3, r7, r1
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	801a      	strh	r2, [r3, #0]
 8005540:	187b      	adds	r3, r7, r1
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	881b      	ldrh	r3, [r3, #0]
 8005546:	b29b      	uxth	r3, r3
 8005548:	4ab6      	ldr	r2, [pc, #728]	; (8005824 <USB_EPStartXfer+0xe84>)
 800554a:	4313      	orrs	r3, r2
 800554c:	b29a      	uxth	r2, r3
 800554e:	187b      	adds	r3, r7, r1
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	801a      	strh	r2, [r3, #0]
 8005554:	e34a      	b.n	8005bec <USB_EPStartXfer+0x124c>
 8005556:	2386      	movs	r3, #134	; 0x86
 8005558:	005b      	lsls	r3, r3, #1
 800555a:	18fb      	adds	r3, r7, r3
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b3e      	cmp	r3, #62	; 0x3e
 8005560:	d81d      	bhi.n	800559e <USB_EPStartXfer+0xbfe>
 8005562:	2286      	movs	r2, #134	; 0x86
 8005564:	0052      	lsls	r2, r2, #1
 8005566:	18bb      	adds	r3, r7, r2
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	085b      	lsrs	r3, r3, #1
 800556c:	21ec      	movs	r1, #236	; 0xec
 800556e:	1879      	adds	r1, r7, r1
 8005570:	600b      	str	r3, [r1, #0]
 8005572:	18bb      	adds	r3, r7, r2
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2201      	movs	r2, #1
 8005578:	4013      	ands	r3, r2
 800557a:	d005      	beq.n	8005588 <USB_EPStartXfer+0xbe8>
 800557c:	22ec      	movs	r2, #236	; 0xec
 800557e:	18bb      	adds	r3, r7, r2
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3301      	adds	r3, #1
 8005584:	18ba      	adds	r2, r7, r2
 8005586:	6013      	str	r3, [r2, #0]
 8005588:	23ec      	movs	r3, #236	; 0xec
 800558a:	18fb      	adds	r3, r7, r3
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	b29b      	uxth	r3, r3
 8005590:	029b      	lsls	r3, r3, #10
 8005592:	b29a      	uxth	r2, r3
 8005594:	2390      	movs	r3, #144	; 0x90
 8005596:	18fb      	adds	r3, r7, r3
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	801a      	strh	r2, [r3, #0]
 800559c:	e326      	b.n	8005bec <USB_EPStartXfer+0x124c>
 800559e:	2286      	movs	r2, #134	; 0x86
 80055a0:	0052      	lsls	r2, r2, #1
 80055a2:	18bb      	adds	r3, r7, r2
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	095b      	lsrs	r3, r3, #5
 80055a8:	21ec      	movs	r1, #236	; 0xec
 80055aa:	1879      	adds	r1, r7, r1
 80055ac:	600b      	str	r3, [r1, #0]
 80055ae:	18bb      	adds	r3, r7, r2
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	221f      	movs	r2, #31
 80055b4:	4013      	ands	r3, r2
 80055b6:	d105      	bne.n	80055c4 <USB_EPStartXfer+0xc24>
 80055b8:	22ec      	movs	r2, #236	; 0xec
 80055ba:	18bb      	adds	r3, r7, r2
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3b01      	subs	r3, #1
 80055c0:	18ba      	adds	r2, r7, r2
 80055c2:	6013      	str	r3, [r2, #0]
 80055c4:	23ec      	movs	r3, #236	; 0xec
 80055c6:	18fb      	adds	r3, r7, r3
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	029b      	lsls	r3, r3, #10
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	4a94      	ldr	r2, [pc, #592]	; (8005824 <USB_EPStartXfer+0xe84>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	2390      	movs	r3, #144	; 0x90
 80055d8:	18fb      	adds	r3, r7, r3
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	801a      	strh	r2, [r3, #0]
 80055de:	e305      	b.n	8005bec <USB_EPStartXfer+0x124c>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	78db      	ldrb	r3, [r3, #3]
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d000      	beq.n	80055ea <USB_EPStartXfer+0xc4a>
 80055e8:	e182      	b.n	80058f0 <USB_EPStartXfer+0xf50>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	785b      	ldrb	r3, [r3, #1]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d000      	beq.n	80055f4 <USB_EPStartXfer+0xc54>
 80055f2:	e072      	b.n	80056da <USB_EPStartXfer+0xd3a>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	21b0      	movs	r1, #176	; 0xb0
 80055f8:	187a      	adds	r2, r7, r1
 80055fa:	6013      	str	r3, [r2, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2250      	movs	r2, #80	; 0x50
 8005600:	5a9b      	ldrh	r3, [r3, r2]
 8005602:	b29b      	uxth	r3, r3
 8005604:	001a      	movs	r2, r3
 8005606:	187b      	adds	r3, r7, r1
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	189b      	adds	r3, r3, r2
 800560c:	187a      	adds	r2, r7, r1
 800560e:	6013      	str	r3, [r2, #0]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	00da      	lsls	r2, r3, #3
 8005616:	187b      	adds	r3, r7, r1
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	18d3      	adds	r3, r2, r3
 800561c:	4a82      	ldr	r2, [pc, #520]	; (8005828 <USB_EPStartXfer+0xe88>)
 800561e:	4694      	mov	ip, r2
 8005620:	4463      	add	r3, ip
 8005622:	22ac      	movs	r2, #172	; 0xac
 8005624:	18ba      	adds	r2, r7, r2
 8005626:	6013      	str	r3, [r2, #0]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d115      	bne.n	800565c <USB_EPStartXfer+0xcbc>
 8005630:	21ac      	movs	r1, #172	; 0xac
 8005632:	187b      	adds	r3, r7, r1
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	881b      	ldrh	r3, [r3, #0]
 8005638:	b29b      	uxth	r3, r3
 800563a:	4a79      	ldr	r2, [pc, #484]	; (8005820 <USB_EPStartXfer+0xe80>)
 800563c:	4013      	ands	r3, r2
 800563e:	b29a      	uxth	r2, r3
 8005640:	187b      	adds	r3, r7, r1
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	801a      	strh	r2, [r3, #0]
 8005646:	187b      	adds	r3, r7, r1
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	881b      	ldrh	r3, [r3, #0]
 800564c:	b29b      	uxth	r3, r3
 800564e:	4a75      	ldr	r2, [pc, #468]	; (8005824 <USB_EPStartXfer+0xe84>)
 8005650:	4313      	orrs	r3, r2
 8005652:	b29a      	uxth	r2, r3
 8005654:	187b      	adds	r3, r7, r1
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	801a      	strh	r2, [r3, #0]
 800565a:	e062      	b.n	8005722 <USB_EPStartXfer+0xd82>
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	2b3e      	cmp	r3, #62	; 0x3e
 8005662:	d81b      	bhi.n	800569c <USB_EPStartXfer+0xcfc>
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	085b      	lsrs	r3, r3, #1
 800566a:	22e8      	movs	r2, #232	; 0xe8
 800566c:	18ba      	adds	r2, r7, r2
 800566e:	6013      	str	r3, [r2, #0]
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	2201      	movs	r2, #1
 8005676:	4013      	ands	r3, r2
 8005678:	d005      	beq.n	8005686 <USB_EPStartXfer+0xce6>
 800567a:	22e8      	movs	r2, #232	; 0xe8
 800567c:	18bb      	adds	r3, r7, r2
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3301      	adds	r3, #1
 8005682:	18ba      	adds	r2, r7, r2
 8005684:	6013      	str	r3, [r2, #0]
 8005686:	23e8      	movs	r3, #232	; 0xe8
 8005688:	18fb      	adds	r3, r7, r3
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	b29b      	uxth	r3, r3
 800568e:	029b      	lsls	r3, r3, #10
 8005690:	b29a      	uxth	r2, r3
 8005692:	23ac      	movs	r3, #172	; 0xac
 8005694:	18fb      	adds	r3, r7, r3
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	801a      	strh	r2, [r3, #0]
 800569a:	e042      	b.n	8005722 <USB_EPStartXfer+0xd82>
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	095b      	lsrs	r3, r3, #5
 80056a2:	22e8      	movs	r2, #232	; 0xe8
 80056a4:	18ba      	adds	r2, r7, r2
 80056a6:	6013      	str	r3, [r2, #0]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	221f      	movs	r2, #31
 80056ae:	4013      	ands	r3, r2
 80056b0:	d105      	bne.n	80056be <USB_EPStartXfer+0xd1e>
 80056b2:	22e8      	movs	r2, #232	; 0xe8
 80056b4:	18bb      	adds	r3, r7, r2
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3b01      	subs	r3, #1
 80056ba:	18ba      	adds	r2, r7, r2
 80056bc:	6013      	str	r3, [r2, #0]
 80056be:	23e8      	movs	r3, #232	; 0xe8
 80056c0:	18fb      	adds	r3, r7, r3
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	029b      	lsls	r3, r3, #10
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	4a56      	ldr	r2, [pc, #344]	; (8005824 <USB_EPStartXfer+0xe84>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	23ac      	movs	r3, #172	; 0xac
 80056d2:	18fb      	adds	r3, r7, r3
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	801a      	strh	r2, [r3, #0]
 80056d8:	e023      	b.n	8005722 <USB_EPStartXfer+0xd82>
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	785b      	ldrb	r3, [r3, #1]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d11f      	bne.n	8005722 <USB_EPStartXfer+0xd82>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	21b8      	movs	r1, #184	; 0xb8
 80056e6:	187a      	adds	r2, r7, r1
 80056e8:	6013      	str	r3, [r2, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2250      	movs	r2, #80	; 0x50
 80056ee:	5a9b      	ldrh	r3, [r3, r2]
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	001a      	movs	r2, r3
 80056f4:	187b      	adds	r3, r7, r1
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	189b      	adds	r3, r3, r2
 80056fa:	187a      	adds	r2, r7, r1
 80056fc:	6013      	str	r3, [r2, #0]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	00da      	lsls	r2, r3, #3
 8005704:	187b      	adds	r3, r7, r1
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	18d3      	adds	r3, r2, r3
 800570a:	4a47      	ldr	r2, [pc, #284]	; (8005828 <USB_EPStartXfer+0xe88>)
 800570c:	4694      	mov	ip, r2
 800570e:	4463      	add	r3, ip
 8005710:	21b4      	movs	r1, #180	; 0xb4
 8005712:	187a      	adds	r2, r7, r1
 8005714:	6013      	str	r3, [r2, #0]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	b29a      	uxth	r2, r3
 800571c:	187b      	adds	r3, r7, r1
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	801a      	strh	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	22a8      	movs	r2, #168	; 0xa8
 8005726:	18ba      	adds	r2, r7, r2
 8005728:	6013      	str	r3, [r2, #0]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	785b      	ldrb	r3, [r3, #1]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d000      	beq.n	8005734 <USB_EPStartXfer+0xd94>
 8005732:	e07b      	b.n	800582c <USB_EPStartXfer+0xe8c>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	21a0      	movs	r1, #160	; 0xa0
 8005738:	187a      	adds	r2, r7, r1
 800573a:	6013      	str	r3, [r2, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2250      	movs	r2, #80	; 0x50
 8005740:	5a9b      	ldrh	r3, [r3, r2]
 8005742:	b29b      	uxth	r3, r3
 8005744:	001a      	movs	r2, r3
 8005746:	187b      	adds	r3, r7, r1
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	189b      	adds	r3, r3, r2
 800574c:	187a      	adds	r2, r7, r1
 800574e:	6013      	str	r3, [r2, #0]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	00da      	lsls	r2, r3, #3
 8005756:	187b      	adds	r3, r7, r1
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	18d3      	adds	r3, r2, r3
 800575c:	4a2f      	ldr	r2, [pc, #188]	; (800581c <USB_EPStartXfer+0xe7c>)
 800575e:	4694      	mov	ip, r2
 8005760:	4463      	add	r3, ip
 8005762:	229c      	movs	r2, #156	; 0x9c
 8005764:	18ba      	adds	r2, r7, r2
 8005766:	6013      	str	r3, [r2, #0]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d115      	bne.n	800579c <USB_EPStartXfer+0xdfc>
 8005770:	219c      	movs	r1, #156	; 0x9c
 8005772:	187b      	adds	r3, r7, r1
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	b29b      	uxth	r3, r3
 800577a:	4a29      	ldr	r2, [pc, #164]	; (8005820 <USB_EPStartXfer+0xe80>)
 800577c:	4013      	ands	r3, r2
 800577e:	b29a      	uxth	r2, r3
 8005780:	187b      	adds	r3, r7, r1
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	801a      	strh	r2, [r3, #0]
 8005786:	187b      	adds	r3, r7, r1
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	881b      	ldrh	r3, [r3, #0]
 800578c:	b29b      	uxth	r3, r3
 800578e:	4a25      	ldr	r2, [pc, #148]	; (8005824 <USB_EPStartXfer+0xe84>)
 8005790:	4313      	orrs	r3, r2
 8005792:	b29a      	uxth	r2, r3
 8005794:	187b      	adds	r3, r7, r1
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	801a      	strh	r2, [r3, #0]
 800579a:	e068      	b.n	800586e <USB_EPStartXfer+0xece>
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	2b3e      	cmp	r3, #62	; 0x3e
 80057a2:	d81b      	bhi.n	80057dc <USB_EPStartXfer+0xe3c>
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	085b      	lsrs	r3, r3, #1
 80057aa:	22e4      	movs	r2, #228	; 0xe4
 80057ac:	18ba      	adds	r2, r7, r2
 80057ae:	6013      	str	r3, [r2, #0]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	2201      	movs	r2, #1
 80057b6:	4013      	ands	r3, r2
 80057b8:	d005      	beq.n	80057c6 <USB_EPStartXfer+0xe26>
 80057ba:	22e4      	movs	r2, #228	; 0xe4
 80057bc:	18bb      	adds	r3, r7, r2
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	3301      	adds	r3, #1
 80057c2:	18ba      	adds	r2, r7, r2
 80057c4:	6013      	str	r3, [r2, #0]
 80057c6:	23e4      	movs	r3, #228	; 0xe4
 80057c8:	18fb      	adds	r3, r7, r3
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	029b      	lsls	r3, r3, #10
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	239c      	movs	r3, #156	; 0x9c
 80057d4:	18fb      	adds	r3, r7, r3
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	801a      	strh	r2, [r3, #0]
 80057da:	e048      	b.n	800586e <USB_EPStartXfer+0xece>
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	095b      	lsrs	r3, r3, #5
 80057e2:	22e4      	movs	r2, #228	; 0xe4
 80057e4:	18ba      	adds	r2, r7, r2
 80057e6:	6013      	str	r3, [r2, #0]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	221f      	movs	r2, #31
 80057ee:	4013      	ands	r3, r2
 80057f0:	d105      	bne.n	80057fe <USB_EPStartXfer+0xe5e>
 80057f2:	22e4      	movs	r2, #228	; 0xe4
 80057f4:	18bb      	adds	r3, r7, r2
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	3b01      	subs	r3, #1
 80057fa:	18ba      	adds	r2, r7, r2
 80057fc:	6013      	str	r3, [r2, #0]
 80057fe:	23e4      	movs	r3, #228	; 0xe4
 8005800:	18fb      	adds	r3, r7, r3
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	b29b      	uxth	r3, r3
 8005806:	029b      	lsls	r3, r3, #10
 8005808:	b29b      	uxth	r3, r3
 800580a:	4a06      	ldr	r2, [pc, #24]	; (8005824 <USB_EPStartXfer+0xe84>)
 800580c:	4313      	orrs	r3, r2
 800580e:	b29a      	uxth	r2, r3
 8005810:	239c      	movs	r3, #156	; 0x9c
 8005812:	18fb      	adds	r3, r7, r3
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	801a      	strh	r2, [r3, #0]
 8005818:	e029      	b.n	800586e <USB_EPStartXfer+0xece>
 800581a:	46c0      	nop			; (mov r8, r8)
 800581c:	00000406 	.word	0x00000406
 8005820:	ffff83ff 	.word	0xffff83ff
 8005824:	ffff8000 	.word	0xffff8000
 8005828:	00000402 	.word	0x00000402
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	785b      	ldrb	r3, [r3, #1]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d11c      	bne.n	800586e <USB_EPStartXfer+0xece>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2250      	movs	r2, #80	; 0x50
 8005838:	5a9b      	ldrh	r3, [r3, r2]
 800583a:	b29b      	uxth	r3, r3
 800583c:	001a      	movs	r2, r3
 800583e:	21a8      	movs	r1, #168	; 0xa8
 8005840:	187b      	adds	r3, r7, r1
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	189b      	adds	r3, r3, r2
 8005846:	187a      	adds	r2, r7, r1
 8005848:	6013      	str	r3, [r2, #0]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	00da      	lsls	r2, r3, #3
 8005850:	187b      	adds	r3, r7, r1
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	18d3      	adds	r3, r2, r3
 8005856:	4acc      	ldr	r2, [pc, #816]	; (8005b88 <USB_EPStartXfer+0x11e8>)
 8005858:	4694      	mov	ip, r2
 800585a:	4463      	add	r3, ip
 800585c:	21a4      	movs	r1, #164	; 0xa4
 800585e:	187a      	adds	r2, r7, r1
 8005860:	6013      	str	r3, [r2, #0]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	b29a      	uxth	r2, r3
 8005868:	187b      	adds	r3, r7, r1
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d100      	bne.n	8005878 <USB_EPStartXfer+0xed8>
 8005876:	e1b9      	b.n	8005bec <USB_EPStartXfer+0x124c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	18d2      	adds	r2, r2, r3
 8005882:	219a      	movs	r1, #154	; 0x9a
 8005884:	187b      	adds	r3, r7, r1
 8005886:	8812      	ldrh	r2, [r2, #0]
 8005888:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800588a:	187b      	adds	r3, r7, r1
 800588c:	881a      	ldrh	r2, [r3, #0]
 800588e:	2380      	movs	r3, #128	; 0x80
 8005890:	01db      	lsls	r3, r3, #7
 8005892:	4013      	ands	r3, r2
 8005894:	d005      	beq.n	80058a2 <USB_EPStartXfer+0xf02>
 8005896:	239a      	movs	r3, #154	; 0x9a
 8005898:	18fb      	adds	r3, r7, r3
 800589a:	881b      	ldrh	r3, [r3, #0]
 800589c:	2240      	movs	r2, #64	; 0x40
 800589e:	4013      	ands	r3, r2
 80058a0:	d10e      	bne.n	80058c0 <USB_EPStartXfer+0xf20>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80058a2:	239a      	movs	r3, #154	; 0x9a
 80058a4:	18fb      	adds	r3, r7, r3
 80058a6:	881a      	ldrh	r2, [r3, #0]
 80058a8:	2380      	movs	r3, #128	; 0x80
 80058aa:	01db      	lsls	r3, r3, #7
 80058ac:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80058ae:	d000      	beq.n	80058b2 <USB_EPStartXfer+0xf12>
 80058b0:	e19c      	b.n	8005bec <USB_EPStartXfer+0x124c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80058b2:	239a      	movs	r3, #154	; 0x9a
 80058b4:	18fb      	adds	r3, r7, r3
 80058b6:	881b      	ldrh	r3, [r3, #0]
 80058b8:	2240      	movs	r2, #64	; 0x40
 80058ba:	4013      	ands	r3, r2
 80058bc:	d000      	beq.n	80058c0 <USB_EPStartXfer+0xf20>
 80058be:	e195      	b.n	8005bec <USB_EPStartXfer+0x124c>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	18d3      	adds	r3, r2, r3
 80058ca:	881b      	ldrh	r3, [r3, #0]
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	2098      	movs	r0, #152	; 0x98
 80058d0:	183b      	adds	r3, r7, r0
 80058d2:	49ae      	ldr	r1, [pc, #696]	; (8005b8c <USB_EPStartXfer+0x11ec>)
 80058d4:	400a      	ands	r2, r1
 80058d6:	801a      	strh	r2, [r3, #0]
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	18d3      	adds	r3, r2, r3
 80058e2:	183a      	adds	r2, r7, r0
 80058e4:	8812      	ldrh	r2, [r2, #0]
 80058e6:	49aa      	ldr	r1, [pc, #680]	; (8005b90 <USB_EPStartXfer+0x11f0>)
 80058e8:	430a      	orrs	r2, r1
 80058ea:	b292      	uxth	r2, r2
 80058ec:	801a      	strh	r2, [r3, #0]
 80058ee:	e17d      	b.n	8005bec <USB_EPStartXfer+0x124c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	78db      	ldrb	r3, [r3, #3]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d000      	beq.n	80058fa <USB_EPStartXfer+0xf5a>
 80058f8:	e176      	b.n	8005be8 <USB_EPStartXfer+0x1248>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	699a      	ldr	r2, [r3, #24]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	429a      	cmp	r2, r3
 8005904:	d90d      	bls.n	8005922 <USB_EPStartXfer+0xf82>
        {
          len = ep->maxpacket;
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	2186      	movs	r1, #134	; 0x86
 800590c:	0049      	lsls	r1, r1, #1
 800590e:	187a      	adds	r2, r7, r1
 8005910:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	699a      	ldr	r2, [r3, #24]
 8005916:	187b      	adds	r3, r7, r1
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	1ad2      	subs	r2, r2, r3
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	619a      	str	r2, [r3, #24]
 8005920:	e008      	b.n	8005934 <USB_EPStartXfer+0xf94>
        }
        else
        {
          len = ep->xfer_len;
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	2286      	movs	r2, #134	; 0x86
 8005928:	0052      	lsls	r2, r2, #1
 800592a:	18ba      	adds	r2, r7, r2
 800592c:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2200      	movs	r2, #0
 8005932:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	785b      	ldrb	r3, [r3, #1]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d000      	beq.n	800593e <USB_EPStartXfer+0xf9e>
 800593c:	e07a      	b.n	8005a34 <USB_EPStartXfer+0x1094>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	21d0      	movs	r1, #208	; 0xd0
 8005942:	187a      	adds	r2, r7, r1
 8005944:	6013      	str	r3, [r2, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2250      	movs	r2, #80	; 0x50
 800594a:	5a9b      	ldrh	r3, [r3, r2]
 800594c:	b29b      	uxth	r3, r3
 800594e:	001a      	movs	r2, r3
 8005950:	187b      	adds	r3, r7, r1
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	189b      	adds	r3, r3, r2
 8005956:	187a      	adds	r2, r7, r1
 8005958:	6013      	str	r3, [r2, #0]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	00da      	lsls	r2, r3, #3
 8005960:	187b      	adds	r3, r7, r1
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	18d3      	adds	r3, r2, r3
 8005966:	4a8b      	ldr	r2, [pc, #556]	; (8005b94 <USB_EPStartXfer+0x11f4>)
 8005968:	4694      	mov	ip, r2
 800596a:	4463      	add	r3, ip
 800596c:	22cc      	movs	r2, #204	; 0xcc
 800596e:	18ba      	adds	r2, r7, r2
 8005970:	6013      	str	r3, [r2, #0]
 8005972:	2386      	movs	r3, #134	; 0x86
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	18fb      	adds	r3, r7, r3
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d115      	bne.n	80059aa <USB_EPStartXfer+0x100a>
 800597e:	21cc      	movs	r1, #204	; 0xcc
 8005980:	187b      	adds	r3, r7, r1
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	b29b      	uxth	r3, r3
 8005988:	4a83      	ldr	r2, [pc, #524]	; (8005b98 <USB_EPStartXfer+0x11f8>)
 800598a:	4013      	ands	r3, r2
 800598c:	b29a      	uxth	r2, r3
 800598e:	187b      	adds	r3, r7, r1
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	801a      	strh	r2, [r3, #0]
 8005994:	187b      	adds	r3, r7, r1
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	881b      	ldrh	r3, [r3, #0]
 800599a:	b29b      	uxth	r3, r3
 800599c:	4a7f      	ldr	r2, [pc, #508]	; (8005b9c <USB_EPStartXfer+0x11fc>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	187b      	adds	r3, r7, r1
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	801a      	strh	r2, [r3, #0]
 80059a8:	e06a      	b.n	8005a80 <USB_EPStartXfer+0x10e0>
 80059aa:	2386      	movs	r3, #134	; 0x86
 80059ac:	005b      	lsls	r3, r3, #1
 80059ae:	18fb      	adds	r3, r7, r3
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b3e      	cmp	r3, #62	; 0x3e
 80059b4:	d81d      	bhi.n	80059f2 <USB_EPStartXfer+0x1052>
 80059b6:	2286      	movs	r2, #134	; 0x86
 80059b8:	0052      	lsls	r2, r2, #1
 80059ba:	18bb      	adds	r3, r7, r2
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	085b      	lsrs	r3, r3, #1
 80059c0:	21e0      	movs	r1, #224	; 0xe0
 80059c2:	1879      	adds	r1, r7, r1
 80059c4:	600b      	str	r3, [r1, #0]
 80059c6:	18bb      	adds	r3, r7, r2
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2201      	movs	r2, #1
 80059cc:	4013      	ands	r3, r2
 80059ce:	d005      	beq.n	80059dc <USB_EPStartXfer+0x103c>
 80059d0:	22e0      	movs	r2, #224	; 0xe0
 80059d2:	18bb      	adds	r3, r7, r2
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	3301      	adds	r3, #1
 80059d8:	18ba      	adds	r2, r7, r2
 80059da:	6013      	str	r3, [r2, #0]
 80059dc:	23e0      	movs	r3, #224	; 0xe0
 80059de:	18fb      	adds	r3, r7, r3
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	029b      	lsls	r3, r3, #10
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	23cc      	movs	r3, #204	; 0xcc
 80059ea:	18fb      	adds	r3, r7, r3
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	801a      	strh	r2, [r3, #0]
 80059f0:	e046      	b.n	8005a80 <USB_EPStartXfer+0x10e0>
 80059f2:	2286      	movs	r2, #134	; 0x86
 80059f4:	0052      	lsls	r2, r2, #1
 80059f6:	18bb      	adds	r3, r7, r2
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	095b      	lsrs	r3, r3, #5
 80059fc:	21e0      	movs	r1, #224	; 0xe0
 80059fe:	1879      	adds	r1, r7, r1
 8005a00:	600b      	str	r3, [r1, #0]
 8005a02:	18bb      	adds	r3, r7, r2
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	221f      	movs	r2, #31
 8005a08:	4013      	ands	r3, r2
 8005a0a:	d105      	bne.n	8005a18 <USB_EPStartXfer+0x1078>
 8005a0c:	22e0      	movs	r2, #224	; 0xe0
 8005a0e:	18bb      	adds	r3, r7, r2
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	3b01      	subs	r3, #1
 8005a14:	18ba      	adds	r2, r7, r2
 8005a16:	6013      	str	r3, [r2, #0]
 8005a18:	23e0      	movs	r3, #224	; 0xe0
 8005a1a:	18fb      	adds	r3, r7, r3
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	029b      	lsls	r3, r3, #10
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	4a5d      	ldr	r2, [pc, #372]	; (8005b9c <USB_EPStartXfer+0x11fc>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	23cc      	movs	r3, #204	; 0xcc
 8005a2c:	18fb      	adds	r3, r7, r3
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	801a      	strh	r2, [r3, #0]
 8005a32:	e025      	b.n	8005a80 <USB_EPStartXfer+0x10e0>
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	785b      	ldrb	r3, [r3, #1]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d121      	bne.n	8005a80 <USB_EPStartXfer+0x10e0>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	21d8      	movs	r1, #216	; 0xd8
 8005a40:	187a      	adds	r2, r7, r1
 8005a42:	6013      	str	r3, [r2, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2250      	movs	r2, #80	; 0x50
 8005a48:	5a9b      	ldrh	r3, [r3, r2]
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	001a      	movs	r2, r3
 8005a4e:	187b      	adds	r3, r7, r1
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	189b      	adds	r3, r3, r2
 8005a54:	187a      	adds	r2, r7, r1
 8005a56:	6013      	str	r3, [r2, #0]
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	00da      	lsls	r2, r3, #3
 8005a5e:	187b      	adds	r3, r7, r1
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	18d3      	adds	r3, r2, r3
 8005a64:	4a4b      	ldr	r2, [pc, #300]	; (8005b94 <USB_EPStartXfer+0x11f4>)
 8005a66:	4694      	mov	ip, r2
 8005a68:	4463      	add	r3, ip
 8005a6a:	21d4      	movs	r1, #212	; 0xd4
 8005a6c:	187a      	adds	r2, r7, r1
 8005a6e:	6013      	str	r3, [r2, #0]
 8005a70:	2386      	movs	r3, #134	; 0x86
 8005a72:	005b      	lsls	r3, r3, #1
 8005a74:	18fb      	adds	r3, r7, r3
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	187b      	adds	r3, r7, r1
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	801a      	strh	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	22c8      	movs	r2, #200	; 0xc8
 8005a84:	18ba      	adds	r2, r7, r2
 8005a86:	6013      	str	r3, [r2, #0]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	785b      	ldrb	r3, [r3, #1]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d000      	beq.n	8005a92 <USB_EPStartXfer+0x10f2>
 8005a90:	e086      	b.n	8005ba0 <USB_EPStartXfer+0x1200>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	21c0      	movs	r1, #192	; 0xc0
 8005a96:	187a      	adds	r2, r7, r1
 8005a98:	6013      	str	r3, [r2, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2250      	movs	r2, #80	; 0x50
 8005a9e:	5a9b      	ldrh	r3, [r3, r2]
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	001a      	movs	r2, r3
 8005aa4:	187b      	adds	r3, r7, r1
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	189b      	adds	r3, r3, r2
 8005aaa:	187a      	adds	r2, r7, r1
 8005aac:	6013      	str	r3, [r2, #0]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	00da      	lsls	r2, r3, #3
 8005ab4:	187b      	adds	r3, r7, r1
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	18d3      	adds	r3, r2, r3
 8005aba:	4a33      	ldr	r2, [pc, #204]	; (8005b88 <USB_EPStartXfer+0x11e8>)
 8005abc:	4694      	mov	ip, r2
 8005abe:	4463      	add	r3, ip
 8005ac0:	22bc      	movs	r2, #188	; 0xbc
 8005ac2:	18ba      	adds	r2, r7, r2
 8005ac4:	6013      	str	r3, [r2, #0]
 8005ac6:	2386      	movs	r3, #134	; 0x86
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	18fb      	adds	r3, r7, r3
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d115      	bne.n	8005afe <USB_EPStartXfer+0x115e>
 8005ad2:	21bc      	movs	r1, #188	; 0xbc
 8005ad4:	187b      	adds	r3, r7, r1
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	4a2e      	ldr	r2, [pc, #184]	; (8005b98 <USB_EPStartXfer+0x11f8>)
 8005ade:	4013      	ands	r3, r2
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	187b      	adds	r3, r7, r1
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	801a      	strh	r2, [r3, #0]
 8005ae8:	187b      	adds	r3, r7, r1
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	4a2a      	ldr	r2, [pc, #168]	; (8005b9c <USB_EPStartXfer+0x11fc>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	187b      	adds	r3, r7, r1
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	801a      	strh	r2, [r3, #0]
 8005afc:	e076      	b.n	8005bec <USB_EPStartXfer+0x124c>
 8005afe:	2386      	movs	r3, #134	; 0x86
 8005b00:	005b      	lsls	r3, r3, #1
 8005b02:	18fb      	adds	r3, r7, r3
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b3e      	cmp	r3, #62	; 0x3e
 8005b08:	d81d      	bhi.n	8005b46 <USB_EPStartXfer+0x11a6>
 8005b0a:	2286      	movs	r2, #134	; 0x86
 8005b0c:	0052      	lsls	r2, r2, #1
 8005b0e:	18bb      	adds	r3, r7, r2
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	085b      	lsrs	r3, r3, #1
 8005b14:	21dc      	movs	r1, #220	; 0xdc
 8005b16:	1879      	adds	r1, r7, r1
 8005b18:	600b      	str	r3, [r1, #0]
 8005b1a:	18bb      	adds	r3, r7, r2
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	4013      	ands	r3, r2
 8005b22:	d005      	beq.n	8005b30 <USB_EPStartXfer+0x1190>
 8005b24:	22dc      	movs	r2, #220	; 0xdc
 8005b26:	18bb      	adds	r3, r7, r2
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	18ba      	adds	r2, r7, r2
 8005b2e:	6013      	str	r3, [r2, #0]
 8005b30:	23dc      	movs	r3, #220	; 0xdc
 8005b32:	18fb      	adds	r3, r7, r3
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	029b      	lsls	r3, r3, #10
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	23bc      	movs	r3, #188	; 0xbc
 8005b3e:	18fb      	adds	r3, r7, r3
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	801a      	strh	r2, [r3, #0]
 8005b44:	e052      	b.n	8005bec <USB_EPStartXfer+0x124c>
 8005b46:	2286      	movs	r2, #134	; 0x86
 8005b48:	0052      	lsls	r2, r2, #1
 8005b4a:	18bb      	adds	r3, r7, r2
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	095b      	lsrs	r3, r3, #5
 8005b50:	21dc      	movs	r1, #220	; 0xdc
 8005b52:	1879      	adds	r1, r7, r1
 8005b54:	600b      	str	r3, [r1, #0]
 8005b56:	18bb      	adds	r3, r7, r2
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	221f      	movs	r2, #31
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	d105      	bne.n	8005b6c <USB_EPStartXfer+0x11cc>
 8005b60:	22dc      	movs	r2, #220	; 0xdc
 8005b62:	18bb      	adds	r3, r7, r2
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	3b01      	subs	r3, #1
 8005b68:	18ba      	adds	r2, r7, r2
 8005b6a:	6013      	str	r3, [r2, #0]
 8005b6c:	23dc      	movs	r3, #220	; 0xdc
 8005b6e:	18fb      	adds	r3, r7, r3
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	029b      	lsls	r3, r3, #10
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	4a08      	ldr	r2, [pc, #32]	; (8005b9c <USB_EPStartXfer+0x11fc>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	23bc      	movs	r3, #188	; 0xbc
 8005b80:	18fb      	adds	r3, r7, r3
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	801a      	strh	r2, [r3, #0]
 8005b86:	e031      	b.n	8005bec <USB_EPStartXfer+0x124c>
 8005b88:	00000406 	.word	0x00000406
 8005b8c:	ffff8f8f 	.word	0xffff8f8f
 8005b90:	ffff80c0 	.word	0xffff80c0
 8005b94:	00000402 	.word	0x00000402
 8005b98:	ffff83ff 	.word	0xffff83ff
 8005b9c:	ffff8000 	.word	0xffff8000
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	785b      	ldrb	r3, [r3, #1]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d121      	bne.n	8005bec <USB_EPStartXfer+0x124c>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2250      	movs	r2, #80	; 0x50
 8005bac:	5a9b      	ldrh	r3, [r3, r2]
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	001a      	movs	r2, r3
 8005bb2:	21c8      	movs	r1, #200	; 0xc8
 8005bb4:	187b      	adds	r3, r7, r1
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	189b      	adds	r3, r3, r2
 8005bba:	187a      	adds	r2, r7, r1
 8005bbc:	6013      	str	r3, [r2, #0]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	00da      	lsls	r2, r3, #3
 8005bc4:	187b      	adds	r3, r7, r1
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	18d3      	adds	r3, r2, r3
 8005bca:	4a1d      	ldr	r2, [pc, #116]	; (8005c40 <USB_EPStartXfer+0x12a0>)
 8005bcc:	4694      	mov	ip, r2
 8005bce:	4463      	add	r3, ip
 8005bd0:	21c4      	movs	r1, #196	; 0xc4
 8005bd2:	187a      	adds	r2, r7, r1
 8005bd4:	6013      	str	r3, [r2, #0]
 8005bd6:	2386      	movs	r3, #134	; 0x86
 8005bd8:	005b      	lsls	r3, r3, #1
 8005bda:	18fb      	adds	r3, r7, r3
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	187b      	adds	r3, r7, r1
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	801a      	strh	r2, [r3, #0]
 8005be6:	e001      	b.n	8005bec <USB_EPStartXfer+0x124c>
      }
      else
      {
        return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e025      	b.n	8005c38 <USB_EPStartXfer+0x1298>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	18d3      	adds	r3, r2, r3
 8005bf6:	881b      	ldrh	r3, [r3, #0]
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	208e      	movs	r0, #142	; 0x8e
 8005bfc:	183b      	adds	r3, r7, r0
 8005bfe:	4911      	ldr	r1, [pc, #68]	; (8005c44 <USB_EPStartXfer+0x12a4>)
 8005c00:	400a      	ands	r2, r1
 8005c02:	801a      	strh	r2, [r3, #0]
 8005c04:	183b      	adds	r3, r7, r0
 8005c06:	183a      	adds	r2, r7, r0
 8005c08:	8812      	ldrh	r2, [r2, #0]
 8005c0a:	2180      	movs	r1, #128	; 0x80
 8005c0c:	0149      	lsls	r1, r1, #5
 8005c0e:	404a      	eors	r2, r1
 8005c10:	801a      	strh	r2, [r3, #0]
 8005c12:	183b      	adds	r3, r7, r0
 8005c14:	183a      	adds	r2, r7, r0
 8005c16:	8812      	ldrh	r2, [r2, #0]
 8005c18:	2180      	movs	r1, #128	; 0x80
 8005c1a:	0189      	lsls	r1, r1, #6
 8005c1c:	404a      	eors	r2, r1
 8005c1e:	801a      	strh	r2, [r3, #0]
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	18d3      	adds	r3, r2, r3
 8005c2a:	183a      	adds	r2, r7, r0
 8005c2c:	8812      	ldrh	r2, [r2, #0]
 8005c2e:	4906      	ldr	r1, [pc, #24]	; (8005c48 <USB_EPStartXfer+0x12a8>)
 8005c30:	430a      	orrs	r2, r1
 8005c32:	b292      	uxth	r2, r2
 8005c34:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	0018      	movs	r0, r3
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	b044      	add	sp, #272	; 0x110
 8005c3e:	bdb0      	pop	{r4, r5, r7, pc}
 8005c40:	00000406 	.word	0x00000406
 8005c44:	ffffbf8f 	.word	0xffffbf8f
 8005c48:	ffff8080 	.word	0xffff8080

08005c4c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	785b      	ldrb	r3, [r3, #1]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d01d      	beq.n	8005c9a <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	18d3      	adds	r3, r2, r3
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	200c      	movs	r0, #12
 8005c6e:	183b      	adds	r3, r7, r0
 8005c70:	491b      	ldr	r1, [pc, #108]	; (8005ce0 <USB_EPSetStall+0x94>)
 8005c72:	400a      	ands	r2, r1
 8005c74:	801a      	strh	r2, [r3, #0]
 8005c76:	183b      	adds	r3, r7, r0
 8005c78:	183a      	adds	r2, r7, r0
 8005c7a:	8812      	ldrh	r2, [r2, #0]
 8005c7c:	2110      	movs	r1, #16
 8005c7e:	404a      	eors	r2, r1
 8005c80:	801a      	strh	r2, [r3, #0]
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	18d3      	adds	r3, r2, r3
 8005c8c:	183a      	adds	r2, r7, r0
 8005c8e:	8812      	ldrh	r2, [r2, #0]
 8005c90:	4914      	ldr	r1, [pc, #80]	; (8005ce4 <USB_EPSetStall+0x98>)
 8005c92:	430a      	orrs	r2, r1
 8005c94:	b292      	uxth	r2, r2
 8005c96:	801a      	strh	r2, [r3, #0]
 8005c98:	e01d      	b.n	8005cd6 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	18d3      	adds	r3, r2, r3
 8005ca4:	881b      	ldrh	r3, [r3, #0]
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	200e      	movs	r0, #14
 8005caa:	183b      	adds	r3, r7, r0
 8005cac:	490e      	ldr	r1, [pc, #56]	; (8005ce8 <USB_EPSetStall+0x9c>)
 8005cae:	400a      	ands	r2, r1
 8005cb0:	801a      	strh	r2, [r3, #0]
 8005cb2:	183b      	adds	r3, r7, r0
 8005cb4:	183a      	adds	r2, r7, r0
 8005cb6:	8812      	ldrh	r2, [r2, #0]
 8005cb8:	2180      	movs	r1, #128	; 0x80
 8005cba:	0149      	lsls	r1, r1, #5
 8005cbc:	404a      	eors	r2, r1
 8005cbe:	801a      	strh	r2, [r3, #0]
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	18d3      	adds	r3, r2, r3
 8005cca:	183a      	adds	r2, r7, r0
 8005ccc:	8812      	ldrh	r2, [r2, #0]
 8005cce:	4905      	ldr	r1, [pc, #20]	; (8005ce4 <USB_EPSetStall+0x98>)
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	b292      	uxth	r2, r2
 8005cd4:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	0018      	movs	r0, r3
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	b004      	add	sp, #16
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	ffff8fbf 	.word	0xffff8fbf
 8005ce4:	ffff8080 	.word	0xffff8080
 8005ce8:	ffffbf8f 	.word	0xffffbf8f

08005cec <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b086      	sub	sp, #24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	7b1b      	ldrb	r3, [r3, #12]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d000      	beq.n	8005d00 <USB_EPClearStall+0x14>
 8005cfe:	e095      	b.n	8005e2c <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	785b      	ldrb	r3, [r3, #1]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d046      	beq.n	8005d96 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	18d2      	adds	r2, r2, r3
 8005d12:	2110      	movs	r1, #16
 8005d14:	187b      	adds	r3, r7, r1
 8005d16:	8812      	ldrh	r2, [r2, #0]
 8005d18:	801a      	strh	r2, [r3, #0]
 8005d1a:	187b      	adds	r3, r7, r1
 8005d1c:	881b      	ldrh	r3, [r3, #0]
 8005d1e:	2240      	movs	r2, #64	; 0x40
 8005d20:	4013      	ands	r3, r2
 8005d22:	d016      	beq.n	8005d52 <USB_EPClearStall+0x66>
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	18d3      	adds	r3, r2, r3
 8005d2e:	881b      	ldrh	r3, [r3, #0]
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	200e      	movs	r0, #14
 8005d34:	183b      	adds	r3, r7, r0
 8005d36:	4940      	ldr	r1, [pc, #256]	; (8005e38 <USB_EPClearStall+0x14c>)
 8005d38:	400a      	ands	r2, r1
 8005d3a:	801a      	strh	r2, [r3, #0]
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	18d3      	adds	r3, r2, r3
 8005d46:	183a      	adds	r2, r7, r0
 8005d48:	8812      	ldrh	r2, [r2, #0]
 8005d4a:	493c      	ldr	r1, [pc, #240]	; (8005e3c <USB_EPClearStall+0x150>)
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	b292      	uxth	r2, r2
 8005d50:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	78db      	ldrb	r3, [r3, #3]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d068      	beq.n	8005e2c <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	18d3      	adds	r3, r2, r3
 8005d64:	881b      	ldrh	r3, [r3, #0]
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	200c      	movs	r0, #12
 8005d6a:	183b      	adds	r3, r7, r0
 8005d6c:	4934      	ldr	r1, [pc, #208]	; (8005e40 <USB_EPClearStall+0x154>)
 8005d6e:	400a      	ands	r2, r1
 8005d70:	801a      	strh	r2, [r3, #0]
 8005d72:	183b      	adds	r3, r7, r0
 8005d74:	183a      	adds	r2, r7, r0
 8005d76:	8812      	ldrh	r2, [r2, #0]
 8005d78:	2120      	movs	r1, #32
 8005d7a:	404a      	eors	r2, r1
 8005d7c:	801a      	strh	r2, [r3, #0]
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	18d3      	adds	r3, r2, r3
 8005d88:	183a      	adds	r2, r7, r0
 8005d8a:	8812      	ldrh	r2, [r2, #0]
 8005d8c:	492d      	ldr	r1, [pc, #180]	; (8005e44 <USB_EPClearStall+0x158>)
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	b292      	uxth	r2, r2
 8005d92:	801a      	strh	r2, [r3, #0]
 8005d94:	e04a      	b.n	8005e2c <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	18d2      	adds	r2, r2, r3
 8005da0:	2116      	movs	r1, #22
 8005da2:	187b      	adds	r3, r7, r1
 8005da4:	8812      	ldrh	r2, [r2, #0]
 8005da6:	801a      	strh	r2, [r3, #0]
 8005da8:	187b      	adds	r3, r7, r1
 8005daa:	881a      	ldrh	r2, [r3, #0]
 8005dac:	2380      	movs	r3, #128	; 0x80
 8005dae:	01db      	lsls	r3, r3, #7
 8005db0:	4013      	ands	r3, r2
 8005db2:	d016      	beq.n	8005de2 <USB_EPClearStall+0xf6>
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	18d3      	adds	r3, r2, r3
 8005dbe:	881b      	ldrh	r3, [r3, #0]
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	2014      	movs	r0, #20
 8005dc4:	183b      	adds	r3, r7, r0
 8005dc6:	491c      	ldr	r1, [pc, #112]	; (8005e38 <USB_EPClearStall+0x14c>)
 8005dc8:	400a      	ands	r2, r1
 8005dca:	801a      	strh	r2, [r3, #0]
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	18d3      	adds	r3, r2, r3
 8005dd6:	183a      	adds	r2, r7, r0
 8005dd8:	8812      	ldrh	r2, [r2, #0]
 8005dda:	491b      	ldr	r1, [pc, #108]	; (8005e48 <USB_EPClearStall+0x15c>)
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	b292      	uxth	r2, r2
 8005de0:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	18d3      	adds	r3, r2, r3
 8005dec:	881b      	ldrh	r3, [r3, #0]
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	2012      	movs	r0, #18
 8005df2:	183b      	adds	r3, r7, r0
 8005df4:	4915      	ldr	r1, [pc, #84]	; (8005e4c <USB_EPClearStall+0x160>)
 8005df6:	400a      	ands	r2, r1
 8005df8:	801a      	strh	r2, [r3, #0]
 8005dfa:	183b      	adds	r3, r7, r0
 8005dfc:	183a      	adds	r2, r7, r0
 8005dfe:	8812      	ldrh	r2, [r2, #0]
 8005e00:	2180      	movs	r1, #128	; 0x80
 8005e02:	0149      	lsls	r1, r1, #5
 8005e04:	404a      	eors	r2, r1
 8005e06:	801a      	strh	r2, [r3, #0]
 8005e08:	183b      	adds	r3, r7, r0
 8005e0a:	183a      	adds	r2, r7, r0
 8005e0c:	8812      	ldrh	r2, [r2, #0]
 8005e0e:	2180      	movs	r1, #128	; 0x80
 8005e10:	0189      	lsls	r1, r1, #6
 8005e12:	404a      	eors	r2, r1
 8005e14:	801a      	strh	r2, [r3, #0]
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	18d3      	adds	r3, r2, r3
 8005e20:	183a      	adds	r2, r7, r0
 8005e22:	8812      	ldrh	r2, [r2, #0]
 8005e24:	4907      	ldr	r1, [pc, #28]	; (8005e44 <USB_EPClearStall+0x158>)
 8005e26:	430a      	orrs	r2, r1
 8005e28:	b292      	uxth	r2, r2
 8005e2a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	0018      	movs	r0, r3
 8005e30:	46bd      	mov	sp, r7
 8005e32:	b006      	add	sp, #24
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	46c0      	nop			; (mov r8, r8)
 8005e38:	ffff8f8f 	.word	0xffff8f8f
 8005e3c:	ffff80c0 	.word	0xffff80c0
 8005e40:	ffff8fbf 	.word	0xffff8fbf
 8005e44:	ffff8080 	.word	0xffff8080
 8005e48:	ffffc080 	.word	0xffffc080
 8005e4c:	ffffbf8f 	.word	0xffffbf8f

08005e50 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	000a      	movs	r2, r1
 8005e5a:	1cfb      	adds	r3, r7, #3
 8005e5c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8005e5e:	1cfb      	adds	r3, r7, #3
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d103      	bne.n	8005e6e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	224c      	movs	r2, #76	; 0x4c
 8005e6a:	2180      	movs	r1, #128	; 0x80
 8005e6c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	0018      	movs	r0, r3
 8005e72:	46bd      	mov	sp, r7
 8005e74:	b002      	add	sp, #8
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2258      	movs	r2, #88	; 0x58
 8005e84:	5a9b      	ldrh	r3, [r3, r2]
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	4a05      	ldr	r2, [pc, #20]	; (8005ea0 <USB_DevConnect+0x28>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	b299      	uxth	r1, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2258      	movs	r2, #88	; 0x58
 8005e92:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	0018      	movs	r0, r3
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	b002      	add	sp, #8
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	46c0      	nop			; (mov r8, r8)
 8005ea0:	ffff8000 	.word	0xffff8000

08005ea4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2244      	movs	r2, #68	; 0x44
 8005eb0:	5a9b      	ldrh	r3, [r3, r2]
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
}
 8005eb8:	0018      	movs	r0, r3
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	b004      	add	sp, #16
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b08c      	sub	sp, #48	; 0x30
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	0019      	movs	r1, r3
 8005ecc:	1dbb      	adds	r3, r7, #6
 8005ece:	801a      	strh	r2, [r3, #0]
 8005ed0:	1d3b      	adds	r3, r7, #4
 8005ed2:	1c0a      	adds	r2, r1, #0
 8005ed4:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005ed6:	1d3b      	adds	r3, r7, #4
 8005ed8:	881b      	ldrh	r3, [r3, #0]
 8005eda:	3301      	adds	r3, #1
 8005edc:	085b      	lsrs	r3, r3, #1
 8005ede:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005ee8:	1dbb      	adds	r3, r7, #6
 8005eea:	881a      	ldrh	r2, [r3, #0]
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	18d3      	adds	r3, r2, r3
 8005ef0:	2280      	movs	r2, #128	; 0x80
 8005ef2:	00d2      	lsls	r2, r2, #3
 8005ef4:	4694      	mov	ip, r2
 8005ef6:	4463      	add	r3, ip
 8005ef8:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005efa:	6a3b      	ldr	r3, [r7, #32]
 8005efc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005efe:	e01b      	b.n	8005f38 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f08:	3301      	adds	r3, #1
 8005f0a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	021b      	lsls	r3, r3, #8
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	001a      	movs	r2, r3
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f24:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f28:	3302      	adds	r3, #2
 8005f2a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	3301      	adds	r3, #1
 8005f30:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f34:	3b01      	subs	r3, #1
 8005f36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1e0      	bne.n	8005f00 <USB_WritePMA+0x40>
  }
}
 8005f3e:	46c0      	nop			; (mov r8, r8)
 8005f40:	46bd      	mov	sp, r7
 8005f42:	b00c      	add	sp, #48	; 0x30
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b08a      	sub	sp, #40	; 0x28
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	60f8      	str	r0, [r7, #12]
 8005f4e:	60b9      	str	r1, [r7, #8]
 8005f50:	0019      	movs	r1, r3
 8005f52:	1dbb      	adds	r3, r7, #6
 8005f54:	801a      	strh	r2, [r3, #0]
 8005f56:	1d3b      	adds	r3, r7, #4
 8005f58:	1c0a      	adds	r2, r1, #0
 8005f5a:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005f5c:	1d3b      	adds	r3, r7, #4
 8005f5e:	881b      	ldrh	r3, [r3, #0]
 8005f60:	085b      	lsrs	r3, r3, #1
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005f6e:	1dbb      	adds	r3, r7, #6
 8005f70:	881a      	ldrh	r2, [r3, #0]
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	18d3      	adds	r3, r2, r3
 8005f76:	2280      	movs	r2, #128	; 0x80
 8005f78:	00d2      	lsls	r2, r2, #3
 8005f7a:	4694      	mov	ip, r2
 8005f7c:	4463      	add	r3, ip
 8005f7e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	627b      	str	r3, [r7, #36]	; 0x24
 8005f84:	e018      	b.n	8005fb8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	881b      	ldrh	r3, [r3, #0]
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005f8e:	6a3b      	ldr	r3, [r7, #32]
 8005f90:	3302      	adds	r3, #2
 8005f92:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	b2da      	uxtb	r2, r3
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	0a1b      	lsrs	r3, r3, #8
 8005fa6:	b2da      	uxtb	r2, r3
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1e3      	bne.n	8005f86 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005fbe:	1d3b      	adds	r3, r7, #4
 8005fc0:	881b      	ldrh	r3, [r3, #0]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d007      	beq.n	8005fdc <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
 8005fce:	881b      	ldrh	r3, [r3, #0]
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	b2da      	uxtb	r2, r3
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	701a      	strb	r2, [r3, #0]
  }
}
 8005fdc:	46c0      	nop			; (mov r8, r8)
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	b00a      	add	sp, #40	; 0x28
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	000a      	movs	r2, r1
 8005fee:	1cfb      	adds	r3, r7, #3
 8005ff0:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8005ff2:	230f      	movs	r3, #15
 8005ff4:	18fb      	adds	r3, r7, r3
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	7c1b      	ldrb	r3, [r3, #16]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d116      	bne.n	8006030 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006002:	2380      	movs	r3, #128	; 0x80
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	2202      	movs	r2, #2
 800600a:	2181      	movs	r1, #129	; 0x81
 800600c:	f001 ff90 	bl	8007f30 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006016:	2380      	movs	r3, #128	; 0x80
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	2202      	movs	r2, #2
 800601e:	2101      	movs	r1, #1
 8006020:	f001 ff86 	bl	8007f30 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	23ac      	movs	r3, #172	; 0xac
 8006028:	005b      	lsls	r3, r3, #1
 800602a:	2101      	movs	r1, #1
 800602c:	50d1      	str	r1, [r2, r3]
 800602e:	e013      	b.n	8006058 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	2340      	movs	r3, #64	; 0x40
 8006034:	2202      	movs	r2, #2
 8006036:	2181      	movs	r1, #129	; 0x81
 8006038:	f001 ff7a 	bl	8007f30 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	2340      	movs	r3, #64	; 0x40
 8006046:	2202      	movs	r2, #2
 8006048:	2101      	movs	r1, #1
 800604a:	f001 ff71 	bl	8007f30 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	23ac      	movs	r3, #172	; 0xac
 8006052:	005b      	lsls	r3, r3, #1
 8006054:	2101      	movs	r1, #1
 8006056:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	2308      	movs	r3, #8
 800605c:	2203      	movs	r2, #3
 800605e:	2182      	movs	r1, #130	; 0x82
 8006060:	f001 ff66 	bl	8007f30 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800606a:	2387      	movs	r3, #135	; 0x87
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	0018      	movs	r0, r3
 8006070:	f002 f8fc 	bl	800826c <USBD_static_malloc>
 8006074:	0001      	movs	r1, r0
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	23a4      	movs	r3, #164	; 0xa4
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	50d1      	str	r1, [r2, r3]

  if(pdev->pClassData == NULL)
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	23a4      	movs	r3, #164	; 0xa4
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	58d3      	ldr	r3, [r2, r3]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d104      	bne.n	8006094 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800608a:	230f      	movs	r3, #15
 800608c:	18fb      	adds	r3, r7, r3
 800608e:	2201      	movs	r2, #1
 8006090:	701a      	strb	r2, [r3, #0]
 8006092:	e02c      	b.n	80060ee <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	23a4      	movs	r3, #164	; 0xa4
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	58d3      	ldr	r3, [r2, r3]
 800609c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	23a5      	movs	r3, #165	; 0xa5
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	58d3      	ldr	r3, [r2, r3]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	2385      	movs	r3, #133	; 0x85
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	2100      	movs	r1, #0
 80060b2:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	2386      	movs	r3, #134	; 0x86
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	2100      	movs	r1, #0
 80060bc:	50d1      	str	r1, [r2, r3]

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	7c1b      	ldrb	r3, [r3, #16]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10a      	bne.n	80060dc <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	2381      	movs	r3, #129	; 0x81
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	58d2      	ldr	r2, [r2, r3]
 80060ce:	2380      	movs	r3, #128	; 0x80
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	2101      	movs	r1, #1
 80060d6:	f002 f87b 	bl	80081d0 <USBD_LL_PrepareReceive>
 80060da:	e008      	b.n	80060ee <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	2381      	movs	r3, #129	; 0x81
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	58d2      	ldr	r2, [r2, r3]
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	2340      	movs	r3, #64	; 0x40
 80060e8:	2101      	movs	r1, #1
 80060ea:	f002 f871 	bl	80081d0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80060ee:	230f      	movs	r3, #15
 80060f0:	18fb      	adds	r3, r7, r3
 80060f2:	781b      	ldrb	r3, [r3, #0]
}
 80060f4:	0018      	movs	r0, r3
 80060f6:	46bd      	mov	sp, r7
 80060f8:	b004      	add	sp, #16
 80060fa:	bd80      	pop	{r7, pc}

080060fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	000a      	movs	r2, r1
 8006106:	1cfb      	adds	r3, r7, #3
 8006108:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800610a:	230f      	movs	r3, #15
 800610c:	18fb      	adds	r3, r7, r3
 800610e:	2200      	movs	r2, #0
 8006110:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2181      	movs	r1, #129	; 0x81
 8006116:	0018      	movs	r0, r3
 8006118:	f001 ff41 	bl	8007f9e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2101      	movs	r1, #1
 8006126:	0018      	movs	r0, r3
 8006128:	f001 ff39 	bl	8007f9e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	23ac      	movs	r3, #172	; 0xac
 8006130:	005b      	lsls	r3, r3, #1
 8006132:	2100      	movs	r1, #0
 8006134:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2182      	movs	r1, #130	; 0x82
 800613a:	0018      	movs	r0, r3
 800613c:	f001 ff2f 	bl	8007f9e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	23a4      	movs	r3, #164	; 0xa4
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	58d3      	ldr	r3, [r2, r3]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d011      	beq.n	8006176 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	23a5      	movs	r3, #165	; 0xa5
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	58d3      	ldr	r3, [r2, r3]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	23a4      	movs	r3, #164	; 0xa4
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	58d3      	ldr	r3, [r2, r3]
 8006166:	0018      	movs	r0, r3
 8006168:	f002 f88c 	bl	8008284 <USBD_static_free>
    pdev->pClassData = NULL;
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	23a4      	movs	r3, #164	; 0xa4
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	2100      	movs	r1, #0
 8006174:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8006176:	230f      	movs	r3, #15
 8006178:	18fb      	adds	r3, r7, r3
 800617a:	781b      	ldrb	r3, [r3, #0]
}
 800617c:	0018      	movs	r0, r3
 800617e:	46bd      	mov	sp, r7
 8006180:	b004      	add	sp, #16
 8006182:	bd80      	pop	{r7, pc}

08006184 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	23a4      	movs	r3, #164	; 0xa4
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	58d3      	ldr	r3, [r2, r3]
 8006196:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006198:	230f      	movs	r3, #15
 800619a:	18fb      	adds	r3, r7, r3
 800619c:	2200      	movs	r2, #0
 800619e:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 80061a0:	230c      	movs	r3, #12
 80061a2:	18fb      	adds	r3, r7, r3
 80061a4:	2200      	movs	r2, #0
 80061a6:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 80061a8:	2317      	movs	r3, #23
 80061aa:	18fb      	adds	r3, r7, r3
 80061ac:	2200      	movs	r2, #0
 80061ae:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	001a      	movs	r2, r3
 80061b6:	2360      	movs	r3, #96	; 0x60
 80061b8:	4013      	ands	r3, r2
 80061ba:	d03d      	beq.n	8006238 <USBD_CDC_Setup+0xb4>
 80061bc:	2b20      	cmp	r3, #32
 80061be:	d000      	beq.n	80061c2 <USBD_CDC_Setup+0x3e>
 80061c0:	e092      	b.n	80062e8 <USBD_CDC_Setup+0x164>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	88db      	ldrh	r3, [r3, #6]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d02b      	beq.n	8006222 <USBD_CDC_Setup+0x9e>
    {
      if (req->bmRequest & 0x80U)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	b25b      	sxtb	r3, r3
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	da12      	bge.n	80061fa <USBD_CDC_Setup+0x76>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	23a5      	movs	r3, #165	; 0xa5
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	58d3      	ldr	r3, [r2, r3]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	683a      	ldr	r2, [r7, #0]
 80061e0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 80061e2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80061e4:	683a      	ldr	r2, [r7, #0]
 80061e6:	88d2      	ldrh	r2, [r2, #6]
 80061e8:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80061ea:	6939      	ldr	r1, [r7, #16]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	88da      	ldrh	r2, [r3, #6]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	0018      	movs	r0, r3
 80061f4:	f001 fadc 	bl	80077b0 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 80061f8:	e081      	b.n	80062fe <USBD_CDC_Setup+0x17a>
        hcdc->CmdOpCode = req->bRequest;
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	7859      	ldrb	r1, [r3, #1]
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	2380      	movs	r3, #128	; 0x80
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	54d1      	strb	r1, [r2, r3]
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	88db      	ldrh	r3, [r3, #6]
 800620a:	b2d9      	uxtb	r1, r3
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	4a3f      	ldr	r2, [pc, #252]	; (800630c <USBD_CDC_Setup+0x188>)
 8006210:	5499      	strb	r1, [r3, r2]
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006212:	6939      	ldr	r1, [r7, #16]
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	88da      	ldrh	r2, [r3, #6]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	0018      	movs	r0, r3
 800621c:	f001 fafb 	bl	8007816 <USBD_CtlPrepareRx>
    break;
 8006220:	e06d      	b.n	80062fe <USBD_CDC_Setup+0x17a>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	23a5      	movs	r3, #165	; 0xa5
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	58d3      	ldr	r3, [r2, r3]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	7850      	ldrb	r0, [r2, #1]
 8006230:	6839      	ldr	r1, [r7, #0]
 8006232:	2200      	movs	r2, #0
 8006234:	4798      	blx	r3
    break;
 8006236:	e062      	b.n	80062fe <USBD_CDC_Setup+0x17a>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	785b      	ldrb	r3, [r3, #1]
 800623c:	2b0a      	cmp	r3, #10
 800623e:	d01c      	beq.n	800627a <USBD_CDC_Setup+0xf6>
 8006240:	2b0b      	cmp	r3, #11
 8006242:	d033      	beq.n	80062ac <USBD_CDC_Setup+0x128>
 8006244:	2b00      	cmp	r3, #0
 8006246:	d142      	bne.n	80062ce <USBD_CDC_Setup+0x14a>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	239d      	movs	r3, #157	; 0x9d
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	5cd3      	ldrb	r3, [r2, r3]
 8006250:	2b03      	cmp	r3, #3
 8006252:	d107      	bne.n	8006264 <USBD_CDC_Setup+0xe0>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8006254:	230c      	movs	r3, #12
 8006256:	18f9      	adds	r1, r7, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2202      	movs	r2, #2
 800625c:	0018      	movs	r0, r3
 800625e:	f001 faa7 	bl	80077b0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006262:	e040      	b.n	80062e6 <USBD_CDC_Setup+0x162>
        USBD_CtlError (pdev, req);
 8006264:	683a      	ldr	r2, [r7, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	0011      	movs	r1, r2
 800626a:	0018      	movs	r0, r3
 800626c:	f001 fa21 	bl	80076b2 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006270:	2317      	movs	r3, #23
 8006272:	18fb      	adds	r3, r7, r3
 8006274:	2202      	movs	r2, #2
 8006276:	701a      	strb	r2, [r3, #0]
      break;
 8006278:	e035      	b.n	80062e6 <USBD_CDC_Setup+0x162>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	239d      	movs	r3, #157	; 0x9d
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	5cd3      	ldrb	r3, [r2, r3]
 8006282:	2b03      	cmp	r3, #3
 8006284:	d107      	bne.n	8006296 <USBD_CDC_Setup+0x112>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8006286:	230f      	movs	r3, #15
 8006288:	18f9      	adds	r1, r7, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2201      	movs	r2, #1
 800628e:	0018      	movs	r0, r3
 8006290:	f001 fa8e 	bl	80077b0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006294:	e027      	b.n	80062e6 <USBD_CDC_Setup+0x162>
        USBD_CtlError (pdev, req);
 8006296:	683a      	ldr	r2, [r7, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	0011      	movs	r1, r2
 800629c:	0018      	movs	r0, r3
 800629e:	f001 fa08 	bl	80076b2 <USBD_CtlError>
			  ret = USBD_FAIL;
 80062a2:	2317      	movs	r3, #23
 80062a4:	18fb      	adds	r3, r7, r3
 80062a6:	2202      	movs	r2, #2
 80062a8:	701a      	strb	r2, [r3, #0]
      break;
 80062aa:	e01c      	b.n	80062e6 <USBD_CDC_Setup+0x162>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	239d      	movs	r3, #157	; 0x9d
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	5cd3      	ldrb	r3, [r2, r3]
 80062b4:	2b03      	cmp	r3, #3
 80062b6:	d015      	beq.n	80062e4 <USBD_CDC_Setup+0x160>
      {
        USBD_CtlError (pdev, req);
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	0011      	movs	r1, r2
 80062be:	0018      	movs	r0, r3
 80062c0:	f001 f9f7 	bl	80076b2 <USBD_CtlError>
			  ret = USBD_FAIL;
 80062c4:	2317      	movs	r3, #23
 80062c6:	18fb      	adds	r3, r7, r3
 80062c8:	2202      	movs	r2, #2
 80062ca:	701a      	strb	r2, [r3, #0]
      }
      break;
 80062cc:	e00a      	b.n	80062e4 <USBD_CDC_Setup+0x160>

    default:
      USBD_CtlError (pdev, req);
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	0011      	movs	r1, r2
 80062d4:	0018      	movs	r0, r3
 80062d6:	f001 f9ec 	bl	80076b2 <USBD_CtlError>
      ret = USBD_FAIL;
 80062da:	2317      	movs	r3, #23
 80062dc:	18fb      	adds	r3, r7, r3
 80062de:	2202      	movs	r2, #2
 80062e0:	701a      	strb	r2, [r3, #0]
      break;
 80062e2:	e000      	b.n	80062e6 <USBD_CDC_Setup+0x162>
      break;
 80062e4:	46c0      	nop			; (mov r8, r8)
    }
    break;
 80062e6:	e00a      	b.n	80062fe <USBD_CDC_Setup+0x17a>

  default:
    USBD_CtlError (pdev, req);
 80062e8:	683a      	ldr	r2, [r7, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	0011      	movs	r1, r2
 80062ee:	0018      	movs	r0, r3
 80062f0:	f001 f9df 	bl	80076b2 <USBD_CtlError>
    ret = USBD_FAIL;
 80062f4:	2317      	movs	r3, #23
 80062f6:	18fb      	adds	r3, r7, r3
 80062f8:	2202      	movs	r2, #2
 80062fa:	701a      	strb	r2, [r3, #0]
    break;
 80062fc:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80062fe:	2317      	movs	r3, #23
 8006300:	18fb      	adds	r3, r7, r3
 8006302:	781b      	ldrb	r3, [r3, #0]
}
 8006304:	0018      	movs	r0, r3
 8006306:	46bd      	mov	sp, r7
 8006308:	b006      	add	sp, #24
 800630a:	bd80      	pop	{r7, pc}
 800630c:	00000201 	.word	0x00000201

08006310 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	000a      	movs	r2, r1
 800631a:	1cfb      	adds	r3, r7, #3
 800631c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	23a4      	movs	r3, #164	; 0xa4
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	58d3      	ldr	r3, [r2, r3]
 8006326:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	23a6      	movs	r3, #166	; 0xa6
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	58d3      	ldr	r3, [r2, r3]
 8006330:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	23a4      	movs	r3, #164	; 0xa4
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	58d3      	ldr	r3, [r2, r3]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d03e      	beq.n	80063bc <USBD_CDC_DataIn+0xac>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800633e:	1cfb      	adds	r3, r7, #3
 8006340:	781a      	ldrb	r2, [r3, #0]
 8006342:	6879      	ldr	r1, [r7, #4]
 8006344:	0013      	movs	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	189b      	adds	r3, r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	18cb      	adds	r3, r1, r3
 800634e:	331c      	adds	r3, #28
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d02b      	beq.n	80063ae <USBD_CDC_DataIn+0x9e>
 8006356:	1cfb      	adds	r3, r7, #3
 8006358:	781a      	ldrb	r2, [r3, #0]
 800635a:	6879      	ldr	r1, [r7, #4]
 800635c:	0013      	movs	r3, r2
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	189b      	adds	r3, r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	18cb      	adds	r3, r1, r3
 8006366:	331c      	adds	r3, #28
 8006368:	6818      	ldr	r0, [r3, #0]
 800636a:	1cfb      	adds	r3, r7, #3
 800636c:	781a      	ldrb	r2, [r3, #0]
 800636e:	68b9      	ldr	r1, [r7, #8]
 8006370:	0013      	movs	r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	189b      	adds	r3, r3, r2
 8006376:	00db      	lsls	r3, r3, #3
 8006378:	18cb      	adds	r3, r1, r3
 800637a:	3338      	adds	r3, #56	; 0x38
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	0019      	movs	r1, r3
 8006380:	f7f9 ff48 	bl	8000214 <__aeabi_uidivmod>
 8006384:	1e0b      	subs	r3, r1, #0
 8006386:	d112      	bne.n	80063ae <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006388:	1cfb      	adds	r3, r7, #3
 800638a:	781a      	ldrb	r2, [r3, #0]
 800638c:	6879      	ldr	r1, [r7, #4]
 800638e:	0013      	movs	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	189b      	adds	r3, r3, r2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	18cb      	adds	r3, r1, r3
 8006398:	331c      	adds	r3, #28
 800639a:	2200      	movs	r2, #0
 800639c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800639e:	1cfb      	adds	r3, r7, #3
 80063a0:	7819      	ldrb	r1, [r3, #0]
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	2300      	movs	r3, #0
 80063a6:	2200      	movs	r2, #0
 80063a8:	f001 feda 	bl	8008160 <USBD_LL_Transmit>
 80063ac:	e004      	b.n	80063b8 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	2385      	movs	r3, #133	; 0x85
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	2100      	movs	r1, #0
 80063b6:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 80063b8:	2300      	movs	r3, #0
 80063ba:	e000      	b.n	80063be <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 80063bc:	2302      	movs	r3, #2
  }
}
 80063be:	0018      	movs	r0, r3
 80063c0:	46bd      	mov	sp, r7
 80063c2:	b004      	add	sp, #16
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b084      	sub	sp, #16
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	000a      	movs	r2, r1
 80063d0:	1cfb      	adds	r3, r7, #3
 80063d2:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	23a4      	movs	r3, #164	; 0xa4
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	58d3      	ldr	r3, [r2, r3]
 80063dc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80063de:	1cfb      	adds	r3, r7, #3
 80063e0:	781a      	ldrb	r2, [r3, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	0011      	movs	r1, r2
 80063e6:	0018      	movs	r0, r3
 80063e8:	f001 ff2a 	bl	8008240 <USBD_LL_GetRxDataSize>
 80063ec:	0001      	movs	r1, r0
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	2383      	movs	r3, #131	; 0x83
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	23a4      	movs	r3, #164	; 0xa4
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	58d3      	ldr	r3, [r2, r3]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d011      	beq.n	8006426 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	23a5      	movs	r3, #165	; 0xa5
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	58d3      	ldr	r3, [r2, r3]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	68f9      	ldr	r1, [r7, #12]
 800640e:	2281      	movs	r2, #129	; 0x81
 8006410:	0092      	lsls	r2, r2, #2
 8006412:	5888      	ldr	r0, [r1, r2]
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	2183      	movs	r1, #131	; 0x83
 8006418:	0089      	lsls	r1, r1, #2
 800641a:	468c      	mov	ip, r1
 800641c:	4462      	add	r2, ip
 800641e:	0011      	movs	r1, r2
 8006420:	4798      	blx	r3

    return USBD_OK;
 8006422:	2300      	movs	r3, #0
 8006424:	e000      	b.n	8006428 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8006426:	2302      	movs	r3, #2
  }
}
 8006428:	0018      	movs	r0, r3
 800642a:	46bd      	mov	sp, r7
 800642c:	b004      	add	sp, #16
 800642e:	bd80      	pop	{r7, pc}

08006430 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8006430:	b590      	push	{r4, r7, lr}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	23a4      	movs	r3, #164	; 0xa4
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	58d3      	ldr	r3, [r2, r3]
 8006440:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	23a5      	movs	r3, #165	; 0xa5
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	58d3      	ldr	r3, [r2, r3]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d01a      	beq.n	8006484 <USBD_CDC_EP0_RxReady+0x54>
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	2380      	movs	r3, #128	; 0x80
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	5cd3      	ldrb	r3, [r2, r3]
 8006456:	2bff      	cmp	r3, #255	; 0xff
 8006458:	d014      	beq.n	8006484 <USBD_CDC_EP0_RxReady+0x54>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	23a5      	movs	r3, #165	; 0xa5
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	58d3      	ldr	r3, [r2, r3]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	68f9      	ldr	r1, [r7, #12]
 8006466:	2280      	movs	r2, #128	; 0x80
 8006468:	0092      	lsls	r2, r2, #2
 800646a:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800646c:	68fc      	ldr	r4, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	4907      	ldr	r1, [pc, #28]	; (8006490 <USBD_CDC_EP0_RxReady+0x60>)
 8006472:	5c52      	ldrb	r2, [r2, r1]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006474:	b292      	uxth	r2, r2
 8006476:	0021      	movs	r1, r4
 8006478:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	2380      	movs	r3, #128	; 0x80
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	21ff      	movs	r1, #255	; 0xff
 8006482:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	0018      	movs	r0, r3
 8006488:	46bd      	mov	sp, r7
 800648a:	b005      	add	sp, #20
 800648c:	bd90      	pop	{r4, r7, pc}
 800648e:	46c0      	nop			; (mov r8, r8)
 8006490:	00000201 	.word	0x00000201

08006494 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2243      	movs	r2, #67	; 0x43
 80064a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80064a2:	4b02      	ldr	r3, [pc, #8]	; (80064ac <USBD_CDC_GetFSCfgDesc+0x18>)
}
 80064a4:	0018      	movs	r0, r3
 80064a6:	46bd      	mov	sp, r7
 80064a8:	b002      	add	sp, #8
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	20000098 	.word	0x20000098

080064b0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2243      	movs	r2, #67	; 0x43
 80064bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80064be:	4b02      	ldr	r3, [pc, #8]	; (80064c8 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 80064c0:	0018      	movs	r0, r3
 80064c2:	46bd      	mov	sp, r7
 80064c4:	b002      	add	sp, #8
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	20000054 	.word	0x20000054

080064cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2243      	movs	r2, #67	; 0x43
 80064d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80064da:	4b02      	ldr	r3, [pc, #8]	; (80064e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 80064dc:	0018      	movs	r0, r3
 80064de:	46bd      	mov	sp, r7
 80064e0:	b002      	add	sp, #8
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	200000dc 	.word	0x200000dc

080064e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	220a      	movs	r2, #10
 80064f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80064f6:	4b02      	ldr	r3, [pc, #8]	; (8006500 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 80064f8:	0018      	movs	r0, r3
 80064fa:	46bd      	mov	sp, r7
 80064fc:	b002      	add	sp, #8
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	20000010 	.word	0x20000010

08006504 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800650e:	230f      	movs	r3, #15
 8006510:	18fb      	adds	r3, r7, r3
 8006512:	2202      	movs	r2, #2
 8006514:	701a      	strb	r2, [r3, #0]

  if(fops != NULL)
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d008      	beq.n	800652e <USBD_CDC_RegisterInterface+0x2a>
  {
    pdev->pUserData= fops;
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	23a5      	movs	r3, #165	; 0xa5
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	6839      	ldr	r1, [r7, #0]
 8006524:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8006526:	230f      	movs	r3, #15
 8006528:	18fb      	adds	r3, r7, r3
 800652a:	2200      	movs	r2, #0
 800652c:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800652e:	230f      	movs	r3, #15
 8006530:	18fb      	adds	r3, r7, r3
 8006532:	781b      	ldrb	r3, [r3, #0]
}
 8006534:	0018      	movs	r0, r3
 8006536:	46bd      	mov	sp, r7
 8006538:	b004      	add	sp, #16
 800653a:	bd80      	pop	{r7, pc}

0800653c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	1dbb      	adds	r3, r7, #6
 8006548:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	23a4      	movs	r3, #164	; 0xa4
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	58d3      	ldr	r3, [r2, r3]
 8006552:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	2382      	movs	r3, #130	; 0x82
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	68b9      	ldr	r1, [r7, #8]
 800655c:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800655e:	1dbb      	adds	r3, r7, #6
 8006560:	8819      	ldrh	r1, [r3, #0]
 8006562:	697a      	ldr	r2, [r7, #20]
 8006564:	2384      	movs	r3, #132	; 0x84
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	0018      	movs	r0, r3
 800656e:	46bd      	mov	sp, r7
 8006570:	b006      	add	sp, #24
 8006572:	bd80      	pop	{r7, pc}

08006574 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	23a4      	movs	r3, #164	; 0xa4
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	58d3      	ldr	r3, [r2, r3]
 8006586:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	2381      	movs	r3, #129	; 0x81
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	6839      	ldr	r1, [r7, #0]
 8006590:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	0018      	movs	r0, r3
 8006596:	46bd      	mov	sp, r7
 8006598:	b004      	add	sp, #16
 800659a:	bd80      	pop	{r7, pc}

0800659c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	23a4      	movs	r3, #164	; 0xa4
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	58d3      	ldr	r3, [r2, r3]
 80065ac:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	23a4      	movs	r3, #164	; 0xa4
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	58d3      	ldr	r3, [r2, r3]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d019      	beq.n	80065ee <USBD_CDC_ReceivePacket+0x52>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	7c1b      	ldrb	r3, [r3, #16]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10a      	bne.n	80065d8 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	2381      	movs	r3, #129	; 0x81
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	58d2      	ldr	r2, [r2, r3]
 80065ca:	2380      	movs	r3, #128	; 0x80
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	2101      	movs	r1, #1
 80065d2:	f001 fdfd 	bl	80081d0 <USBD_LL_PrepareReceive>
 80065d6:	e008      	b.n	80065ea <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	2381      	movs	r3, #129	; 0x81
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	58d2      	ldr	r2, [r2, r3]
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	2340      	movs	r3, #64	; 0x40
 80065e4:	2101      	movs	r1, #1
 80065e6:	f001 fdf3 	bl	80081d0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80065ea:	2300      	movs	r3, #0
 80065ec:	e000      	b.n	80065f0 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 80065ee:	2302      	movs	r3, #2
  }
}
 80065f0:	0018      	movs	r0, r3
 80065f2:	46bd      	mov	sp, r7
 80065f4:	b004      	add	sp, #16
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	1dfb      	adds	r3, r7, #7
 8006604:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d101      	bne.n	8006610 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800660c:	2302      	movs	r3, #2
 800660e:	e020      	b.n	8006652 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	23a3      	movs	r3, #163	; 0xa3
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	58d3      	ldr	r3, [r2, r3]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d004      	beq.n	8006626 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	23a3      	movs	r3, #163	; 0xa3
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	2100      	movs	r1, #0
 8006624:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d004      	beq.n	8006636 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	23a2      	movs	r3, #162	; 0xa2
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	68b9      	ldr	r1, [r7, #8]
 8006634:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	239d      	movs	r3, #157	; 0x9d
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	2101      	movs	r1, #1
 800663e:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	1dfa      	adds	r2, r7, #7
 8006644:	7812      	ldrb	r2, [r2, #0]
 8006646:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	0018      	movs	r0, r3
 800664c:	f001 fbe6 	bl	8007e1c <USBD_LL_Init>

  return USBD_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	0018      	movs	r0, r3
 8006654:	46bd      	mov	sp, r7
 8006656:	b004      	add	sp, #16
 8006658:	bd80      	pop	{r7, pc}

0800665a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b084      	sub	sp, #16
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8006664:	230f      	movs	r3, #15
 8006666:	18fb      	adds	r3, r7, r3
 8006668:	2200      	movs	r2, #0
 800666a:	701a      	strb	r2, [r3, #0]
  if(pclass != 0)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d009      	beq.n	8006686 <USBD_RegisterClass+0x2c>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	23a3      	movs	r3, #163	; 0xa3
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	6839      	ldr	r1, [r7, #0]
 800667a:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800667c:	230f      	movs	r3, #15
 800667e:	18fb      	adds	r3, r7, r3
 8006680:	2200      	movs	r2, #0
 8006682:	701a      	strb	r2, [r3, #0]
 8006684:	e003      	b.n	800668e <USBD_RegisterClass+0x34>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006686:	230f      	movs	r3, #15
 8006688:	18fb      	adds	r3, r7, r3
 800668a:	2202      	movs	r2, #2
 800668c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800668e:	230f      	movs	r3, #15
 8006690:	18fb      	adds	r3, r7, r3
 8006692:	781b      	ldrb	r3, [r3, #0]
}
 8006694:	0018      	movs	r0, r3
 8006696:	46bd      	mov	sp, r7
 8006698:	b004      	add	sp, #16
 800669a:	bd80      	pop	{r7, pc}

0800669c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	0018      	movs	r0, r3
 80066a8:	f001 fc1c 	bl	8007ee4 <USBD_LL_Start>

  return USBD_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	0018      	movs	r0, r3
 80066b0:	46bd      	mov	sp, r7
 80066b2:	b002      	add	sp, #8
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b082      	sub	sp, #8
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	0018      	movs	r0, r3
 80066c2:	46bd      	mov	sp, r7
 80066c4:	b002      	add	sp, #8
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	000a      	movs	r2, r1
 80066d2:	1cfb      	adds	r3, r7, #3
 80066d4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80066d6:	230f      	movs	r3, #15
 80066d8:	18fb      	adds	r3, r7, r3
 80066da:	2202      	movs	r2, #2
 80066dc:	701a      	strb	r2, [r3, #0]

  if(pdev->pClass != NULL)
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	23a3      	movs	r3, #163	; 0xa3
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	58d3      	ldr	r3, [r2, r3]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00f      	beq.n	800670a <USBD_SetClassConfig+0x42>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	23a3      	movs	r3, #163	; 0xa3
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	58d3      	ldr	r3, [r2, r3]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	1cfa      	adds	r2, r7, #3
 80066f6:	7811      	ldrb	r1, [r2, #0]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	0010      	movs	r0, r2
 80066fc:	4798      	blx	r3
 80066fe:	1e03      	subs	r3, r0, #0
 8006700:	d103      	bne.n	800670a <USBD_SetClassConfig+0x42>
    {
      ret = USBD_OK;
 8006702:	230f      	movs	r3, #15
 8006704:	18fb      	adds	r3, r7, r3
 8006706:	2200      	movs	r2, #0
 8006708:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800670a:	230f      	movs	r3, #15
 800670c:	18fb      	adds	r3, r7, r3
 800670e:	781b      	ldrb	r3, [r3, #0]
}
 8006710:	0018      	movs	r0, r3
 8006712:	46bd      	mov	sp, r7
 8006714:	b004      	add	sp, #16
 8006716:	bd80      	pop	{r7, pc}

08006718 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	000a      	movs	r2, r1
 8006722:	1cfb      	adds	r3, r7, #3
 8006724:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	23a3      	movs	r3, #163	; 0xa3
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	58d3      	ldr	r3, [r2, r3]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	1cfa      	adds	r2, r7, #3
 8006732:	7811      	ldrb	r1, [r2, #0]
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	0010      	movs	r0, r2
 8006738:	4798      	blx	r3
  return USBD_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	0018      	movs	r0, r3
 800673e:	46bd      	mov	sp, r7
 8006740:	b002      	add	sp, #8
 8006742:	bd80      	pop	{r7, pc}

08006744 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	22a0      	movs	r2, #160	; 0xa0
 8006752:	0092      	lsls	r2, r2, #2
 8006754:	4694      	mov	ip, r2
 8006756:	4463      	add	r3, ip
 8006758:	683a      	ldr	r2, [r7, #0]
 800675a:	0011      	movs	r1, r2
 800675c:	0018      	movs	r0, r3
 800675e:	f000 ff6d 	bl	800763c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	239b      	movs	r3, #155	; 0x9b
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	2101      	movs	r1, #1
 800676a:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a22      	ldr	r2, [pc, #136]	; (80067f8 <USBD_LL_SetupStage+0xb4>)
 8006770:	5a9b      	ldrh	r3, [r3, r2]
 8006772:	0019      	movs	r1, r3
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	239c      	movs	r3, #156	; 0x9c
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	23a0      	movs	r3, #160	; 0xa0
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	5cd3      	ldrb	r3, [r2, r3]
 8006784:	001a      	movs	r2, r3
 8006786:	231f      	movs	r3, #31
 8006788:	4013      	ands	r3, r2
 800678a:	2b01      	cmp	r3, #1
 800678c:	d00d      	beq.n	80067aa <USBD_LL_SetupStage+0x66>
 800678e:	d302      	bcc.n	8006796 <USBD_LL_SetupStage+0x52>
 8006790:	2b02      	cmp	r3, #2
 8006792:	d014      	beq.n	80067be <USBD_LL_SetupStage+0x7a>
 8006794:	e01d      	b.n	80067d2 <USBD_LL_SetupStage+0x8e>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	22a0      	movs	r2, #160	; 0xa0
 800679a:	0092      	lsls	r2, r2, #2
 800679c:	189a      	adds	r2, r3, r2
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	0011      	movs	r1, r2
 80067a2:	0018      	movs	r0, r3
 80067a4:	f000 fa0a 	bl	8006bbc <USBD_StdDevReq>
    break;
 80067a8:	e020      	b.n	80067ec <USBD_LL_SetupStage+0xa8>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	22a0      	movs	r2, #160	; 0xa0
 80067ae:	0092      	lsls	r2, r2, #2
 80067b0:	189a      	adds	r2, r3, r2
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	0011      	movs	r1, r2
 80067b6:	0018      	movs	r0, r3
 80067b8:	f000 fa72 	bl	8006ca0 <USBD_StdItfReq>
    break;
 80067bc:	e016      	b.n	80067ec <USBD_LL_SetupStage+0xa8>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	22a0      	movs	r2, #160	; 0xa0
 80067c2:	0092      	lsls	r2, r2, #2
 80067c4:	189a      	adds	r2, r3, r2
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	0011      	movs	r1, r2
 80067ca:	0018      	movs	r0, r3
 80067cc:	f000 fabf 	bl	8006d4e <USBD_StdEPReq>
    break;
 80067d0:	e00c      	b.n	80067ec <USBD_LL_SetupStage+0xa8>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	23a0      	movs	r3, #160	; 0xa0
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	5cd3      	ldrb	r3, [r2, r3]
 80067da:	227f      	movs	r2, #127	; 0x7f
 80067dc:	4393      	bics	r3, r2
 80067de:	b2da      	uxtb	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	0011      	movs	r1, r2
 80067e4:	0018      	movs	r0, r3
 80067e6:	f001 fc06 	bl	8007ff6 <USBD_LL_StallEP>
    break;
 80067ea:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	0018      	movs	r0, r3
 80067f0:	46bd      	mov	sp, r7
 80067f2:	b002      	add	sp, #8
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	46c0      	nop			; (mov r8, r8)
 80067f8:	00000286 	.word	0x00000286

080067fc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b086      	sub	sp, #24
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	607a      	str	r2, [r7, #4]
 8006806:	200b      	movs	r0, #11
 8006808:	183b      	adds	r3, r7, r0
 800680a:	1c0a      	adds	r2, r1, #0
 800680c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800680e:	183b      	adds	r3, r7, r0
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d154      	bne.n	80068c0 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	3341      	adds	r3, #65	; 0x41
 800681a:	33ff      	adds	r3, #255	; 0xff
 800681c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	239b      	movs	r3, #155	; 0x9b
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	58d3      	ldr	r3, [r2, r3]
 8006826:	2b03      	cmp	r3, #3
 8006828:	d139      	bne.n	800689e <USBD_LL_DataOutStage+0xa2>
    {
      if(pep->rem_length > pep->maxpacket)
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	68da      	ldr	r2, [r3, #12]
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	429a      	cmp	r2, r3
 8006834:	d919      	bls.n	800686a <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -=  pep->maxpacket;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	68da      	ldr	r2, [r3, #12]
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	1ad2      	subs	r2, r2, r3
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	68da      	ldr	r2, [r3, #12]
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800684c:	429a      	cmp	r2, r3
 800684e:	d203      	bcs.n	8006858 <USBD_LL_DataOutStage+0x5c>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8006854:	b29b      	uxth	r3, r3
 8006856:	e002      	b.n	800685e <USBD_LL_DataOutStage+0x62>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800685c:	b29b      	uxth	r3, r3
 800685e:	6879      	ldr	r1, [r7, #4]
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	001a      	movs	r2, r3
 8006864:	f000 fffb 	bl	800785e <USBD_CtlContinueRx>
 8006868:	e045      	b.n	80068f6 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	23a3      	movs	r3, #163	; 0xa3
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	58d3      	ldr	r3, [r2, r3]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00d      	beq.n	8006894 <USBD_LL_DataOutStage+0x98>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	239d      	movs	r3, #157	; 0x9d
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	5cd3      	ldrb	r3, [r2, r3]
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006880:	2b03      	cmp	r3, #3
 8006882:	d107      	bne.n	8006894 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	23a3      	movs	r3, #163	; 0xa3
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	58d3      	ldr	r3, [r2, r3]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	0010      	movs	r0, r2
 8006892:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	0018      	movs	r0, r3
 8006898:	f000 fff4 	bl	8007884 <USBD_CtlSendStatus>
 800689c:	e02b      	b.n	80068f6 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	239b      	movs	r3, #155	; 0x9b
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	58d3      	ldr	r3, [r2, r3]
 80068a6:	2b05      	cmp	r3, #5
 80068a8:	d125      	bne.n	80068f6 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	239b      	movs	r3, #155	; 0x9b
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	2100      	movs	r1, #0
 80068b2:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2100      	movs	r1, #0
 80068b8:	0018      	movs	r0, r3
 80068ba:	f001 fb9c 	bl	8007ff6 <USBD_LL_StallEP>
 80068be:	e01a      	b.n	80068f6 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	23a3      	movs	r3, #163	; 0xa3
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	58d3      	ldr	r3, [r2, r3]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d011      	beq.n	80068f2 <USBD_LL_DataOutStage+0xf6>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	239d      	movs	r3, #157	; 0x9d
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataOut != NULL) &&
 80068d6:	2b03      	cmp	r3, #3
 80068d8:	d10b      	bne.n	80068f2 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	23a3      	movs	r3, #163	; 0xa3
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	58d3      	ldr	r3, [r2, r3]
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	220b      	movs	r2, #11
 80068e6:	18ba      	adds	r2, r7, r2
 80068e8:	7811      	ldrb	r1, [r2, #0]
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	0010      	movs	r0, r2
 80068ee:	4798      	blx	r3
 80068f0:	e001      	b.n	80068f6 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80068f2:	2302      	movs	r3, #2
 80068f4:	e000      	b.n	80068f8 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	0018      	movs	r0, r3
 80068fa:	46bd      	mov	sp, r7
 80068fc:	b006      	add	sp, #24
 80068fe:	bd80      	pop	{r7, pc}

08006900 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	607a      	str	r2, [r7, #4]
 800690a:	200b      	movs	r0, #11
 800690c:	183b      	adds	r3, r7, r0
 800690e:	1c0a      	adds	r2, r1, #0
 8006910:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8006912:	183b      	adds	r3, r7, r0
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d000      	beq.n	800691c <USBD_LL_DataInStage+0x1c>
 800691a:	e08e      	b.n	8006a3a <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	3314      	adds	r3, #20
 8006920:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	239b      	movs	r3, #155	; 0x9b
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	58d3      	ldr	r3, [r2, r3]
 800692a:	2b02      	cmp	r3, #2
 800692c:	d164      	bne.n	80069f8 <USBD_LL_DataInStage+0xf8>
    {
      if(pep->rem_length > pep->maxpacket)
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	68da      	ldr	r2, [r3, #12]
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	429a      	cmp	r2, r3
 8006938:	d915      	bls.n	8006966 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	68da      	ldr	r2, [r3, #12]
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	1ad2      	subs	r2, r2, r3
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	b29a      	uxth	r2, r3
 800694e:	6879      	ldr	r1, [r7, #4]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	0018      	movs	r0, r3
 8006954:	f000 ff4c 	bl	80077f0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	2300      	movs	r3, #0
 800695c:	2200      	movs	r2, #0
 800695e:	2100      	movs	r1, #0
 8006960:	f001 fc36 	bl	80081d0 <USBD_LL_PrepareReceive>
 8006964:	e059      	b.n	8006a1a <USBD_LL_DataInStage+0x11a>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	689a      	ldr	r2, [r3, #8]
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	0019      	movs	r1, r3
 8006970:	0010      	movs	r0, r2
 8006972:	f7f9 fc4f 	bl	8000214 <__aeabi_uidivmod>
 8006976:	1e0b      	subs	r3, r1, #0
 8006978:	d11f      	bne.n	80069ba <USBD_LL_DataInStage+0xba>
           (pep->total_length >= pep->maxpacket) &&
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	689a      	ldr	r2, [r3, #8]
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006982:	429a      	cmp	r2, r3
 8006984:	d319      	bcc.n	80069ba <USBD_LL_DataInStage+0xba>
           (pep->total_length < pdev->ep0_data_len))
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	689a      	ldr	r2, [r3, #8]
 800698a:	68f9      	ldr	r1, [r7, #12]
 800698c:	239c      	movs	r3, #156	; 0x9c
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	58cb      	ldr	r3, [r1, r3]
           (pep->total_length >= pep->maxpacket) &&
 8006992:	429a      	cmp	r2, r3
 8006994:	d211      	bcs.n	80069ba <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	2100      	movs	r1, #0
 800699c:	0018      	movs	r0, r3
 800699e:	f000 ff27 	bl	80077f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	239c      	movs	r3, #156	; 0x9c
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	2100      	movs	r1, #0
 80069aa:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	2300      	movs	r3, #0
 80069b0:	2200      	movs	r2, #0
 80069b2:	2100      	movs	r1, #0
 80069b4:	f001 fc0c 	bl	80081d0 <USBD_LL_PrepareReceive>
 80069b8:	e02f      	b.n	8006a1a <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	23a3      	movs	r3, #163	; 0xa3
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	58d3      	ldr	r3, [r2, r3]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00d      	beq.n	80069e4 <USBD_LL_DataInStage+0xe4>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	239d      	movs	r3, #157	; 0x9d
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	5cd3      	ldrb	r3, [r2, r3]
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80069d0:	2b03      	cmp	r3, #3
 80069d2:	d107      	bne.n	80069e4 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	23a3      	movs	r3, #163	; 0xa3
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	58d3      	ldr	r3, [r2, r3]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	0010      	movs	r0, r2
 80069e2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2180      	movs	r1, #128	; 0x80
 80069e8:	0018      	movs	r0, r3
 80069ea:	f001 fb04 	bl	8007ff6 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	0018      	movs	r0, r3
 80069f2:	f000 ff5b 	bl	80078ac <USBD_CtlReceiveStatus>
 80069f6:	e010      	b.n	8006a1a <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	239b      	movs	r3, #155	; 0x9b
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	58d3      	ldr	r3, [r2, r3]
 8006a00:	2b04      	cmp	r3, #4
 8006a02:	d005      	beq.n	8006a10 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	239b      	movs	r3, #155	; 0x9b
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d104      	bne.n	8006a1a <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2180      	movs	r1, #128	; 0x80
 8006a14:	0018      	movs	r0, r3
 8006a16:	f001 faee 	bl	8007ff6 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	239e      	movs	r3, #158	; 0x9e
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	5cd3      	ldrb	r3, [r2, r3]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d124      	bne.n	8006a70 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	0018      	movs	r0, r3
 8006a2a:	f7ff fe44 	bl	80066b6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	239e      	movs	r3, #158	; 0x9e
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	2100      	movs	r1, #0
 8006a36:	54d1      	strb	r1, [r2, r3]
 8006a38:	e01a      	b.n	8006a70 <USBD_LL_DataInStage+0x170>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	23a3      	movs	r3, #163	; 0xa3
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	58d3      	ldr	r3, [r2, r3]
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d011      	beq.n	8006a6c <USBD_LL_DataInStage+0x16c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	239d      	movs	r3, #157	; 0x9d
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataIn != NULL) &&
 8006a50:	2b03      	cmp	r3, #3
 8006a52:	d10b      	bne.n	8006a6c <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	23a3      	movs	r3, #163	; 0xa3
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	58d3      	ldr	r3, [r2, r3]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	220b      	movs	r2, #11
 8006a60:	18ba      	adds	r2, r7, r2
 8006a62:	7811      	ldrb	r1, [r2, #0]
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	0010      	movs	r0, r2
 8006a68:	4798      	blx	r3
 8006a6a:	e001      	b.n	8006a70 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	e000      	b.n	8006a72 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	0018      	movs	r0, r3
 8006a74:	46bd      	mov	sp, r7
 8006a76:	b006      	add	sp, #24
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b082      	sub	sp, #8
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	2340      	movs	r3, #64	; 0x40
 8006a86:	2200      	movs	r2, #0
 8006a88:	2100      	movs	r1, #0
 8006a8a:	f001 fa51 	bl	8007f30 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	23a2      	movs	r3, #162	; 0xa2
 8006a92:	005b      	lsls	r3, r3, #1
 8006a94:	2101      	movs	r1, #1
 8006a96:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	23a8      	movs	r3, #168	; 0xa8
 8006a9c:	005b      	lsls	r3, r3, #1
 8006a9e:	2140      	movs	r1, #64	; 0x40
 8006aa0:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	2340      	movs	r3, #64	; 0x40
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	2180      	movs	r1, #128	; 0x80
 8006aaa:	f001 fa41 	bl	8007f30 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2240      	movs	r2, #64	; 0x40
 8006ab8:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	239d      	movs	r3, #157	; 0x9d
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	2101      	movs	r1, #1
 8006ac2:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	239b      	movs	r3, #155	; 0x9b
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	2100      	movs	r1, #0
 8006acc:	50d1      	str	r1, [r2, r3]
  pdev->dev_config= 0U;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	239f      	movs	r3, #159	; 0x9f
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	2100      	movs	r1, #0
 8006adc:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	23a4      	movs	r3, #164	; 0xa4
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	58d3      	ldr	r3, [r2, r3]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00a      	beq.n	8006b00 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	23a3      	movs	r3, #163	; 0xa3
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	58d3      	ldr	r3, [r2, r3]
 8006af2:	685a      	ldr	r2, [r3, #4]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	b2d9      	uxtb	r1, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	0018      	movs	r0, r3
 8006afe:	4790      	blx	r2
  }

  return USBD_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	0018      	movs	r0, r3
 8006b04:	46bd      	mov	sp, r7
 8006b06:	b002      	add	sp, #8
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b082      	sub	sp, #8
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
 8006b12:	000a      	movs	r2, r1
 8006b14:	1cfb      	adds	r3, r7, #3
 8006b16:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	1cfa      	adds	r2, r7, #3
 8006b1c:	7812      	ldrb	r2, [r2, #0]
 8006b1e:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	0018      	movs	r0, r3
 8006b24:	46bd      	mov	sp, r7
 8006b26:	b002      	add	sp, #8
 8006b28:	bd80      	pop	{r7, pc}
	...

08006b2c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	239d      	movs	r3, #157	; 0x9d
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	5cd1      	ldrb	r1, [r2, r3]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a06      	ldr	r2, [pc, #24]	; (8006b58 <USBD_LL_Suspend+0x2c>)
 8006b40:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	239d      	movs	r3, #157	; 0x9d
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	2104      	movs	r1, #4
 8006b4a:	54d1      	strb	r1, [r2, r3]
  return USBD_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	0018      	movs	r0, r3
 8006b50:	46bd      	mov	sp, r7
 8006b52:	b002      	add	sp, #8
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	46c0      	nop			; (mov r8, r8)
 8006b58:	00000275 	.word	0x00000275

08006b5c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a05      	ldr	r2, [pc, #20]	; (8006b7c <USBD_LL_Resume+0x20>)
 8006b68:	5c99      	ldrb	r1, [r3, r2]
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	239d      	movs	r3, #157	; 0x9d
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	54d1      	strb	r1, [r2, r3]
  return USBD_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	0018      	movs	r0, r3
 8006b76:	46bd      	mov	sp, r7
 8006b78:	b002      	add	sp, #8
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	00000275 	.word	0x00000275

08006b80 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	239d      	movs	r3, #157	; 0x9d
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	5cd3      	ldrb	r3, [r2, r3]
 8006b90:	2b03      	cmp	r3, #3
 8006b92:	d10e      	bne.n	8006bb2 <USBD_LL_SOF+0x32>
  {
    if(pdev->pClass->SOF != NULL)
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	23a3      	movs	r3, #163	; 0xa3
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	58d3      	ldr	r3, [r2, r3]
 8006b9c:	69db      	ldr	r3, [r3, #28]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d007      	beq.n	8006bb2 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	23a3      	movs	r3, #163	; 0xa3
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	58d3      	ldr	r3, [r2, r3]
 8006baa:	69db      	ldr	r3, [r3, #28]
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	0010      	movs	r0, r2
 8006bb0:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	0018      	movs	r0, r3
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	b002      	add	sp, #8
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bc6:	230f      	movs	r3, #15
 8006bc8:	18fb      	adds	r3, r7, r3
 8006bca:	2200      	movs	r2, #0
 8006bcc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	001a      	movs	r2, r3
 8006bd4:	2360      	movs	r3, #96	; 0x60
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	2b20      	cmp	r3, #32
 8006bda:	d004      	beq.n	8006be6 <USBD_StdDevReq+0x2a>
 8006bdc:	2b40      	cmp	r3, #64	; 0x40
 8006bde:	d002      	beq.n	8006be6 <USBD_StdDevReq+0x2a>
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00a      	beq.n	8006bfa <USBD_StdDevReq+0x3e>
 8006be4:	e04b      	b.n	8006c7e <USBD_StdDevReq+0xc2>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	23a3      	movs	r3, #163	; 0xa3
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	58d3      	ldr	r3, [r2, r3]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	6839      	ldr	r1, [r7, #0]
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	0010      	movs	r0, r2
 8006bf6:	4798      	blx	r3
    break;
 8006bf8:	e048      	b.n	8006c8c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	785b      	ldrb	r3, [r3, #1]
 8006bfe:	2b09      	cmp	r3, #9
 8006c00:	d835      	bhi.n	8006c6e <USBD_StdDevReq+0xb2>
 8006c02:	009a      	lsls	r2, r3, #2
 8006c04:	4b25      	ldr	r3, [pc, #148]	; (8006c9c <USBD_StdDevReq+0xe0>)
 8006c06:	18d3      	adds	r3, r2, r3
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	469f      	mov	pc, r3
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8006c0c:	683a      	ldr	r2, [r7, #0]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	0011      	movs	r1, r2
 8006c12:	0018      	movs	r0, r3
 8006c14:	f000 fa58 	bl	80070c8 <USBD_GetDescriptor>
      break;
 8006c18:	e030      	b.n	8006c7c <USBD_StdDevReq+0xc0>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8006c1a:	683a      	ldr	r2, [r7, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	0011      	movs	r1, r2
 8006c20:	0018      	movs	r0, r3
 8006c22:	f000 fb63 	bl	80072ec <USBD_SetAddress>
      break;
 8006c26:	e029      	b.n	8006c7c <USBD_StdDevReq+0xc0>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8006c28:	683a      	ldr	r2, [r7, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	0011      	movs	r1, r2
 8006c2e:	0018      	movs	r0, r3
 8006c30:	f000 fbb0 	bl	8007394 <USBD_SetConfig>
      break;
 8006c34:	e022      	b.n	8006c7c <USBD_StdDevReq+0xc0>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8006c36:	683a      	ldr	r2, [r7, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	0011      	movs	r1, r2
 8006c3c:	0018      	movs	r0, r3
 8006c3e:	f000 fc4d 	bl	80074dc <USBD_GetConfig>
      break;
 8006c42:	e01b      	b.n	8006c7c <USBD_StdDevReq+0xc0>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8006c44:	683a      	ldr	r2, [r7, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	0011      	movs	r1, r2
 8006c4a:	0018      	movs	r0, r3
 8006c4c:	f000 fc80 	bl	8007550 <USBD_GetStatus>
      break;
 8006c50:	e014      	b.n	8006c7c <USBD_StdDevReq+0xc0>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8006c52:	683a      	ldr	r2, [r7, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	0011      	movs	r1, r2
 8006c58:	0018      	movs	r0, r3
 8006c5a:	f000 fcb3 	bl	80075c4 <USBD_SetFeature>
      break;
 8006c5e:	e00d      	b.n	8006c7c <USBD_StdDevReq+0xc0>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8006c60:	683a      	ldr	r2, [r7, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	0011      	movs	r1, r2
 8006c66:	0018      	movs	r0, r3
 8006c68:	f000 fcc2 	bl	80075f0 <USBD_ClrFeature>
      break;
 8006c6c:	e006      	b.n	8006c7c <USBD_StdDevReq+0xc0>

    default:
      USBD_CtlError(pdev, req);
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	0011      	movs	r1, r2
 8006c74:	0018      	movs	r0, r3
 8006c76:	f000 fd1c 	bl	80076b2 <USBD_CtlError>
      break;
 8006c7a:	46c0      	nop			; (mov r8, r8)
    }
    break;
 8006c7c:	e006      	b.n	8006c8c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	0011      	movs	r1, r2
 8006c84:	0018      	movs	r0, r3
 8006c86:	f000 fd14 	bl	80076b2 <USBD_CtlError>
    break;
 8006c8a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8006c8c:	230f      	movs	r3, #15
 8006c8e:	18fb      	adds	r3, r7, r3
 8006c90:	781b      	ldrb	r3, [r3, #0]
}
 8006c92:	0018      	movs	r0, r3
 8006c94:	46bd      	mov	sp, r7
 8006c96:	b004      	add	sp, #16
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	46c0      	nop			; (mov r8, r8)
 8006c9c:	080083e4 	.word	0x080083e4

08006ca0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006ca0:	b590      	push	{r4, r7, lr}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006caa:	230f      	movs	r3, #15
 8006cac:	18fb      	adds	r3, r7, r3
 8006cae:	2200      	movs	r2, #0
 8006cb0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	001a      	movs	r2, r3
 8006cb8:	2360      	movs	r3, #96	; 0x60
 8006cba:	4013      	ands	r3, r2
 8006cbc:	2b20      	cmp	r3, #32
 8006cbe:	d003      	beq.n	8006cc8 <USBD_StdItfReq+0x28>
 8006cc0:	2b40      	cmp	r3, #64	; 0x40
 8006cc2:	d001      	beq.n	8006cc8 <USBD_StdItfReq+0x28>
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d136      	bne.n	8006d36 <USBD_StdItfReq+0x96>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	239d      	movs	r3, #157	; 0x9d
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	5cd3      	ldrb	r3, [r2, r3]
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d826      	bhi.n	8006d24 <USBD_StdItfReq+0x84>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	889b      	ldrh	r3, [r3, #4]
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d81a      	bhi.n	8006d16 <USBD_StdItfReq+0x76>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	23a3      	movs	r3, #163	; 0xa3
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	58d3      	ldr	r3, [r2, r3]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	220f      	movs	r2, #15
 8006cec:	18bc      	adds	r4, r7, r2
 8006cee:	6839      	ldr	r1, [r7, #0]
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	0010      	movs	r0, r2
 8006cf4:	4798      	blx	r3
 8006cf6:	0003      	movs	r3, r0
 8006cf8:	7023      	strb	r3, [r4, #0]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	88db      	ldrh	r3, [r3, #6]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d117      	bne.n	8006d32 <USBD_StdItfReq+0x92>
 8006d02:	230f      	movs	r3, #15
 8006d04:	18fb      	adds	r3, r7, r3
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d112      	bne.n	8006d32 <USBD_StdItfReq+0x92>
        {
          USBD_CtlSendStatus(pdev);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	0018      	movs	r0, r3
 8006d10:	f000 fdb8 	bl	8007884 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006d14:	e00d      	b.n	8006d32 <USBD_StdItfReq+0x92>
        USBD_CtlError(pdev, req);
 8006d16:	683a      	ldr	r2, [r7, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	0011      	movs	r1, r2
 8006d1c:	0018      	movs	r0, r3
 8006d1e:	f000 fcc8 	bl	80076b2 <USBD_CtlError>
      break;
 8006d22:	e006      	b.n	8006d32 <USBD_StdItfReq+0x92>

    default:
      USBD_CtlError(pdev, req);
 8006d24:	683a      	ldr	r2, [r7, #0]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	0011      	movs	r1, r2
 8006d2a:	0018      	movs	r0, r3
 8006d2c:	f000 fcc1 	bl	80076b2 <USBD_CtlError>
      break;
 8006d30:	e000      	b.n	8006d34 <USBD_StdItfReq+0x94>
      break;
 8006d32:	46c0      	nop			; (mov r8, r8)
    }
    break;
 8006d34:	e006      	b.n	8006d44 <USBD_StdItfReq+0xa4>

  default:
    USBD_CtlError(pdev, req);
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	0011      	movs	r1, r2
 8006d3c:	0018      	movs	r0, r3
 8006d3e:	f000 fcb8 	bl	80076b2 <USBD_CtlError>
    break;
 8006d42:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	0018      	movs	r0, r3
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	b005      	add	sp, #20
 8006d4c:	bd90      	pop	{r4, r7, pc}

08006d4e <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006d4e:	b5b0      	push	{r4, r5, r7, lr}
 8006d50:	b084      	sub	sp, #16
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d58:	230f      	movs	r3, #15
 8006d5a:	18fb      	adds	r3, r7, r3
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	889a      	ldrh	r2, [r3, #4]
 8006d64:	230e      	movs	r3, #14
 8006d66:	18fb      	adds	r3, r7, r3
 8006d68:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	001a      	movs	r2, r3
 8006d70:	2360      	movs	r3, #96	; 0x60
 8006d72:	4013      	ands	r3, r2
 8006d74:	2b20      	cmp	r3, #32
 8006d76:	d004      	beq.n	8006d82 <USBD_StdEPReq+0x34>
 8006d78:	2b40      	cmp	r3, #64	; 0x40
 8006d7a:	d002      	beq.n	8006d82 <USBD_StdEPReq+0x34>
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00a      	beq.n	8006d96 <USBD_StdEPReq+0x48>
 8006d80:	e193      	b.n	80070aa <USBD_StdEPReq+0x35c>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	23a3      	movs	r3, #163	; 0xa3
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	58d3      	ldr	r3, [r2, r3]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	6839      	ldr	r1, [r7, #0]
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	0010      	movs	r0, r2
 8006d92:	4798      	blx	r3
    break;
 8006d94:	e190      	b.n	80070b8 <USBD_StdEPReq+0x36a>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	001a      	movs	r2, r3
 8006d9c:	2360      	movs	r3, #96	; 0x60
 8006d9e:	4013      	ands	r3, r2
 8006da0:	2b20      	cmp	r3, #32
 8006da2:	d10f      	bne.n	8006dc4 <USBD_StdEPReq+0x76>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	23a3      	movs	r3, #163	; 0xa3
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	58d3      	ldr	r3, [r2, r3]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	250f      	movs	r5, #15
 8006db0:	197c      	adds	r4, r7, r5
 8006db2:	6839      	ldr	r1, [r7, #0]
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	0010      	movs	r0, r2
 8006db8:	4798      	blx	r3
 8006dba:	0003      	movs	r3, r0
 8006dbc:	7023      	strb	r3, [r4, #0]

      return ret;
 8006dbe:	197b      	adds	r3, r7, r5
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	e17c      	b.n	80070be <USBD_StdEPReq+0x370>
    }

    switch (req->bRequest)
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	785b      	ldrb	r3, [r3, #1]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d054      	beq.n	8006e76 <USBD_StdEPReq+0x128>
 8006dcc:	2b03      	cmp	r3, #3
 8006dce:	d003      	beq.n	8006dd8 <USBD_StdEPReq+0x8a>
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d100      	bne.n	8006dd6 <USBD_StdEPReq+0x88>
 8006dd4:	e097      	b.n	8006f06 <USBD_StdEPReq+0x1b8>
 8006dd6:	e160      	b.n	800709a <USBD_StdEPReq+0x34c>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	239d      	movs	r3, #157	; 0x9d
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	5cd3      	ldrb	r3, [r2, r3]
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	d002      	beq.n	8006dea <USBD_StdEPReq+0x9c>
 8006de4:	2b03      	cmp	r3, #3
 8006de6:	d01f      	beq.n	8006e28 <USBD_StdEPReq+0xda>
 8006de8:	e03d      	b.n	8006e66 <USBD_StdEPReq+0x118>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006dea:	230e      	movs	r3, #14
 8006dec:	18fb      	adds	r3, r7, r3
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d012      	beq.n	8006e1a <USBD_StdEPReq+0xcc>
 8006df4:	230e      	movs	r3, #14
 8006df6:	18fb      	adds	r3, r7, r3
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	2b80      	cmp	r3, #128	; 0x80
 8006dfc:	d00d      	beq.n	8006e1a <USBD_StdEPReq+0xcc>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006dfe:	230e      	movs	r3, #14
 8006e00:	18fb      	adds	r3, r7, r3
 8006e02:	781a      	ldrb	r2, [r3, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	0011      	movs	r1, r2
 8006e08:	0018      	movs	r0, r3
 8006e0a:	f001 f8f4 	bl	8007ff6 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2180      	movs	r1, #128	; 0x80
 8006e12:	0018      	movs	r0, r3
 8006e14:	f001 f8ef 	bl	8007ff6 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006e18:	e02c      	b.n	8006e74 <USBD_StdEPReq+0x126>
          USBD_CtlError(pdev, req);
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	0011      	movs	r1, r2
 8006e20:	0018      	movs	r0, r3
 8006e22:	f000 fc46 	bl	80076b2 <USBD_CtlError>
        break;
 8006e26:	e025      	b.n	8006e74 <USBD_StdEPReq+0x126>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	885b      	ldrh	r3, [r3, #2]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d115      	bne.n	8006e5c <USBD_StdEPReq+0x10e>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006e30:	230e      	movs	r3, #14
 8006e32:	18fb      	adds	r3, r7, r3
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d010      	beq.n	8006e5c <USBD_StdEPReq+0x10e>
 8006e3a:	230e      	movs	r3, #14
 8006e3c:	18fb      	adds	r3, r7, r3
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	2b80      	cmp	r3, #128	; 0x80
 8006e42:	d00b      	beq.n	8006e5c <USBD_StdEPReq+0x10e>
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	88db      	ldrh	r3, [r3, #6]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d107      	bne.n	8006e5c <USBD_StdEPReq+0x10e>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8006e4c:	230e      	movs	r3, #14
 8006e4e:	18fb      	adds	r3, r7, r3
 8006e50:	781a      	ldrb	r2, [r3, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	0011      	movs	r1, r2
 8006e56:	0018      	movs	r0, r3
 8006e58:	f001 f8cd 	bl	8007ff6 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	0018      	movs	r0, r3
 8006e60:	f000 fd10 	bl	8007884 <USBD_CtlSendStatus>

        break;
 8006e64:	e006      	b.n	8006e74 <USBD_StdEPReq+0x126>

      default:
        USBD_CtlError(pdev, req);
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	0011      	movs	r1, r2
 8006e6c:	0018      	movs	r0, r3
 8006e6e:	f000 fc20 	bl	80076b2 <USBD_CtlError>
        break;
 8006e72:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006e74:	e118      	b.n	80070a8 <USBD_StdEPReq+0x35a>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	239d      	movs	r3, #157	; 0x9d
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	5cd3      	ldrb	r3, [r2, r3]
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d002      	beq.n	8006e88 <USBD_StdEPReq+0x13a>
 8006e82:	2b03      	cmp	r3, #3
 8006e84:	d01f      	beq.n	8006ec6 <USBD_StdEPReq+0x178>
 8006e86:	e035      	b.n	8006ef4 <USBD_StdEPReq+0x1a6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e88:	230e      	movs	r3, #14
 8006e8a:	18fb      	adds	r3, r7, r3
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d012      	beq.n	8006eb8 <USBD_StdEPReq+0x16a>
 8006e92:	230e      	movs	r3, #14
 8006e94:	18fb      	adds	r3, r7, r3
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	2b80      	cmp	r3, #128	; 0x80
 8006e9a:	d00d      	beq.n	8006eb8 <USBD_StdEPReq+0x16a>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006e9c:	230e      	movs	r3, #14
 8006e9e:	18fb      	adds	r3, r7, r3
 8006ea0:	781a      	ldrb	r2, [r3, #0]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	0011      	movs	r1, r2
 8006ea6:	0018      	movs	r0, r3
 8006ea8:	f001 f8a5 	bl	8007ff6 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2180      	movs	r1, #128	; 0x80
 8006eb0:	0018      	movs	r0, r3
 8006eb2:	f001 f8a0 	bl	8007ff6 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006eb6:	e025      	b.n	8006f04 <USBD_StdEPReq+0x1b6>
          USBD_CtlError(pdev, req);
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	0011      	movs	r1, r2
 8006ebe:	0018      	movs	r0, r3
 8006ec0:	f000 fbf7 	bl	80076b2 <USBD_CtlError>
        break;
 8006ec4:	e01e      	b.n	8006f04 <USBD_StdEPReq+0x1b6>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	885b      	ldrh	r3, [r3, #2]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d119      	bne.n	8006f02 <USBD_StdEPReq+0x1b4>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006ece:	230e      	movs	r3, #14
 8006ed0:	18fb      	adds	r3, r7, r3
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	227f      	movs	r2, #127	; 0x7f
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	d007      	beq.n	8006eea <USBD_StdEPReq+0x19c>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8006eda:	230e      	movs	r3, #14
 8006edc:	18fb      	adds	r3, r7, r3
 8006ede:	781a      	ldrb	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	0011      	movs	r1, r2
 8006ee4:	0018      	movs	r0, r3
 8006ee6:	f001 f8b2 	bl	800804e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	0018      	movs	r0, r3
 8006eee:	f000 fcc9 	bl	8007884 <USBD_CtlSendStatus>
        }
        break;
 8006ef2:	e006      	b.n	8006f02 <USBD_StdEPReq+0x1b4>

      default:
        USBD_CtlError(pdev, req);
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	0011      	movs	r1, r2
 8006efa:	0018      	movs	r0, r3
 8006efc:	f000 fbd9 	bl	80076b2 <USBD_CtlError>
        break;
 8006f00:	e000      	b.n	8006f04 <USBD_StdEPReq+0x1b6>
        break;
 8006f02:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006f04:	e0d0      	b.n	80070a8 <USBD_StdEPReq+0x35a>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	239d      	movs	r3, #157	; 0x9d
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	5cd3      	ldrb	r3, [r2, r3]
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d002      	beq.n	8006f18 <USBD_StdEPReq+0x1ca>
 8006f12:	2b03      	cmp	r3, #3
 8006f14:	d03d      	beq.n	8006f92 <USBD_StdEPReq+0x244>
 8006f16:	e0b8      	b.n	800708a <USBD_StdEPReq+0x33c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f18:	230e      	movs	r3, #14
 8006f1a:	18fb      	adds	r3, r7, r3
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00b      	beq.n	8006f3a <USBD_StdEPReq+0x1ec>
 8006f22:	230e      	movs	r3, #14
 8006f24:	18fb      	adds	r3, r7, r3
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	2b80      	cmp	r3, #128	; 0x80
 8006f2a:	d006      	beq.n	8006f3a <USBD_StdEPReq+0x1ec>
        {
          USBD_CtlError(pdev, req);
 8006f2c:	683a      	ldr	r2, [r7, #0]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	0011      	movs	r1, r2
 8006f32:	0018      	movs	r0, r3
 8006f34:	f000 fbbd 	bl	80076b2 <USBD_CtlError>
          break;
 8006f38:	e0ae      	b.n	8007098 <USBD_StdEPReq+0x34a>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006f3a:	230e      	movs	r3, #14
 8006f3c:	18fb      	adds	r3, r7, r3
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	b25b      	sxtb	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	da0d      	bge.n	8006f62 <USBD_StdEPReq+0x214>
 8006f46:	230e      	movs	r3, #14
 8006f48:	18fb      	adds	r3, r7, r3
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	227f      	movs	r2, #127	; 0x7f
 8006f4e:	401a      	ands	r2, r3
 8006f50:	0013      	movs	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	189b      	adds	r3, r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	3310      	adds	r3, #16
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	18d3      	adds	r3, r2, r3
 8006f5e:	3304      	adds	r3, #4
 8006f60:	e00c      	b.n	8006f7c <USBD_StdEPReq+0x22e>
          &pdev->ep_out[ep_addr & 0x7FU];
 8006f62:	230e      	movs	r3, #14
 8006f64:	18fb      	adds	r3, r7, r3
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	227f      	movs	r2, #127	; 0x7f
 8006f6a:	401a      	ands	r2, r3
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006f6c:	0013      	movs	r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	189b      	adds	r3, r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	3341      	adds	r3, #65	; 0x41
 8006f76:	33ff      	adds	r3, #255	; 0xff
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	18d3      	adds	r3, r2, r3
 8006f7c:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	2200      	movs	r2, #0
 8006f82:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006f84:	68b9      	ldr	r1, [r7, #8]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2202      	movs	r2, #2
 8006f8a:	0018      	movs	r0, r3
 8006f8c:	f000 fc10 	bl	80077b0 <USBD_CtlSendData>
          break;
 8006f90:	e082      	b.n	8007098 <USBD_StdEPReq+0x34a>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8006f92:	230e      	movs	r3, #14
 8006f94:	18fb      	adds	r3, r7, r3
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	b25b      	sxtb	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	da15      	bge.n	8006fca <USBD_StdEPReq+0x27c>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006f9e:	230e      	movs	r3, #14
 8006fa0:	18fb      	adds	r3, r7, r3
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	220f      	movs	r2, #15
 8006fa6:	401a      	ands	r2, r3
 8006fa8:	6879      	ldr	r1, [r7, #4]
 8006faa:	0013      	movs	r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	189b      	adds	r3, r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	18cb      	adds	r3, r1, r3
 8006fb4:	3318      	adds	r3, #24
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d11e      	bne.n	8006ffa <USBD_StdEPReq+0x2ac>
          {
            USBD_CtlError(pdev, req);
 8006fbc:	683a      	ldr	r2, [r7, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	0011      	movs	r1, r2
 8006fc2:	0018      	movs	r0, r3
 8006fc4:	f000 fb75 	bl	80076b2 <USBD_CtlError>
            break;
 8006fc8:	e066      	b.n	8007098 <USBD_StdEPReq+0x34a>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006fca:	230e      	movs	r3, #14
 8006fcc:	18fb      	adds	r3, r7, r3
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	220f      	movs	r2, #15
 8006fd2:	401a      	ands	r2, r3
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	23a2      	movs	r3, #162	; 0xa2
 8006fd8:	0059      	lsls	r1, r3, #1
 8006fda:	0013      	movs	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	189b      	adds	r3, r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	18c3      	adds	r3, r0, r3
 8006fe4:	185b      	adds	r3, r3, r1
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d106      	bne.n	8006ffa <USBD_StdEPReq+0x2ac>
          {
            USBD_CtlError(pdev, req);
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	0011      	movs	r1, r2
 8006ff2:	0018      	movs	r0, r3
 8006ff4:	f000 fb5d 	bl	80076b2 <USBD_CtlError>
            break;
 8006ff8:	e04e      	b.n	8007098 <USBD_StdEPReq+0x34a>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006ffa:	230e      	movs	r3, #14
 8006ffc:	18fb      	adds	r3, r7, r3
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	b25b      	sxtb	r3, r3
 8007002:	2b00      	cmp	r3, #0
 8007004:	da0d      	bge.n	8007022 <USBD_StdEPReq+0x2d4>
 8007006:	230e      	movs	r3, #14
 8007008:	18fb      	adds	r3, r7, r3
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	227f      	movs	r2, #127	; 0x7f
 800700e:	401a      	ands	r2, r3
 8007010:	0013      	movs	r3, r2
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	189b      	adds	r3, r3, r2
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	3310      	adds	r3, #16
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	18d3      	adds	r3, r2, r3
 800701e:	3304      	adds	r3, #4
 8007020:	e00c      	b.n	800703c <USBD_StdEPReq+0x2ee>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007022:	230e      	movs	r3, #14
 8007024:	18fb      	adds	r3, r7, r3
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	227f      	movs	r2, #127	; 0x7f
 800702a:	401a      	ands	r2, r3
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800702c:	0013      	movs	r3, r2
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	189b      	adds	r3, r3, r2
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	3341      	adds	r3, #65	; 0x41
 8007036:	33ff      	adds	r3, #255	; 0xff
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	18d3      	adds	r3, r2, r3
 800703c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800703e:	230e      	movs	r3, #14
 8007040:	18fb      	adds	r3, r7, r3
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d004      	beq.n	8007052 <USBD_StdEPReq+0x304>
 8007048:	230e      	movs	r3, #14
 800704a:	18fb      	adds	r3, r7, r3
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	2b80      	cmp	r3, #128	; 0x80
 8007050:	d103      	bne.n	800705a <USBD_StdEPReq+0x30c>
          {
            pep->status = 0x0000U;
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	2200      	movs	r2, #0
 8007056:	601a      	str	r2, [r3, #0]
 8007058:	e010      	b.n	800707c <USBD_StdEPReq+0x32e>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800705a:	230e      	movs	r3, #14
 800705c:	18fb      	adds	r3, r7, r3
 800705e:	781a      	ldrb	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	0011      	movs	r1, r2
 8007064:	0018      	movs	r0, r3
 8007066:	f001 f81e 	bl	80080a6 <USBD_LL_IsStallEP>
 800706a:	1e03      	subs	r3, r0, #0
 800706c:	d003      	beq.n	8007076 <USBD_StdEPReq+0x328>
          {
            pep->status = 0x0001U;
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	2201      	movs	r2, #1
 8007072:	601a      	str	r2, [r3, #0]
 8007074:	e002      	b.n	800707c <USBD_StdEPReq+0x32e>
          }
          else
          {
            pep->status = 0x0000U;
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	2200      	movs	r2, #0
 800707a:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800707c:	68b9      	ldr	r1, [r7, #8]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2202      	movs	r2, #2
 8007082:	0018      	movs	r0, r3
 8007084:	f000 fb94 	bl	80077b0 <USBD_CtlSendData>
          break;
 8007088:	e006      	b.n	8007098 <USBD_StdEPReq+0x34a>

      default:
        USBD_CtlError(pdev, req);
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	0011      	movs	r1, r2
 8007090:	0018      	movs	r0, r3
 8007092:	f000 fb0e 	bl	80076b2 <USBD_CtlError>
        break;
 8007096:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007098:	e006      	b.n	80070a8 <USBD_StdEPReq+0x35a>

    default:
      USBD_CtlError(pdev, req);
 800709a:	683a      	ldr	r2, [r7, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	0011      	movs	r1, r2
 80070a0:	0018      	movs	r0, r3
 80070a2:	f000 fb06 	bl	80076b2 <USBD_CtlError>
      break;
 80070a6:	46c0      	nop			; (mov r8, r8)
    }
    break;
 80070a8:	e006      	b.n	80070b8 <USBD_StdEPReq+0x36a>

  default:
    USBD_CtlError(pdev, req);
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	0011      	movs	r1, r2
 80070b0:	0018      	movs	r0, r3
 80070b2:	f000 fafe 	bl	80076b2 <USBD_CtlError>
    break;
 80070b6:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80070b8:	230f      	movs	r3, #15
 80070ba:	18fb      	adds	r3, r7, r3
 80070bc:	781b      	ldrb	r3, [r3, #0]
}
 80070be:	0018      	movs	r0, r3
 80070c0:	46bd      	mov	sp, r7
 80070c2:	b004      	add	sp, #16
 80070c4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080070c8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	885b      	ldrh	r3, [r3, #2]
 80070d6:	0a1b      	lsrs	r3, r3, #8
 80070d8:	b29b      	uxth	r3, r3
 80070da:	2b07      	cmp	r3, #7
 80070dc:	d900      	bls.n	80070e0 <USBD_GetDescriptor+0x18>
 80070de:	e0ce      	b.n	800727e <USBD_GetDescriptor+0x1b6>
 80070e0:	009a      	lsls	r2, r3, #2
 80070e2:	4b80      	ldr	r3, [pc, #512]	; (80072e4 <USBD_GetDescriptor+0x21c>)
 80070e4:	18d3      	adds	r3, r2, r3
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	469f      	mov	pc, r3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	23a2      	movs	r3, #162	; 0xa2
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	58d3      	ldr	r3, [r2, r3]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	7c12      	ldrb	r2, [r2, #16]
 80070f8:	210a      	movs	r1, #10
 80070fa:	1879      	adds	r1, r7, r1
 80070fc:	0010      	movs	r0, r2
 80070fe:	4798      	blx	r3
 8007100:	0003      	movs	r3, r0
 8007102:	60fb      	str	r3, [r7, #12]
    break;
 8007104:	e0c2      	b.n	800728c <USBD_GetDescriptor+0x1c4>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	7c1b      	ldrb	r3, [r3, #16]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10f      	bne.n	800712e <USBD_GetDescriptor+0x66>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	23a3      	movs	r3, #163	; 0xa3
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	58d3      	ldr	r3, [r2, r3]
 8007116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007118:	220a      	movs	r2, #10
 800711a:	18ba      	adds	r2, r7, r2
 800711c:	0010      	movs	r0, r2
 800711e:	4798      	blx	r3
 8007120:	0003      	movs	r3, r0
 8007122:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	3301      	adds	r3, #1
 8007128:	2202      	movs	r2, #2
 800712a:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800712c:	e0ae      	b.n	800728c <USBD_GetDescriptor+0x1c4>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	23a3      	movs	r3, #163	; 0xa3
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	58d3      	ldr	r3, [r2, r3]
 8007136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007138:	220a      	movs	r2, #10
 800713a:	18ba      	adds	r2, r7, r2
 800713c:	0010      	movs	r0, r2
 800713e:	4798      	blx	r3
 8007140:	0003      	movs	r3, r0
 8007142:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	3301      	adds	r3, #1
 8007148:	2202      	movs	r2, #2
 800714a:	701a      	strb	r2, [r3, #0]
    break;
 800714c:	e09e      	b.n	800728c <USBD_GetDescriptor+0x1c4>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	885b      	ldrh	r3, [r3, #2]
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b05      	cmp	r3, #5
 8007156:	d858      	bhi.n	800720a <USBD_GetDescriptor+0x142>
 8007158:	009a      	lsls	r2, r3, #2
 800715a:	4b63      	ldr	r3, [pc, #396]	; (80072e8 <USBD_GetDescriptor+0x220>)
 800715c:	18d3      	adds	r3, r2, r3
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	469f      	mov	pc, r3
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	23a2      	movs	r3, #162	; 0xa2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	58d3      	ldr	r3, [r2, r3]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	7c12      	ldrb	r2, [r2, #16]
 8007170:	210a      	movs	r1, #10
 8007172:	1879      	adds	r1, r7, r1
 8007174:	0010      	movs	r0, r2
 8007176:	4798      	blx	r3
 8007178:	0003      	movs	r3, r0
 800717a:	60fb      	str	r3, [r7, #12]
      break;
 800717c:	e04c      	b.n	8007218 <USBD_GetDescriptor+0x150>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	23a2      	movs	r3, #162	; 0xa2
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	58d3      	ldr	r3, [r2, r3]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	7c12      	ldrb	r2, [r2, #16]
 800718c:	210a      	movs	r1, #10
 800718e:	1879      	adds	r1, r7, r1
 8007190:	0010      	movs	r0, r2
 8007192:	4798      	blx	r3
 8007194:	0003      	movs	r3, r0
 8007196:	60fb      	str	r3, [r7, #12]
      break;
 8007198:	e03e      	b.n	8007218 <USBD_GetDescriptor+0x150>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	23a2      	movs	r3, #162	; 0xa2
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	58d3      	ldr	r3, [r2, r3]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	7c12      	ldrb	r2, [r2, #16]
 80071a8:	210a      	movs	r1, #10
 80071aa:	1879      	adds	r1, r7, r1
 80071ac:	0010      	movs	r0, r2
 80071ae:	4798      	blx	r3
 80071b0:	0003      	movs	r3, r0
 80071b2:	60fb      	str	r3, [r7, #12]
      break;
 80071b4:	e030      	b.n	8007218 <USBD_GetDescriptor+0x150>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	23a2      	movs	r3, #162	; 0xa2
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	58d3      	ldr	r3, [r2, r3]
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	7c12      	ldrb	r2, [r2, #16]
 80071c4:	210a      	movs	r1, #10
 80071c6:	1879      	adds	r1, r7, r1
 80071c8:	0010      	movs	r0, r2
 80071ca:	4798      	blx	r3
 80071cc:	0003      	movs	r3, r0
 80071ce:	60fb      	str	r3, [r7, #12]
      break;
 80071d0:	e022      	b.n	8007218 <USBD_GetDescriptor+0x150>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	23a2      	movs	r3, #162	; 0xa2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	58d3      	ldr	r3, [r2, r3]
 80071da:	695b      	ldr	r3, [r3, #20]
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	7c12      	ldrb	r2, [r2, #16]
 80071e0:	210a      	movs	r1, #10
 80071e2:	1879      	adds	r1, r7, r1
 80071e4:	0010      	movs	r0, r2
 80071e6:	4798      	blx	r3
 80071e8:	0003      	movs	r3, r0
 80071ea:	60fb      	str	r3, [r7, #12]
      break;
 80071ec:	e014      	b.n	8007218 <USBD_GetDescriptor+0x150>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	23a2      	movs	r3, #162	; 0xa2
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	58d3      	ldr	r3, [r2, r3]
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	7c12      	ldrb	r2, [r2, #16]
 80071fc:	210a      	movs	r1, #10
 80071fe:	1879      	adds	r1, r7, r1
 8007200:	0010      	movs	r0, r2
 8007202:	4798      	blx	r3
 8007204:	0003      	movs	r3, r0
 8007206:	60fb      	str	r3, [r7, #12]
      break;
 8007208:	e006      	b.n	8007218 <USBD_GetDescriptor+0x150>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	0011      	movs	r1, r2
 8007210:	0018      	movs	r0, r3
 8007212:	f000 fa4e 	bl	80076b2 <USBD_CtlError>
      return;
 8007216:	e061      	b.n	80072dc <USBD_GetDescriptor+0x214>
#endif
    }
    break;
 8007218:	e038      	b.n	800728c <USBD_GetDescriptor+0x1c4>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	7c1b      	ldrb	r3, [r3, #16]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10b      	bne.n	800723a <USBD_GetDescriptor+0x172>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	23a3      	movs	r3, #163	; 0xa3
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	58d3      	ldr	r3, [r2, r3]
 800722a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800722c:	220a      	movs	r2, #10
 800722e:	18ba      	adds	r2, r7, r2
 8007230:	0010      	movs	r0, r2
 8007232:	4798      	blx	r3
 8007234:	0003      	movs	r3, r0
 8007236:	60fb      	str	r3, [r7, #12]
      break;
 8007238:	e028      	b.n	800728c <USBD_GetDescriptor+0x1c4>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	0011      	movs	r1, r2
 8007240:	0018      	movs	r0, r3
 8007242:	f000 fa36 	bl	80076b2 <USBD_CtlError>
      return;
 8007246:	e049      	b.n	80072dc <USBD_GetDescriptor+0x214>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	7c1b      	ldrb	r3, [r3, #16]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d10f      	bne.n	8007270 <USBD_GetDescriptor+0x1a8>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	23a3      	movs	r3, #163	; 0xa3
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	58d3      	ldr	r3, [r2, r3]
 8007258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725a:	220a      	movs	r2, #10
 800725c:	18ba      	adds	r2, r7, r2
 800725e:	0010      	movs	r0, r2
 8007260:	4798      	blx	r3
 8007262:	0003      	movs	r3, r0
 8007264:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	3301      	adds	r3, #1
 800726a:	2207      	movs	r2, #7
 800726c:	701a      	strb	r2, [r3, #0]
      break;
 800726e:	e00d      	b.n	800728c <USBD_GetDescriptor+0x1c4>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007270:	683a      	ldr	r2, [r7, #0]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	0011      	movs	r1, r2
 8007276:	0018      	movs	r0, r3
 8007278:	f000 fa1b 	bl	80076b2 <USBD_CtlError>
      return;
 800727c:	e02e      	b.n	80072dc <USBD_GetDescriptor+0x214>
    }

  default:
     USBD_CtlError(pdev , req);
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	0011      	movs	r1, r2
 8007284:	0018      	movs	r0, r3
 8007286:	f000 fa14 	bl	80076b2 <USBD_CtlError>
    return;
 800728a:	e027      	b.n	80072dc <USBD_GetDescriptor+0x214>
  }

  if((len != 0U) && (req->wLength != 0U))
 800728c:	230a      	movs	r3, #10
 800728e:	18fb      	adds	r3, r7, r3
 8007290:	881b      	ldrh	r3, [r3, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d01a      	beq.n	80072cc <USBD_GetDescriptor+0x204>
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	88db      	ldrh	r3, [r3, #6]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d016      	beq.n	80072cc <USBD_GetDescriptor+0x204>
  {

    len = MIN(len, req->wLength);
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	88da      	ldrh	r2, [r3, #6]
 80072a2:	230a      	movs	r3, #10
 80072a4:	18fb      	adds	r3, r7, r3
 80072a6:	881b      	ldrh	r3, [r3, #0]
 80072a8:	1c18      	adds	r0, r3, #0
 80072aa:	1c11      	adds	r1, r2, #0
 80072ac:	b28a      	uxth	r2, r1
 80072ae:	b283      	uxth	r3, r0
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d900      	bls.n	80072b6 <USBD_GetDescriptor+0x1ee>
 80072b4:	1c01      	adds	r1, r0, #0
 80072b6:	b28a      	uxth	r2, r1
 80072b8:	210a      	movs	r1, #10
 80072ba:	187b      	adds	r3, r7, r1
 80072bc:	801a      	strh	r2, [r3, #0]

    USBD_CtlSendData (pdev, pbuf, len);
 80072be:	187b      	adds	r3, r7, r1
 80072c0:	881a      	ldrh	r2, [r3, #0]
 80072c2:	68f9      	ldr	r1, [r7, #12]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	0018      	movs	r0, r3
 80072c8:	f000 fa72 	bl	80077b0 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	88db      	ldrh	r3, [r3, #6]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d103      	bne.n	80072dc <USBD_GetDescriptor+0x214>
  {
   USBD_CtlSendStatus(pdev);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	0018      	movs	r0, r3
 80072d8:	f000 fad4 	bl	8007884 <USBD_CtlSendStatus>
  }
}
 80072dc:	46bd      	mov	sp, r7
 80072de:	b004      	add	sp, #16
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	46c0      	nop			; (mov r8, r8)
 80072e4:	0800840c 	.word	0x0800840c
 80072e8:	0800842c 	.word	0x0800842c

080072ec <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80072ec:	b590      	push	{r4, r7, lr}
 80072ee:	b085      	sub	sp, #20
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	889b      	ldrh	r3, [r3, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d13d      	bne.n	800737a <USBD_SetAddress+0x8e>
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	88db      	ldrh	r3, [r3, #6]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d139      	bne.n	800737a <USBD_SetAddress+0x8e>
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	885b      	ldrh	r3, [r3, #2]
 800730a:	2b7f      	cmp	r3, #127	; 0x7f
 800730c:	d835      	bhi.n	800737a <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	885b      	ldrh	r3, [r3, #2]
 8007312:	b2da      	uxtb	r2, r3
 8007314:	230f      	movs	r3, #15
 8007316:	18fb      	adds	r3, r7, r3
 8007318:	217f      	movs	r1, #127	; 0x7f
 800731a:	400a      	ands	r2, r1
 800731c:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	239d      	movs	r3, #157	; 0x9d
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	5cd3      	ldrb	r3, [r2, r3]
 8007326:	2b03      	cmp	r3, #3
 8007328:	d106      	bne.n	8007338 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev , req);
 800732a:	683a      	ldr	r2, [r7, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	0011      	movs	r1, r2
 8007330:	0018      	movs	r0, r3
 8007332:	f000 f9be 	bl	80076b2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007336:	e026      	b.n	8007386 <USBD_SetAddress+0x9a>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	240f      	movs	r4, #15
 800733c:	193a      	adds	r2, r7, r4
 800733e:	4914      	ldr	r1, [pc, #80]	; (8007390 <USBD_SetAddress+0xa4>)
 8007340:	7812      	ldrb	r2, [r2, #0]
 8007342:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007344:	193b      	adds	r3, r7, r4
 8007346:	781a      	ldrb	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	0011      	movs	r1, r2
 800734c:	0018      	movs	r0, r3
 800734e:	f000 fedb 	bl	8008108 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	0018      	movs	r0, r3
 8007356:	f000 fa95 	bl	8007884 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800735a:	193b      	adds	r3, r7, r4
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d005      	beq.n	800736e <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	239d      	movs	r3, #157	; 0x9d
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	2102      	movs	r1, #2
 800736a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800736c:	e00b      	b.n	8007386 <USBD_SetAddress+0x9a>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	239d      	movs	r3, #157	; 0x9d
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	2101      	movs	r1, #1
 8007376:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007378:	e005      	b.n	8007386 <USBD_SetAddress+0x9a>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800737a:	683a      	ldr	r2, [r7, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	0011      	movs	r1, r2
 8007380:	0018      	movs	r0, r3
 8007382:	f000 f996 	bl	80076b2 <USBD_CtlError>
  }
}
 8007386:	46c0      	nop			; (mov r8, r8)
 8007388:	46bd      	mov	sp, r7
 800738a:	b005      	add	sp, #20
 800738c:	bd90      	pop	{r4, r7, pc}
 800738e:	46c0      	nop			; (mov r8, r8)
 8007390:	00000276 	.word	0x00000276

08007394 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	885b      	ldrh	r3, [r3, #2]
 80073a2:	b2da      	uxtb	r2, r3
 80073a4:	4b4c      	ldr	r3, [pc, #304]	; (80074d8 <USBD_SetConfig+0x144>)
 80073a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80073a8:	4b4b      	ldr	r3, [pc, #300]	; (80074d8 <USBD_SetConfig+0x144>)
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d906      	bls.n	80073be <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 80073b0:	683a      	ldr	r2, [r7, #0]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	0011      	movs	r1, r2
 80073b6:	0018      	movs	r0, r3
 80073b8:	f000 f97b 	bl	80076b2 <USBD_CtlError>
 80073bc:	e088      	b.n	80074d0 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	239d      	movs	r3, #157	; 0x9d
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	5cd3      	ldrb	r3, [r2, r3]
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d002      	beq.n	80073d0 <USBD_SetConfig+0x3c>
 80073ca:	2b03      	cmp	r3, #3
 80073cc:	d029      	beq.n	8007422 <USBD_SetConfig+0x8e>
 80073ce:	e071      	b.n	80074b4 <USBD_SetConfig+0x120>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80073d0:	4b41      	ldr	r3, [pc, #260]	; (80074d8 <USBD_SetConfig+0x144>)
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d01f      	beq.n	8007418 <USBD_SetConfig+0x84>
      {
        pdev->dev_config = cfgidx;
 80073d8:	4b3f      	ldr	r3, [pc, #252]	; (80074d8 <USBD_SetConfig+0x144>)
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	001a      	movs	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	239d      	movs	r3, #157	; 0x9d
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	2103      	movs	r1, #3
 80073ea:	54d1      	strb	r1, [r2, r3]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80073ec:	4b3a      	ldr	r3, [pc, #232]	; (80074d8 <USBD_SetConfig+0x144>)
 80073ee:	781a      	ldrb	r2, [r3, #0]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	0011      	movs	r1, r2
 80073f4:	0018      	movs	r0, r3
 80073f6:	f7ff f967 	bl	80066c8 <USBD_SetClassConfig>
 80073fa:	0003      	movs	r3, r0
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d106      	bne.n	800740e <USBD_SetConfig+0x7a>
        {
          USBD_CtlError(pdev, req);
 8007400:	683a      	ldr	r2, [r7, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	0011      	movs	r1, r2
 8007406:	0018      	movs	r0, r3
 8007408:	f000 f953 	bl	80076b2 <USBD_CtlError>
          return;
 800740c:	e060      	b.n	80074d0 <USBD_SetConfig+0x13c>
        }
        USBD_CtlSendStatus(pdev);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	0018      	movs	r0, r3
 8007412:	f000 fa37 	bl	8007884 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007416:	e05b      	b.n	80074d0 <USBD_SetConfig+0x13c>
        USBD_CtlSendStatus(pdev);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	0018      	movs	r0, r3
 800741c:	f000 fa32 	bl	8007884 <USBD_CtlSendStatus>
      break;
 8007420:	e056      	b.n	80074d0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007422:	4b2d      	ldr	r3, [pc, #180]	; (80074d8 <USBD_SetConfig+0x144>)
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d115      	bne.n	8007456 <USBD_SetConfig+0xc2>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	239d      	movs	r3, #157	; 0x9d
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	2102      	movs	r1, #2
 8007432:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;
 8007434:	4b28      	ldr	r3, [pc, #160]	; (80074d8 <USBD_SetConfig+0x144>)
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	001a      	movs	r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800743e:	4b26      	ldr	r3, [pc, #152]	; (80074d8 <USBD_SetConfig+0x144>)
 8007440:	781a      	ldrb	r2, [r3, #0]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	0011      	movs	r1, r2
 8007446:	0018      	movs	r0, r3
 8007448:	f7ff f966 	bl	8006718 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	0018      	movs	r0, r3
 8007450:	f000 fa18 	bl	8007884 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007454:	e03c      	b.n	80074d0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007456:	4b20      	ldr	r3, [pc, #128]	; (80074d8 <USBD_SetConfig+0x144>)
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	001a      	movs	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	429a      	cmp	r2, r3
 8007462:	d022      	beq.n	80074aa <USBD_SetConfig+0x116>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	b2da      	uxtb	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	0011      	movs	r1, r2
 800746e:	0018      	movs	r0, r3
 8007470:	f7ff f952 	bl	8006718 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007474:	4b18      	ldr	r3, [pc, #96]	; (80074d8 <USBD_SetConfig+0x144>)
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	001a      	movs	r2, r3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800747e:	4b16      	ldr	r3, [pc, #88]	; (80074d8 <USBD_SetConfig+0x144>)
 8007480:	781a      	ldrb	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	0011      	movs	r1, r2
 8007486:	0018      	movs	r0, r3
 8007488:	f7ff f91e 	bl	80066c8 <USBD_SetClassConfig>
 800748c:	0003      	movs	r3, r0
 800748e:	2b02      	cmp	r3, #2
 8007490:	d106      	bne.n	80074a0 <USBD_SetConfig+0x10c>
          USBD_CtlError(pdev, req);
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	0011      	movs	r1, r2
 8007498:	0018      	movs	r0, r3
 800749a:	f000 f90a 	bl	80076b2 <USBD_CtlError>
          return;
 800749e:	e017      	b.n	80074d0 <USBD_SetConfig+0x13c>
        USBD_CtlSendStatus(pdev);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	0018      	movs	r0, r3
 80074a4:	f000 f9ee 	bl	8007884 <USBD_CtlSendStatus>
      break;
 80074a8:	e012      	b.n	80074d0 <USBD_SetConfig+0x13c>
        USBD_CtlSendStatus(pdev);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	0018      	movs	r0, r3
 80074ae:	f000 f9e9 	bl	8007884 <USBD_CtlSendStatus>
      break;
 80074b2:	e00d      	b.n	80074d0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80074b4:	683a      	ldr	r2, [r7, #0]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	0011      	movs	r1, r2
 80074ba:	0018      	movs	r0, r3
 80074bc:	f000 f8f9 	bl	80076b2 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 80074c0:	4b05      	ldr	r3, [pc, #20]	; (80074d8 <USBD_SetConfig+0x144>)
 80074c2:	781a      	ldrb	r2, [r3, #0]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	0011      	movs	r1, r2
 80074c8:	0018      	movs	r0, r3
 80074ca:	f7ff f925 	bl	8006718 <USBD_ClrClassConfig>
      break;
 80074ce:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 80074d0:	46bd      	mov	sp, r7
 80074d2:	b002      	add	sp, #8
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	46c0      	nop			; (mov r8, r8)
 80074d8:	2000019c 	.word	0x2000019c

080074dc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	88db      	ldrh	r3, [r3, #6]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d006      	beq.n	80074fc <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev , req);
 80074ee:	683a      	ldr	r2, [r7, #0]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	0011      	movs	r1, r2
 80074f4:	0018      	movs	r0, r3
 80074f6:	f000 f8dc 	bl	80076b2 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80074fa:	e025      	b.n	8007548 <USBD_GetConfig+0x6c>
    switch (pdev->dev_state)
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	239d      	movs	r3, #157	; 0x9d
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	5cd3      	ldrb	r3, [r2, r3]
 8007504:	2b01      	cmp	r3, #1
 8007506:	db18      	blt.n	800753a <USBD_GetConfig+0x5e>
 8007508:	2b02      	cmp	r3, #2
 800750a:	dd02      	ble.n	8007512 <USBD_GetConfig+0x36>
 800750c:	2b03      	cmp	r3, #3
 800750e:	d00c      	beq.n	800752a <USBD_GetConfig+0x4e>
 8007510:	e013      	b.n	800753a <USBD_GetConfig+0x5e>
      pdev->dev_default_config = 0U;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	3308      	adds	r3, #8
 800751c:	0019      	movs	r1, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2201      	movs	r2, #1
 8007522:	0018      	movs	r0, r3
 8007524:	f000 f944 	bl	80077b0 <USBD_CtlSendData>
      break;
 8007528:	e00e      	b.n	8007548 <USBD_GetConfig+0x6c>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	1d19      	adds	r1, r3, #4
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2201      	movs	r2, #1
 8007532:	0018      	movs	r0, r3
 8007534:	f000 f93c 	bl	80077b0 <USBD_CtlSendData>
      break;
 8007538:	e006      	b.n	8007548 <USBD_GetConfig+0x6c>
      USBD_CtlError(pdev , req);
 800753a:	683a      	ldr	r2, [r7, #0]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	0011      	movs	r1, r2
 8007540:	0018      	movs	r0, r3
 8007542:	f000 f8b6 	bl	80076b2 <USBD_CtlError>
      break;
 8007546:	46c0      	nop			; (mov r8, r8)
}
 8007548:	46c0      	nop			; (mov r8, r8)
 800754a:	46bd      	mov	sp, r7
 800754c:	b002      	add	sp, #8
 800754e:	bd80      	pop	{r7, pc}

08007550 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	239d      	movs	r3, #157	; 0x9d
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	5cd3      	ldrb	r3, [r2, r3]
 8007562:	3b01      	subs	r3, #1
 8007564:	2b02      	cmp	r3, #2
 8007566:	d822      	bhi.n	80075ae <USBD_GetStatus+0x5e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	88db      	ldrh	r3, [r3, #6]
 800756c:	2b02      	cmp	r3, #2
 800756e:	d006      	beq.n	800757e <USBD_GetStatus+0x2e>
    {
      USBD_CtlError(pdev, req);
 8007570:	683a      	ldr	r2, [r7, #0]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	0011      	movs	r1, r2
 8007576:	0018      	movs	r0, r3
 8007578:	f000 f89b 	bl	80076b2 <USBD_CtlError>
      break;
 800757c:	e01e      	b.n	80075bc <USBD_GetStatus+0x6c>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	239f      	movs	r3, #159	; 0x9f
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	58d3      	ldr	r3, [r2, r3]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d005      	beq.n	800759c <USBD_GetStatus+0x4c>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	2202      	movs	r2, #2
 8007596:	431a      	orrs	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	330c      	adds	r3, #12
 80075a0:	0019      	movs	r1, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2202      	movs	r2, #2
 80075a6:	0018      	movs	r0, r3
 80075a8:	f000 f902 	bl	80077b0 <USBD_CtlSendData>
    break;
 80075ac:	e006      	b.n	80075bc <USBD_GetStatus+0x6c>

  default :
    USBD_CtlError(pdev , req);
 80075ae:	683a      	ldr	r2, [r7, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	0011      	movs	r1, r2
 80075b4:	0018      	movs	r0, r3
 80075b6:	f000 f87c 	bl	80076b2 <USBD_CtlError>
    break;
 80075ba:	46c0      	nop			; (mov r8, r8)
  }
}
 80075bc:	46c0      	nop			; (mov r8, r8)
 80075be:	46bd      	mov	sp, r7
 80075c0:	b002      	add	sp, #8
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	885b      	ldrh	r3, [r3, #2]
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d108      	bne.n	80075e8 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	239f      	movs	r3, #159	; 0x9f
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	2101      	movs	r1, #1
 80075de:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	0018      	movs	r0, r3
 80075e4:	f000 f94e 	bl	8007884 <USBD_CtlSendStatus>
  }

}
 80075e8:	46c0      	nop			; (mov r8, r8)
 80075ea:	46bd      	mov	sp, r7
 80075ec:	b002      	add	sp, #8
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	239d      	movs	r3, #157	; 0x9d
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	5cd3      	ldrb	r3, [r2, r3]
 8007602:	3b01      	subs	r3, #1
 8007604:	2b02      	cmp	r3, #2
 8007606:	d80d      	bhi.n	8007624 <USBD_ClrFeature+0x34>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	885b      	ldrh	r3, [r3, #2]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d110      	bne.n	8007632 <USBD_ClrFeature+0x42>
    {
      pdev->dev_remote_wakeup = 0U;
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	239f      	movs	r3, #159	; 0x9f
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	2100      	movs	r1, #0
 8007618:	50d1      	str	r1, [r2, r3]
      USBD_CtlSendStatus(pdev);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	0018      	movs	r0, r3
 800761e:	f000 f931 	bl	8007884 <USBD_CtlSendStatus>
    }
    break;
 8007622:	e006      	b.n	8007632 <USBD_ClrFeature+0x42>

  default :
     USBD_CtlError(pdev , req);
 8007624:	683a      	ldr	r2, [r7, #0]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	0011      	movs	r1, r2
 800762a:	0018      	movs	r0, r3
 800762c:	f000 f841 	bl	80076b2 <USBD_CtlError>
    break;
 8007630:	e000      	b.n	8007634 <USBD_ClrFeature+0x44>
    break;
 8007632:	46c0      	nop			; (mov r8, r8)
  }
}
 8007634:	46c0      	nop			; (mov r8, r8)
 8007636:	46bd      	mov	sp, r7
 8007638:	b002      	add	sp, #8
 800763a:	bd80      	pop	{r7, pc}

0800763c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	781a      	ldrb	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	785a      	ldrb	r2, [r3, #1]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	3302      	adds	r3, #2
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	b29a      	uxth	r2, r3
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	3303      	adds	r3, #3
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	b29b      	uxth	r3, r3
 8007666:	021b      	lsls	r3, r3, #8
 8007668:	b29b      	uxth	r3, r3
 800766a:	18d3      	adds	r3, r2, r3
 800766c:	b29a      	uxth	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	3304      	adds	r3, #4
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	b29a      	uxth	r2, r3
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	3305      	adds	r3, #5
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	b29b      	uxth	r3, r3
 8007682:	021b      	lsls	r3, r3, #8
 8007684:	b29b      	uxth	r3, r3
 8007686:	18d3      	adds	r3, r2, r3
 8007688:	b29a      	uxth	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	3306      	adds	r3, #6
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	b29a      	uxth	r2, r3
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	3307      	adds	r3, #7
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	b29b      	uxth	r3, r3
 800769e:	021b      	lsls	r3, r3, #8
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	18d3      	adds	r3, r2, r3
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	80da      	strh	r2, [r3, #6]

}
 80076aa:	46c0      	nop			; (mov r8, r8)
 80076ac:	46bd      	mov	sp, r7
 80076ae:	b002      	add	sp, #8
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b082      	sub	sp, #8
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
 80076ba:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2180      	movs	r1, #128	; 0x80
 80076c0:	0018      	movs	r0, r3
 80076c2:	f000 fc98 	bl	8007ff6 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2100      	movs	r1, #0
 80076ca:	0018      	movs	r0, r3
 80076cc:	f000 fc93 	bl	8007ff6 <USBD_LL_StallEP>
}
 80076d0:	46c0      	nop			; (mov r8, r8)
 80076d2:	46bd      	mov	sp, r7
 80076d4:	b002      	add	sp, #8
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80076d8:	b590      	push	{r4, r7, lr}
 80076da:	b087      	sub	sp, #28
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80076e4:	2317      	movs	r3, #23
 80076e6:	18fb      	adds	r3, r7, r3
 80076e8:	2200      	movs	r2, #0
 80076ea:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d03d      	beq.n	800776e <USBD_GetString+0x96>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	0018      	movs	r0, r3
 80076f6:	f000 f83e 	bl	8007776 <USBD_GetLen>
 80076fa:	0003      	movs	r3, r0
 80076fc:	3301      	adds	r3, #1
 80076fe:	b29b      	uxth	r3, r3
 8007700:	18db      	adds	r3, r3, r3
 8007702:	b29a      	uxth	r2, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007708:	2017      	movs	r0, #23
 800770a:	183b      	adds	r3, r7, r0
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	183a      	adds	r2, r7, r0
 8007710:	1c59      	adds	r1, r3, #1
 8007712:	7011      	strb	r1, [r2, #0]
 8007714:	001a      	movs	r2, r3
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	189b      	adds	r3, r3, r2
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	7812      	ldrb	r2, [r2, #0]
 800771e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007720:	183b      	adds	r3, r7, r0
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	183a      	adds	r2, r7, r0
 8007726:	1c59      	adds	r1, r3, #1
 8007728:	7011      	strb	r1, [r2, #0]
 800772a:	001a      	movs	r2, r3
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	189b      	adds	r3, r3, r2
 8007730:	2203      	movs	r2, #3
 8007732:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007734:	e017      	b.n	8007766 <USBD_GetString+0x8e>
    {
      unicode[idx++] = *desc++;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	1c5a      	adds	r2, r3, #1
 800773a:	60fa      	str	r2, [r7, #12]
 800773c:	2417      	movs	r4, #23
 800773e:	193a      	adds	r2, r7, r4
 8007740:	7812      	ldrb	r2, [r2, #0]
 8007742:	1939      	adds	r1, r7, r4
 8007744:	1c50      	adds	r0, r2, #1
 8007746:	7008      	strb	r0, [r1, #0]
 8007748:	0011      	movs	r1, r2
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	1852      	adds	r2, r2, r1
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007752:	193b      	adds	r3, r7, r4
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	193a      	adds	r2, r7, r4
 8007758:	1c59      	adds	r1, r3, #1
 800775a:	7011      	strb	r1, [r2, #0]
 800775c:	001a      	movs	r2, r3
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	189b      	adds	r3, r3, r2
 8007762:	2200      	movs	r2, #0
 8007764:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1e3      	bne.n	8007736 <USBD_GetString+0x5e>
    }
  }
}
 800776e:	46c0      	nop			; (mov r8, r8)
 8007770:	46bd      	mov	sp, r7
 8007772:	b007      	add	sp, #28
 8007774:	bd90      	pop	{r4, r7, pc}

08007776 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b084      	sub	sp, #16
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800777e:	230f      	movs	r3, #15
 8007780:	18fb      	adds	r3, r7, r3
 8007782:	2200      	movs	r2, #0
 8007784:	701a      	strb	r2, [r3, #0]

    while (*buf != '\0')
 8007786:	e008      	b.n	800779a <USBD_GetLen+0x24>
    {
        len++;
 8007788:	210f      	movs	r1, #15
 800778a:	187b      	adds	r3, r7, r1
 800778c:	781a      	ldrb	r2, [r3, #0]
 800778e:	187b      	adds	r3, r7, r1
 8007790:	3201      	adds	r2, #1
 8007792:	701a      	strb	r2, [r3, #0]
        buf++;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	3301      	adds	r3, #1
 8007798:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1f2      	bne.n	8007788 <USBD_GetLen+0x12>
    }

    return len;
 80077a2:	230f      	movs	r3, #15
 80077a4:	18fb      	adds	r3, r7, r3
 80077a6:	781b      	ldrb	r3, [r3, #0]
}
 80077a8:	0018      	movs	r0, r3
 80077aa:	46bd      	mov	sp, r7
 80077ac:	b004      	add	sp, #16
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	1dbb      	adds	r3, r7, #6
 80077bc:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	239b      	movs	r3, #155	; 0x9b
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	2102      	movs	r1, #2
 80077c6:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 80077c8:	1dbb      	adds	r3, r7, #6
 80077ca:	881a      	ldrh	r2, [r3, #0]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80077d0:	1dbb      	adds	r3, r7, #6
 80077d2:	881a      	ldrh	r2, [r3, #0]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80077d8:	1dbb      	adds	r3, r7, #6
 80077da:	881b      	ldrh	r3, [r3, #0]
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	2100      	movs	r1, #0
 80077e2:	f000 fcbd 	bl	8008160 <USBD_LL_Transmit>

  return USBD_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	0018      	movs	r0, r3
 80077ea:	46bd      	mov	sp, r7
 80077ec:	b004      	add	sp, #16
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	1dbb      	adds	r3, r7, #6
 80077fc:	801a      	strh	r2, [r3, #0]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80077fe:	1dbb      	adds	r3, r7, #6
 8007800:	881b      	ldrh	r3, [r3, #0]
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	2100      	movs	r1, #0
 8007808:	f000 fcaa 	bl	8008160 <USBD_LL_Transmit>

  return USBD_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	0018      	movs	r0, r3
 8007810:	46bd      	mov	sp, r7
 8007812:	b004      	add	sp, #16
 8007814:	bd80      	pop	{r7, pc}

08007816 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b084      	sub	sp, #16
 800781a:	af00      	add	r7, sp, #0
 800781c:	60f8      	str	r0, [r7, #12]
 800781e:	60b9      	str	r1, [r7, #8]
 8007820:	1dbb      	adds	r3, r7, #6
 8007822:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	239b      	movs	r3, #155	; 0x9b
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	2103      	movs	r1, #3
 800782c:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800782e:	1dbb      	adds	r3, r7, #6
 8007830:	8819      	ldrh	r1, [r3, #0]
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	23a4      	movs	r3, #164	; 0xa4
 8007836:	005b      	lsls	r3, r3, #1
 8007838:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800783a:	1dbb      	adds	r3, r7, #6
 800783c:	8819      	ldrh	r1, [r3, #0]
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	23a6      	movs	r3, #166	; 0xa6
 8007842:	005b      	lsls	r3, r3, #1
 8007844:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8007846:	1dbb      	adds	r3, r7, #6
 8007848:	881b      	ldrh	r3, [r3, #0]
 800784a:	68ba      	ldr	r2, [r7, #8]
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	2100      	movs	r1, #0
 8007850:	f000 fcbe 	bl	80081d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	0018      	movs	r0, r3
 8007858:	46bd      	mov	sp, r7
 800785a:	b004      	add	sp, #16
 800785c:	bd80      	pop	{r7, pc}

0800785e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b084      	sub	sp, #16
 8007862:	af00      	add	r7, sp, #0
 8007864:	60f8      	str	r0, [r7, #12]
 8007866:	60b9      	str	r1, [r7, #8]
 8007868:	1dbb      	adds	r3, r7, #6
 800786a:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800786c:	1dbb      	adds	r3, r7, #6
 800786e:	881b      	ldrh	r3, [r3, #0]
 8007870:	68ba      	ldr	r2, [r7, #8]
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	2100      	movs	r1, #0
 8007876:	f000 fcab 	bl	80081d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	0018      	movs	r0, r3
 800787e:	46bd      	mov	sp, r7
 8007880:	b004      	add	sp, #16
 8007882:	bd80      	pop	{r7, pc}

08007884 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	239b      	movs	r3, #155	; 0x9b
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	2104      	movs	r1, #4
 8007894:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	2300      	movs	r3, #0
 800789a:	2200      	movs	r2, #0
 800789c:	2100      	movs	r1, #0
 800789e:	f000 fc5f 	bl	8008160 <USBD_LL_Transmit>

  return USBD_OK;
 80078a2:	2300      	movs	r3, #0
}
 80078a4:	0018      	movs	r0, r3
 80078a6:	46bd      	mov	sp, r7
 80078a8:	b002      	add	sp, #8
 80078aa:	bd80      	pop	{r7, pc}

080078ac <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	239b      	movs	r3, #155	; 0x9b
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	2105      	movs	r1, #5
 80078bc:	50d1      	str	r1, [r2, r3]

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	2300      	movs	r3, #0
 80078c2:	2200      	movs	r2, #0
 80078c4:	2100      	movs	r1, #0
 80078c6:	f000 fc83 	bl	80081d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	0018      	movs	r0, r3
 80078ce:	46bd      	mov	sp, r7
 80078d0:	b002      	add	sp, #8
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80078d8:	4914      	ldr	r1, [pc, #80]	; (800792c <MX_USB_DEVICE_Init+0x58>)
 80078da:	4b15      	ldr	r3, [pc, #84]	; (8007930 <MX_USB_DEVICE_Init+0x5c>)
 80078dc:	2200      	movs	r2, #0
 80078de:	0018      	movs	r0, r3
 80078e0:	f7fe fe8a 	bl	80065f8 <USBD_Init>
 80078e4:	1e03      	subs	r3, r0, #0
 80078e6:	d001      	beq.n	80078ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80078e8:	f7f8 fed6 	bl	8000698 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80078ec:	4a11      	ldr	r2, [pc, #68]	; (8007934 <MX_USB_DEVICE_Init+0x60>)
 80078ee:	4b10      	ldr	r3, [pc, #64]	; (8007930 <MX_USB_DEVICE_Init+0x5c>)
 80078f0:	0011      	movs	r1, r2
 80078f2:	0018      	movs	r0, r3
 80078f4:	f7fe feb1 	bl	800665a <USBD_RegisterClass>
 80078f8:	1e03      	subs	r3, r0, #0
 80078fa:	d001      	beq.n	8007900 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 80078fc:	f7f8 fecc 	bl	8000698 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007900:	4a0d      	ldr	r2, [pc, #52]	; (8007938 <MX_USB_DEVICE_Init+0x64>)
 8007902:	4b0b      	ldr	r3, [pc, #44]	; (8007930 <MX_USB_DEVICE_Init+0x5c>)
 8007904:	0011      	movs	r1, r2
 8007906:	0018      	movs	r0, r3
 8007908:	f7fe fdfc 	bl	8006504 <USBD_CDC_RegisterInterface>
 800790c:	1e03      	subs	r3, r0, #0
 800790e:	d001      	beq.n	8007914 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8007910:	f7f8 fec2 	bl	8000698 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007914:	4b06      	ldr	r3, [pc, #24]	; (8007930 <MX_USB_DEVICE_Init+0x5c>)
 8007916:	0018      	movs	r0, r3
 8007918:	f7fe fec0 	bl	800669c <USBD_Start>
 800791c:	1e03      	subs	r3, r0, #0
 800791e:	d001      	beq.n	8007924 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8007920:	f7f8 feba 	bl	8000698 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007924:	46c0      	nop			; (mov r8, r8)
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	46c0      	nop			; (mov r8, r8)
 800792c:	20000130 	.word	0x20000130
 8007930:	20000440 	.word	0x20000440
 8007934:	2000001c 	.word	0x2000001c
 8007938:	20000120 	.word	0x20000120

0800793c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007940:	4907      	ldr	r1, [pc, #28]	; (8007960 <CDC_Init_FS+0x24>)
 8007942:	4b08      	ldr	r3, [pc, #32]	; (8007964 <CDC_Init_FS+0x28>)
 8007944:	2200      	movs	r2, #0
 8007946:	0018      	movs	r0, r3
 8007948:	f7fe fdf8 	bl	800653c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800794c:	4a06      	ldr	r2, [pc, #24]	; (8007968 <CDC_Init_FS+0x2c>)
 800794e:	4b05      	ldr	r3, [pc, #20]	; (8007964 <CDC_Init_FS+0x28>)
 8007950:	0011      	movs	r1, r2
 8007952:	0018      	movs	r0, r3
 8007954:	f7fe fe0e 	bl	8006574 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007958:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800795a:	0018      	movs	r0, r3
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}
 8007960:	20000ac4 	.word	0x20000ac4
 8007964:	20000440 	.word	0x20000440
 8007968:	200006dc 	.word	0x200006dc

0800796c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007970:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007972:	0018      	movs	r0, r3
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6039      	str	r1, [r7, #0]
 8007980:	0011      	movs	r1, r2
 8007982:	1dfb      	adds	r3, r7, #7
 8007984:	1c02      	adds	r2, r0, #0
 8007986:	701a      	strb	r2, [r3, #0]
 8007988:	1d3b      	adds	r3, r7, #4
 800798a:	1c0a      	adds	r2, r1, #0
 800798c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800798e:	1dfb      	adds	r3, r7, #7
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	2b23      	cmp	r3, #35	; 0x23
 8007994:	d804      	bhi.n	80079a0 <CDC_Control_FS+0x28>
 8007996:	009a      	lsls	r2, r3, #2
 8007998:	4b04      	ldr	r3, [pc, #16]	; (80079ac <CDC_Control_FS+0x34>)
 800799a:	18d3      	adds	r3, r2, r3
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80079a0:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 80079a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80079a4:	0018      	movs	r0, r3
 80079a6:	46bd      	mov	sp, r7
 80079a8:	b002      	add	sp, #8
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	08008444 	.word	0x08008444

080079b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	4b0a      	ldr	r3, [pc, #40]	; (80079e8 <CDC_Receive_FS+0x38>)
 80079be:	0011      	movs	r1, r2
 80079c0:	0018      	movs	r0, r3
 80079c2:	f7fe fdd7 	bl	8006574 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80079c6:	4b08      	ldr	r3, [pc, #32]	; (80079e8 <CDC_Receive_FS+0x38>)
 80079c8:	0018      	movs	r0, r3
 80079ca:	f7fe fde7 	bl	800659c <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallBack(Buf, Len[0]);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	0011      	movs	r1, r2
 80079d6:	0018      	movs	r0, r3
 80079d8:	f000 f808 	bl	80079ec <CDC_ReceiveCallBack>
  return (USBD_OK);
 80079dc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80079de:	0018      	movs	r0, r3
 80079e0:	46bd      	mov	sp, r7
 80079e2:	b002      	add	sp, #8
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	46c0      	nop			; (mov r8, r8)
 80079e8:	20000440 	.word	0x20000440

080079ec <CDC_ReceiveCallBack>:
  return result;
}

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
__weak void CDC_ReceiveCallBack(uint8_t *buf, uint32_t len)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]

}
 80079f6:	46c0      	nop			; (mov r8, r8)
 80079f8:	46bd      	mov	sp, r7
 80079fa:	b002      	add	sp, #8
 80079fc:	bd80      	pop	{r7, pc}
	...

08007a00 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	0002      	movs	r2, r0
 8007a08:	6039      	str	r1, [r7, #0]
 8007a0a:	1dfb      	adds	r3, r7, #7
 8007a0c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	2212      	movs	r2, #18
 8007a12:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007a14:	4b02      	ldr	r3, [pc, #8]	; (8007a20 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007a16:	0018      	movs	r0, r3
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	b002      	add	sp, #8
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	46c0      	nop			; (mov r8, r8)
 8007a20:	2000014c 	.word	0x2000014c

08007a24 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	0002      	movs	r2, r0
 8007a2c:	6039      	str	r1, [r7, #0]
 8007a2e:	1dfb      	adds	r3, r7, #7
 8007a30:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	2204      	movs	r2, #4
 8007a36:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007a38:	4b02      	ldr	r3, [pc, #8]	; (8007a44 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007a3a:	0018      	movs	r0, r3
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	b002      	add	sp, #8
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	46c0      	nop			; (mov r8, r8)
 8007a44:	20000160 	.word	0x20000160

08007a48 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	0002      	movs	r2, r0
 8007a50:	6039      	str	r1, [r7, #0]
 8007a52:	1dfb      	adds	r3, r7, #7
 8007a54:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8007a56:	1dfb      	adds	r3, r7, #7
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d106      	bne.n	8007a6c <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a5e:	683a      	ldr	r2, [r7, #0]
 8007a60:	4908      	ldr	r1, [pc, #32]	; (8007a84 <USBD_FS_ProductStrDescriptor+0x3c>)
 8007a62:	4b09      	ldr	r3, [pc, #36]	; (8007a88 <USBD_FS_ProductStrDescriptor+0x40>)
 8007a64:	0018      	movs	r0, r3
 8007a66:	f7ff fe37 	bl	80076d8 <USBD_GetString>
 8007a6a:	e005      	b.n	8007a78 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a6c:	683a      	ldr	r2, [r7, #0]
 8007a6e:	4905      	ldr	r1, [pc, #20]	; (8007a84 <USBD_FS_ProductStrDescriptor+0x3c>)
 8007a70:	4b05      	ldr	r3, [pc, #20]	; (8007a88 <USBD_FS_ProductStrDescriptor+0x40>)
 8007a72:	0018      	movs	r0, r3
 8007a74:	f7ff fe30 	bl	80076d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a78:	4b02      	ldr	r3, [pc, #8]	; (8007a84 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8007a7a:	0018      	movs	r0, r3
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	b002      	add	sp, #8
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	46c0      	nop			; (mov r8, r8)
 8007a84:	20000eac 	.word	0x20000eac
 8007a88:	08008380 	.word	0x08008380

08007a8c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	0002      	movs	r2, r0
 8007a94:	6039      	str	r1, [r7, #0]
 8007a96:	1dfb      	adds	r3, r7, #7
 8007a98:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	4904      	ldr	r1, [pc, #16]	; (8007ab0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007a9e:	4b05      	ldr	r3, [pc, #20]	; (8007ab4 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8007aa0:	0018      	movs	r0, r3
 8007aa2:	f7ff fe19 	bl	80076d8 <USBD_GetString>
  return USBD_StrDesc;
 8007aa6:	4b02      	ldr	r3, [pc, #8]	; (8007ab0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8007aa8:	0018      	movs	r0, r3
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	b002      	add	sp, #8
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	20000eac 	.word	0x20000eac
 8007ab4:	08008398 	.word	0x08008398

08007ab8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	0002      	movs	r2, r0
 8007ac0:	6039      	str	r1, [r7, #0]
 8007ac2:	1dfb      	adds	r3, r7, #7
 8007ac4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	221a      	movs	r2, #26
 8007aca:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007acc:	f000 f84c 	bl	8007b68 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007ad0:	4b02      	ldr	r3, [pc, #8]	; (8007adc <USBD_FS_SerialStrDescriptor+0x24>)
}
 8007ad2:	0018      	movs	r0, r3
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	b002      	add	sp, #8
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	46c0      	nop			; (mov r8, r8)
 8007adc:	20000164 	.word	0x20000164

08007ae0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	0002      	movs	r2, r0
 8007ae8:	6039      	str	r1, [r7, #0]
 8007aea:	1dfb      	adds	r3, r7, #7
 8007aec:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8007aee:	1dfb      	adds	r3, r7, #7
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d106      	bne.n	8007b04 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	4908      	ldr	r1, [pc, #32]	; (8007b1c <USBD_FS_ConfigStrDescriptor+0x3c>)
 8007afa:	4b09      	ldr	r3, [pc, #36]	; (8007b20 <USBD_FS_ConfigStrDescriptor+0x40>)
 8007afc:	0018      	movs	r0, r3
 8007afe:	f7ff fdeb 	bl	80076d8 <USBD_GetString>
 8007b02:	e005      	b.n	8007b10 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b04:	683a      	ldr	r2, [r7, #0]
 8007b06:	4905      	ldr	r1, [pc, #20]	; (8007b1c <USBD_FS_ConfigStrDescriptor+0x3c>)
 8007b08:	4b05      	ldr	r3, [pc, #20]	; (8007b20 <USBD_FS_ConfigStrDescriptor+0x40>)
 8007b0a:	0018      	movs	r0, r3
 8007b0c:	f7ff fde4 	bl	80076d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b10:	4b02      	ldr	r3, [pc, #8]	; (8007b1c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8007b12:	0018      	movs	r0, r3
 8007b14:	46bd      	mov	sp, r7
 8007b16:	b002      	add	sp, #8
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	46c0      	nop			; (mov r8, r8)
 8007b1c:	20000eac 	.word	0x20000eac
 8007b20:	080083ac 	.word	0x080083ac

08007b24 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	0002      	movs	r2, r0
 8007b2c:	6039      	str	r1, [r7, #0]
 8007b2e:	1dfb      	adds	r3, r7, #7
 8007b30:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8007b32:	1dfb      	adds	r3, r7, #7
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d106      	bne.n	8007b48 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b3a:	683a      	ldr	r2, [r7, #0]
 8007b3c:	4908      	ldr	r1, [pc, #32]	; (8007b60 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8007b3e:	4b09      	ldr	r3, [pc, #36]	; (8007b64 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8007b40:	0018      	movs	r0, r3
 8007b42:	f7ff fdc9 	bl	80076d8 <USBD_GetString>
 8007b46:	e005      	b.n	8007b54 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b48:	683a      	ldr	r2, [r7, #0]
 8007b4a:	4905      	ldr	r1, [pc, #20]	; (8007b60 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8007b4c:	4b05      	ldr	r3, [pc, #20]	; (8007b64 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8007b4e:	0018      	movs	r0, r3
 8007b50:	f7ff fdc2 	bl	80076d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b54:	4b02      	ldr	r3, [pc, #8]	; (8007b60 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8007b56:	0018      	movs	r0, r3
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	b002      	add	sp, #8
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	46c0      	nop			; (mov r8, r8)
 8007b60:	20000eac 	.word	0x20000eac
 8007b64:	080083b8 	.word	0x080083b8

08007b68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007b6e:	4b10      	ldr	r3, [pc, #64]	; (8007bb0 <Get_SerialNum+0x48>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007b74:	4b0f      	ldr	r3, [pc, #60]	; (8007bb4 <Get_SerialNum+0x4c>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007b7a:	4b0f      	ldr	r3, [pc, #60]	; (8007bb8 <Get_SerialNum+0x50>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	18d3      	adds	r3, r2, r3
 8007b86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00b      	beq.n	8007ba6 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007b8e:	490b      	ldr	r1, [pc, #44]	; (8007bbc <Get_SerialNum+0x54>)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2208      	movs	r2, #8
 8007b94:	0018      	movs	r0, r3
 8007b96:	f000 f815 	bl	8007bc4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007b9a:	4909      	ldr	r1, [pc, #36]	; (8007bc0 <Get_SerialNum+0x58>)
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	2204      	movs	r2, #4
 8007ba0:	0018      	movs	r0, r3
 8007ba2:	f000 f80f 	bl	8007bc4 <IntToUnicode>
  }
}
 8007ba6:	46c0      	nop			; (mov r8, r8)
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	b004      	add	sp, #16
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	46c0      	nop			; (mov r8, r8)
 8007bb0:	1ff80050 	.word	0x1ff80050
 8007bb4:	1ff80054 	.word	0x1ff80054
 8007bb8:	1ff80058 	.word	0x1ff80058
 8007bbc:	20000166 	.word	0x20000166
 8007bc0:	20000176 	.word	0x20000176

08007bc4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b086      	sub	sp, #24
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	1dfb      	adds	r3, r7, #7
 8007bd0:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8007bd2:	2117      	movs	r1, #23
 8007bd4:	187b      	adds	r3, r7, r1
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8007bda:	187b      	adds	r3, r7, r1
 8007bdc:	2200      	movs	r2, #0
 8007bde:	701a      	strb	r2, [r3, #0]
 8007be0:	e02f      	b.n	8007c42 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	0f1b      	lsrs	r3, r3, #28
 8007be6:	2b09      	cmp	r3, #9
 8007be8:	d80d      	bhi.n	8007c06 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	0f1b      	lsrs	r3, r3, #28
 8007bee:	b2da      	uxtb	r2, r3
 8007bf0:	2317      	movs	r3, #23
 8007bf2:	18fb      	adds	r3, r7, r3
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	005b      	lsls	r3, r3, #1
 8007bf8:	0019      	movs	r1, r3
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	185b      	adds	r3, r3, r1
 8007bfe:	3230      	adds	r2, #48	; 0x30
 8007c00:	b2d2      	uxtb	r2, r2
 8007c02:	701a      	strb	r2, [r3, #0]
 8007c04:	e00c      	b.n	8007c20 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	0f1b      	lsrs	r3, r3, #28
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	2317      	movs	r3, #23
 8007c0e:	18fb      	adds	r3, r7, r3
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	005b      	lsls	r3, r3, #1
 8007c14:	0019      	movs	r1, r3
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	185b      	adds	r3, r3, r1
 8007c1a:	3237      	adds	r2, #55	; 0x37
 8007c1c:	b2d2      	uxtb	r2, r2
 8007c1e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	011b      	lsls	r3, r3, #4
 8007c24:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007c26:	2117      	movs	r1, #23
 8007c28:	187b      	adds	r3, r7, r1
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	005b      	lsls	r3, r3, #1
 8007c2e:	3301      	adds	r3, #1
 8007c30:	68ba      	ldr	r2, [r7, #8]
 8007c32:	18d3      	adds	r3, r2, r3
 8007c34:	2200      	movs	r2, #0
 8007c36:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007c38:	187b      	adds	r3, r7, r1
 8007c3a:	781a      	ldrb	r2, [r3, #0]
 8007c3c:	187b      	adds	r3, r7, r1
 8007c3e:	3201      	adds	r2, #1
 8007c40:	701a      	strb	r2, [r3, #0]
 8007c42:	2317      	movs	r3, #23
 8007c44:	18fa      	adds	r2, r7, r3
 8007c46:	1dfb      	adds	r3, r7, #7
 8007c48:	7812      	ldrb	r2, [r2, #0]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d3c8      	bcc.n	8007be2 <IntToUnicode+0x1e>
  }
}
 8007c50:	46c0      	nop			; (mov r8, r8)
 8007c52:	46bd      	mov	sp, r7
 8007c54:	b006      	add	sp, #24
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a0a      	ldr	r2, [pc, #40]	; (8007c90 <HAL_PCD_MspInit+0x38>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d10e      	bne.n	8007c88 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007c6a:	4b0a      	ldr	r3, [pc, #40]	; (8007c94 <HAL_PCD_MspInit+0x3c>)
 8007c6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c6e:	4b09      	ldr	r3, [pc, #36]	; (8007c94 <HAL_PCD_MspInit+0x3c>)
 8007c70:	2180      	movs	r1, #128	; 0x80
 8007c72:	0409      	lsls	r1, r1, #16
 8007c74:	430a      	orrs	r2, r1
 8007c76:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8007c78:	2200      	movs	r2, #0
 8007c7a:	2100      	movs	r1, #0
 8007c7c:	201f      	movs	r0, #31
 8007c7e:	f7f8 ff79 	bl	8000b74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8007c82:	201f      	movs	r0, #31
 8007c84:	f7f8 ff8b 	bl	8000b9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007c88:	46c0      	nop			; (mov r8, r8)
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	b002      	add	sp, #8
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	40005c00 	.word	0x40005c00
 8007c94:	40021000 	.word	0x40021000

08007c98 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	23bc      	movs	r3, #188	; 0xbc
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	58d2      	ldr	r2, [r2, r3]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	21ac      	movs	r1, #172	; 0xac
 8007cac:	0089      	lsls	r1, r1, #2
 8007cae:	468c      	mov	ip, r1
 8007cb0:	4463      	add	r3, ip
 8007cb2:	0019      	movs	r1, r3
 8007cb4:	0010      	movs	r0, r2
 8007cb6:	f7fe fd45 	bl	8006744 <USBD_LL_SetupStage>
}
 8007cba:	46c0      	nop			; (mov r8, r8)
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	b002      	add	sp, #8
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cc2:	b590      	push	{r4, r7, lr}
 8007cc4:	b083      	sub	sp, #12
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
 8007cca:	000a      	movs	r2, r1
 8007ccc:	1cfb      	adds	r3, r7, #3
 8007cce:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	23bc      	movs	r3, #188	; 0xbc
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	58d4      	ldr	r4, [r2, r3]
 8007cd8:	1cfb      	adds	r3, r7, #3
 8007cda:	781a      	ldrb	r2, [r3, #0]
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	23be      	movs	r3, #190	; 0xbe
 8007ce0:	0059      	lsls	r1, r3, #1
 8007ce2:	0013      	movs	r3, r2
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	189b      	adds	r3, r3, r2
 8007ce8:	00db      	lsls	r3, r3, #3
 8007cea:	18c3      	adds	r3, r0, r3
 8007cec:	185b      	adds	r3, r3, r1
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	1cfb      	adds	r3, r7, #3
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	0019      	movs	r1, r3
 8007cf6:	0020      	movs	r0, r4
 8007cf8:	f7fe fd80 	bl	80067fc <USBD_LL_DataOutStage>
}
 8007cfc:	46c0      	nop			; (mov r8, r8)
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	b003      	add	sp, #12
 8007d02:	bd90      	pop	{r4, r7, pc}

08007d04 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	000a      	movs	r2, r1
 8007d0e:	1cfb      	adds	r3, r7, #3
 8007d10:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	23bc      	movs	r3, #188	; 0xbc
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	58d0      	ldr	r0, [r2, r3]
 8007d1a:	1cfb      	adds	r3, r7, #3
 8007d1c:	781a      	ldrb	r2, [r3, #0]
 8007d1e:	6879      	ldr	r1, [r7, #4]
 8007d20:	0013      	movs	r3, r2
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	189b      	adds	r3, r3, r2
 8007d26:	00db      	lsls	r3, r3, #3
 8007d28:	18cb      	adds	r3, r1, r3
 8007d2a:	333c      	adds	r3, #60	; 0x3c
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	1cfb      	adds	r3, r7, #3
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	0019      	movs	r1, r3
 8007d34:	f7fe fde4 	bl	8006900 <USBD_LL_DataInStage>
}
 8007d38:	46c0      	nop			; (mov r8, r8)
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	b002      	add	sp, #8
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	23bc      	movs	r3, #188	; 0xbc
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	58d3      	ldr	r3, [r2, r3]
 8007d50:	0018      	movs	r0, r3
 8007d52:	f7fe ff15 	bl	8006b80 <USBD_LL_SOF>
}
 8007d56:	46c0      	nop			; (mov r8, r8)
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	b002      	add	sp, #8
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b084      	sub	sp, #16
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007d66:	230f      	movs	r3, #15
 8007d68:	18fb      	adds	r3, r7, r3
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d001      	beq.n	8007d7a <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8007d76:	f7f8 fc8f 	bl	8000698 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	23bc      	movs	r3, #188	; 0xbc
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	58d2      	ldr	r2, [r2, r3]
 8007d82:	230f      	movs	r3, #15
 8007d84:	18fb      	adds	r3, r7, r3
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	0019      	movs	r1, r3
 8007d8a:	0010      	movs	r0, r2
 8007d8c:	f7fe febd 	bl	8006b0a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	23bc      	movs	r3, #188	; 0xbc
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	58d3      	ldr	r3, [r2, r3]
 8007d98:	0018      	movs	r0, r3
 8007d9a:	f7fe fe6e 	bl	8006a7a <USBD_LL_Reset>
}
 8007d9e:	46c0      	nop			; (mov r8, r8)
 8007da0:	46bd      	mov	sp, r7
 8007da2:	b004      	add	sp, #16
 8007da4:	bd80      	pop	{r7, pc}
	...

08007da8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	23bc      	movs	r3, #188	; 0xbc
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	58d3      	ldr	r3, [r2, r3]
 8007db8:	0018      	movs	r0, r3
 8007dba:	f7fe feb7 	bl	8006b2c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	699b      	ldr	r3, [r3, #24]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d005      	beq.n	8007dd2 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007dc6:	4b05      	ldr	r3, [pc, #20]	; (8007ddc <HAL_PCD_SuspendCallback+0x34>)
 8007dc8:	691a      	ldr	r2, [r3, #16]
 8007dca:	4b04      	ldr	r3, [pc, #16]	; (8007ddc <HAL_PCD_SuspendCallback+0x34>)
 8007dcc:	2106      	movs	r1, #6
 8007dce:	430a      	orrs	r2, r1
 8007dd0:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8007dd2:	46c0      	nop			; (mov r8, r8)
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	b002      	add	sp, #8
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	46c0      	nop			; (mov r8, r8)
 8007ddc:	e000ed00 	.word	0xe000ed00

08007de0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	699b      	ldr	r3, [r3, #24]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d007      	beq.n	8007e00 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007df0:	4b09      	ldr	r3, [pc, #36]	; (8007e18 <HAL_PCD_ResumeCallback+0x38>)
 8007df2:	691a      	ldr	r2, [r3, #16]
 8007df4:	4b08      	ldr	r3, [pc, #32]	; (8007e18 <HAL_PCD_ResumeCallback+0x38>)
 8007df6:	2106      	movs	r1, #6
 8007df8:	438a      	bics	r2, r1
 8007dfa:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8007dfc:	f000 fa4a 	bl	8008294 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	23bc      	movs	r3, #188	; 0xbc
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	58d3      	ldr	r3, [r2, r3]
 8007e08:	0018      	movs	r0, r3
 8007e0a:	f7fe fea7 	bl	8006b5c <USBD_LL_Resume>
}
 8007e0e:	46c0      	nop			; (mov r8, r8)
 8007e10:	46bd      	mov	sp, r7
 8007e12:	b002      	add	sp, #8
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	46c0      	nop			; (mov r8, r8)
 8007e18:	e000ed00 	.word	0xe000ed00

08007e1c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007e24:	4a2d      	ldr	r2, [pc, #180]	; (8007edc <USBD_LL_Init+0xc0>)
 8007e26:	23bc      	movs	r3, #188	; 0xbc
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	6879      	ldr	r1, [r7, #4]
 8007e2c:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	23a6      	movs	r3, #166	; 0xa6
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	4929      	ldr	r1, [pc, #164]	; (8007edc <USBD_LL_Init+0xc0>)
 8007e36:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8007e38:	4b28      	ldr	r3, [pc, #160]	; (8007edc <USBD_LL_Init+0xc0>)
 8007e3a:	4a29      	ldr	r2, [pc, #164]	; (8007ee0 <USBD_LL_Init+0xc4>)
 8007e3c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007e3e:	4b27      	ldr	r3, [pc, #156]	; (8007edc <USBD_LL_Init+0xc0>)
 8007e40:	2208      	movs	r2, #8
 8007e42:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007e44:	4b25      	ldr	r3, [pc, #148]	; (8007edc <USBD_LL_Init+0xc0>)
 8007e46:	2202      	movs	r2, #2
 8007e48:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007e4a:	4b24      	ldr	r3, [pc, #144]	; (8007edc <USBD_LL_Init+0xc0>)
 8007e4c:	2202      	movs	r2, #2
 8007e4e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007e50:	4b22      	ldr	r3, [pc, #136]	; (8007edc <USBD_LL_Init+0xc0>)
 8007e52:	2200      	movs	r2, #0
 8007e54:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007e56:	4b21      	ldr	r3, [pc, #132]	; (8007edc <USBD_LL_Init+0xc0>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007e5c:	4b1f      	ldr	r3, [pc, #124]	; (8007edc <USBD_LL_Init+0xc0>)
 8007e5e:	2200      	movs	r2, #0
 8007e60:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007e62:	4b1e      	ldr	r3, [pc, #120]	; (8007edc <USBD_LL_Init+0xc0>)
 8007e64:	0018      	movs	r0, r3
 8007e66:	f7f9 f865 	bl	8000f34 <HAL_PCD_Init>
 8007e6a:	1e03      	subs	r3, r0, #0
 8007e6c:	d001      	beq.n	8007e72 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8007e6e:	f7f8 fc13 	bl	8000698 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	23a6      	movs	r3, #166	; 0xa6
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	58d0      	ldr	r0, [r2, r3]
 8007e7a:	2318      	movs	r3, #24
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	2100      	movs	r1, #0
 8007e80:	f7fa fc76 	bl	8002770 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	23a6      	movs	r3, #166	; 0xa6
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	58d0      	ldr	r0, [r2, r3]
 8007e8c:	2358      	movs	r3, #88	; 0x58
 8007e8e:	2200      	movs	r2, #0
 8007e90:	2180      	movs	r1, #128	; 0x80
 8007e92:	f7fa fc6d 	bl	8002770 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	23a6      	movs	r3, #166	; 0xa6
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	58d0      	ldr	r0, [r2, r3]
 8007e9e:	23c0      	movs	r3, #192	; 0xc0
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	2181      	movs	r1, #129	; 0x81
 8007ea4:	f7fa fc64 	bl	8002770 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	23a6      	movs	r3, #166	; 0xa6
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	58d0      	ldr	r0, [r2, r3]
 8007eb0:	2388      	movs	r3, #136	; 0x88
 8007eb2:	005b      	lsls	r3, r3, #1
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	2101      	movs	r1, #1
 8007eb8:	f7fa fc5a 	bl	8002770 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	23a6      	movs	r3, #166	; 0xa6
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	58d0      	ldr	r0, [r2, r3]
 8007ec4:	2380      	movs	r3, #128	; 0x80
 8007ec6:	005b      	lsls	r3, r3, #1
 8007ec8:	2200      	movs	r2, #0
 8007eca:	2182      	movs	r1, #130	; 0x82
 8007ecc:	f7fa fc50 	bl	8002770 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	0018      	movs	r0, r3
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	b002      	add	sp, #8
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	46c0      	nop			; (mov r8, r8)
 8007edc:	200010ac 	.word	0x200010ac
 8007ee0:	40005c00 	.word	0x40005c00

08007ee4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eec:	210f      	movs	r1, #15
 8007eee:	187b      	adds	r3, r7, r1
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ef4:	260e      	movs	r6, #14
 8007ef6:	19bb      	adds	r3, r7, r6
 8007ef8:	2200      	movs	r2, #0
 8007efa:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	23a6      	movs	r3, #166	; 0xa6
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	58d3      	ldr	r3, [r2, r3]
 8007f04:	000d      	movs	r5, r1
 8007f06:	187c      	adds	r4, r7, r1
 8007f08:	0018      	movs	r0, r3
 8007f0a:	f7f9 f923 	bl	8001154 <HAL_PCD_Start>
 8007f0e:	0003      	movs	r3, r0
 8007f10:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f12:	19bc      	adds	r4, r7, r6
 8007f14:	0029      	movs	r1, r5
 8007f16:	187b      	adds	r3, r7, r1
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	0018      	movs	r0, r3
 8007f1c:	f000 f9c1 	bl	80082a2 <USBD_Get_USB_Status>
 8007f20:	0003      	movs	r3, r0
 8007f22:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007f24:	19bb      	adds	r3, r7, r6
 8007f26:	781b      	ldrb	r3, [r3, #0]
}
 8007f28:	0018      	movs	r0, r3
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	b005      	add	sp, #20
 8007f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f30 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f32:	b085      	sub	sp, #20
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	000c      	movs	r4, r1
 8007f3a:	0010      	movs	r0, r2
 8007f3c:	0019      	movs	r1, r3
 8007f3e:	1cfb      	adds	r3, r7, #3
 8007f40:	1c22      	adds	r2, r4, #0
 8007f42:	701a      	strb	r2, [r3, #0]
 8007f44:	1cbb      	adds	r3, r7, #2
 8007f46:	1c02      	adds	r2, r0, #0
 8007f48:	701a      	strb	r2, [r3, #0]
 8007f4a:	003b      	movs	r3, r7
 8007f4c:	1c0a      	adds	r2, r1, #0
 8007f4e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f50:	260f      	movs	r6, #15
 8007f52:	19bb      	adds	r3, r7, r6
 8007f54:	2200      	movs	r2, #0
 8007f56:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f58:	250e      	movs	r5, #14
 8007f5a:	197b      	adds	r3, r7, r5
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	23a6      	movs	r3, #166	; 0xa6
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	58d0      	ldr	r0, [r2, r3]
 8007f68:	19bc      	adds	r4, r7, r6
 8007f6a:	1cbb      	adds	r3, r7, #2
 8007f6c:	781d      	ldrb	r5, [r3, #0]
 8007f6e:	003b      	movs	r3, r7
 8007f70:	881a      	ldrh	r2, [r3, #0]
 8007f72:	1cfb      	adds	r3, r7, #3
 8007f74:	7819      	ldrb	r1, [r3, #0]
 8007f76:	002b      	movs	r3, r5
 8007f78:	f7f9 fab9 	bl	80014ee <HAL_PCD_EP_Open>
 8007f7c:	0003      	movs	r3, r0
 8007f7e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f80:	250e      	movs	r5, #14
 8007f82:	197c      	adds	r4, r7, r5
 8007f84:	19bb      	adds	r3, r7, r6
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	0018      	movs	r0, r3
 8007f8a:	f000 f98a 	bl	80082a2 <USBD_Get_USB_Status>
 8007f8e:	0003      	movs	r3, r0
 8007f90:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007f92:	197b      	adds	r3, r7, r5
 8007f94:	781b      	ldrb	r3, [r3, #0]
}
 8007f96:	0018      	movs	r0, r3
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	b005      	add	sp, #20
 8007f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f9e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fa0:	b085      	sub	sp, #20
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
 8007fa6:	000a      	movs	r2, r1
 8007fa8:	1cfb      	adds	r3, r7, #3
 8007faa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fac:	210f      	movs	r1, #15
 8007fae:	187b      	adds	r3, r7, r1
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fb4:	260e      	movs	r6, #14
 8007fb6:	19bb      	adds	r3, r7, r6
 8007fb8:	2200      	movs	r2, #0
 8007fba:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	23a6      	movs	r3, #166	; 0xa6
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	58d2      	ldr	r2, [r2, r3]
 8007fc4:	000d      	movs	r5, r1
 8007fc6:	187c      	adds	r4, r7, r1
 8007fc8:	1cfb      	adds	r3, r7, #3
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	0019      	movs	r1, r3
 8007fce:	0010      	movs	r0, r2
 8007fd0:	f7f9 fb05 	bl	80015de <HAL_PCD_EP_Close>
 8007fd4:	0003      	movs	r3, r0
 8007fd6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fd8:	19bc      	adds	r4, r7, r6
 8007fda:	0029      	movs	r1, r5
 8007fdc:	187b      	adds	r3, r7, r1
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	0018      	movs	r0, r3
 8007fe2:	f000 f95e 	bl	80082a2 <USBD_Get_USB_Status>
 8007fe6:	0003      	movs	r3, r0
 8007fe8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007fea:	19bb      	adds	r3, r7, r6
 8007fec:	781b      	ldrb	r3, [r3, #0]
}
 8007fee:	0018      	movs	r0, r3
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	b005      	add	sp, #20
 8007ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ff6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ff6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ff8:	b085      	sub	sp, #20
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
 8007ffe:	000a      	movs	r2, r1
 8008000:	1cfb      	adds	r3, r7, #3
 8008002:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008004:	210f      	movs	r1, #15
 8008006:	187b      	adds	r3, r7, r1
 8008008:	2200      	movs	r2, #0
 800800a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800800c:	260e      	movs	r6, #14
 800800e:	19bb      	adds	r3, r7, r6
 8008010:	2200      	movs	r2, #0
 8008012:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	23a6      	movs	r3, #166	; 0xa6
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	58d2      	ldr	r2, [r2, r3]
 800801c:	000d      	movs	r5, r1
 800801e:	187c      	adds	r4, r7, r1
 8008020:	1cfb      	adds	r3, r7, #3
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	0019      	movs	r1, r3
 8008026:	0010      	movs	r0, r2
 8008028:	f7f9 fbd0 	bl	80017cc <HAL_PCD_EP_SetStall>
 800802c:	0003      	movs	r3, r0
 800802e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008030:	19bc      	adds	r4, r7, r6
 8008032:	0029      	movs	r1, r5
 8008034:	187b      	adds	r3, r7, r1
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	0018      	movs	r0, r3
 800803a:	f000 f932 	bl	80082a2 <USBD_Get_USB_Status>
 800803e:	0003      	movs	r3, r0
 8008040:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008042:	19bb      	adds	r3, r7, r6
 8008044:	781b      	ldrb	r3, [r3, #0]
}
 8008046:	0018      	movs	r0, r3
 8008048:	46bd      	mov	sp, r7
 800804a:	b005      	add	sp, #20
 800804c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800804e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800804e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008050:	b085      	sub	sp, #20
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	000a      	movs	r2, r1
 8008058:	1cfb      	adds	r3, r7, #3
 800805a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800805c:	210f      	movs	r1, #15
 800805e:	187b      	adds	r3, r7, r1
 8008060:	2200      	movs	r2, #0
 8008062:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008064:	260e      	movs	r6, #14
 8008066:	19bb      	adds	r3, r7, r6
 8008068:	2200      	movs	r2, #0
 800806a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	23a6      	movs	r3, #166	; 0xa6
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	58d2      	ldr	r2, [r2, r3]
 8008074:	000d      	movs	r5, r1
 8008076:	187c      	adds	r4, r7, r1
 8008078:	1cfb      	adds	r3, r7, #3
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	0019      	movs	r1, r3
 800807e:	0010      	movs	r0, r2
 8008080:	f7f9 fc00 	bl	8001884 <HAL_PCD_EP_ClrStall>
 8008084:	0003      	movs	r3, r0
 8008086:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008088:	19bc      	adds	r4, r7, r6
 800808a:	0029      	movs	r1, r5
 800808c:	187b      	adds	r3, r7, r1
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	0018      	movs	r0, r3
 8008092:	f000 f906 	bl	80082a2 <USBD_Get_USB_Status>
 8008096:	0003      	movs	r3, r0
 8008098:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800809a:	19bb      	adds	r3, r7, r6
 800809c:	781b      	ldrb	r3, [r3, #0]
}
 800809e:	0018      	movs	r0, r3
 80080a0:	46bd      	mov	sp, r7
 80080a2:	b005      	add	sp, #20
 80080a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080080a6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b084      	sub	sp, #16
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	000a      	movs	r2, r1
 80080b0:	1cfb      	adds	r3, r7, #3
 80080b2:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	23a6      	movs	r3, #166	; 0xa6
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	58d3      	ldr	r3, [r2, r3]
 80080bc:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80080be:	1cfb      	adds	r3, r7, #3
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	b25b      	sxtb	r3, r3
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	da0d      	bge.n	80080e4 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80080c8:	1cfb      	adds	r3, r7, #3
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	227f      	movs	r2, #127	; 0x7f
 80080ce:	4013      	ands	r3, r2
 80080d0:	68f9      	ldr	r1, [r7, #12]
 80080d2:	1c5a      	adds	r2, r3, #1
 80080d4:	0013      	movs	r3, r2
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	189b      	adds	r3, r3, r2
 80080da:	00db      	lsls	r3, r3, #3
 80080dc:	18cb      	adds	r3, r1, r3
 80080de:	3302      	adds	r3, #2
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	e00d      	b.n	8008100 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80080e4:	1cfb      	adds	r3, r7, #3
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	227f      	movs	r2, #127	; 0x7f
 80080ea:	401a      	ands	r2, r3
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	23b5      	movs	r3, #181	; 0xb5
 80080f0:	0059      	lsls	r1, r3, #1
 80080f2:	0013      	movs	r3, r2
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	189b      	adds	r3, r3, r2
 80080f8:	00db      	lsls	r3, r3, #3
 80080fa:	18c3      	adds	r3, r0, r3
 80080fc:	185b      	adds	r3, r3, r1
 80080fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008100:	0018      	movs	r0, r3
 8008102:	46bd      	mov	sp, r7
 8008104:	b004      	add	sp, #16
 8008106:	bd80      	pop	{r7, pc}

08008108 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	000a      	movs	r2, r1
 8008112:	1cfb      	adds	r3, r7, #3
 8008114:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008116:	210f      	movs	r1, #15
 8008118:	187b      	adds	r3, r7, r1
 800811a:	2200      	movs	r2, #0
 800811c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800811e:	260e      	movs	r6, #14
 8008120:	19bb      	adds	r3, r7, r6
 8008122:	2200      	movs	r2, #0
 8008124:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	23a6      	movs	r3, #166	; 0xa6
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	58d2      	ldr	r2, [r2, r3]
 800812e:	000d      	movs	r5, r1
 8008130:	187c      	adds	r4, r7, r1
 8008132:	1cfb      	adds	r3, r7, #3
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	0019      	movs	r1, r3
 8008138:	0010      	movs	r0, r2
 800813a:	f7f9 f9ad 	bl	8001498 <HAL_PCD_SetAddress>
 800813e:	0003      	movs	r3, r0
 8008140:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008142:	19bc      	adds	r4, r7, r6
 8008144:	0029      	movs	r1, r5
 8008146:	187b      	adds	r3, r7, r1
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	0018      	movs	r0, r3
 800814c:	f000 f8a9 	bl	80082a2 <USBD_Get_USB_Status>
 8008150:	0003      	movs	r3, r0
 8008152:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008154:	19bb      	adds	r3, r7, r6
 8008156:	781b      	ldrb	r3, [r3, #0]
}
 8008158:	0018      	movs	r0, r3
 800815a:	46bd      	mov	sp, r7
 800815c:	b005      	add	sp, #20
 800815e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008160 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008162:	b087      	sub	sp, #28
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	0008      	movs	r0, r1
 800816a:	607a      	str	r2, [r7, #4]
 800816c:	0019      	movs	r1, r3
 800816e:	230b      	movs	r3, #11
 8008170:	18fb      	adds	r3, r7, r3
 8008172:	1c02      	adds	r2, r0, #0
 8008174:	701a      	strb	r2, [r3, #0]
 8008176:	2408      	movs	r4, #8
 8008178:	193b      	adds	r3, r7, r4
 800817a:	1c0a      	adds	r2, r1, #0
 800817c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800817e:	2117      	movs	r1, #23
 8008180:	187b      	adds	r3, r7, r1
 8008182:	2200      	movs	r2, #0
 8008184:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008186:	2516      	movs	r5, #22
 8008188:	197b      	adds	r3, r7, r5
 800818a:	2200      	movs	r2, #0
 800818c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	23a6      	movs	r3, #166	; 0xa6
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	58d0      	ldr	r0, [r2, r3]
 8008196:	193b      	adds	r3, r7, r4
 8008198:	881d      	ldrh	r5, [r3, #0]
 800819a:	000e      	movs	r6, r1
 800819c:	187c      	adds	r4, r7, r1
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	230b      	movs	r3, #11
 80081a2:	18fb      	adds	r3, r7, r3
 80081a4:	7819      	ldrb	r1, [r3, #0]
 80081a6:	002b      	movs	r3, r5
 80081a8:	f7f9 fac7 	bl	800173a <HAL_PCD_EP_Transmit>
 80081ac:	0003      	movs	r3, r0
 80081ae:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081b0:	2516      	movs	r5, #22
 80081b2:	197c      	adds	r4, r7, r5
 80081b4:	0031      	movs	r1, r6
 80081b6:	187b      	adds	r3, r7, r1
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	0018      	movs	r0, r3
 80081bc:	f000 f871 	bl	80082a2 <USBD_Get_USB_Status>
 80081c0:	0003      	movs	r3, r0
 80081c2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80081c4:	197b      	adds	r3, r7, r5
 80081c6:	781b      	ldrb	r3, [r3, #0]
}
 80081c8:	0018      	movs	r0, r3
 80081ca:	46bd      	mov	sp, r7
 80081cc:	b007      	add	sp, #28
 80081ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080081d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80081d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081d2:	b087      	sub	sp, #28
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	0008      	movs	r0, r1
 80081da:	607a      	str	r2, [r7, #4]
 80081dc:	0019      	movs	r1, r3
 80081de:	230b      	movs	r3, #11
 80081e0:	18fb      	adds	r3, r7, r3
 80081e2:	1c02      	adds	r2, r0, #0
 80081e4:	701a      	strb	r2, [r3, #0]
 80081e6:	2408      	movs	r4, #8
 80081e8:	193b      	adds	r3, r7, r4
 80081ea:	1c0a      	adds	r2, r1, #0
 80081ec:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081ee:	2117      	movs	r1, #23
 80081f0:	187b      	adds	r3, r7, r1
 80081f2:	2200      	movs	r2, #0
 80081f4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081f6:	2516      	movs	r5, #22
 80081f8:	197b      	adds	r3, r7, r5
 80081fa:	2200      	movs	r2, #0
 80081fc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	23a6      	movs	r3, #166	; 0xa6
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	58d0      	ldr	r0, [r2, r3]
 8008206:	193b      	adds	r3, r7, r4
 8008208:	881d      	ldrh	r5, [r3, #0]
 800820a:	000e      	movs	r6, r1
 800820c:	187c      	adds	r4, r7, r1
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	230b      	movs	r3, #11
 8008212:	18fb      	adds	r3, r7, r3
 8008214:	7819      	ldrb	r1, [r3, #0]
 8008216:	002b      	movs	r3, r5
 8008218:	f7f9 fa32 	bl	8001680 <HAL_PCD_EP_Receive>
 800821c:	0003      	movs	r3, r0
 800821e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008220:	2516      	movs	r5, #22
 8008222:	197c      	adds	r4, r7, r5
 8008224:	0031      	movs	r1, r6
 8008226:	187b      	adds	r3, r7, r1
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	0018      	movs	r0, r3
 800822c:	f000 f839 	bl	80082a2 <USBD_Get_USB_Status>
 8008230:	0003      	movs	r3, r0
 8008232:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008234:	197b      	adds	r3, r7, r5
 8008236:	781b      	ldrb	r3, [r3, #0]
}
 8008238:	0018      	movs	r0, r3
 800823a:	46bd      	mov	sp, r7
 800823c:	b007      	add	sp, #28
 800823e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008240 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	000a      	movs	r2, r1
 800824a:	1cfb      	adds	r3, r7, #3
 800824c:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	23a6      	movs	r3, #166	; 0xa6
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	58d2      	ldr	r2, [r2, r3]
 8008256:	1cfb      	adds	r3, r7, #3
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	0019      	movs	r1, r3
 800825c:	0010      	movs	r0, r2
 800825e:	f7f9 fa53 	bl	8001708 <HAL_PCD_EP_GetRxCount>
 8008262:	0003      	movs	r3, r0
}
 8008264:	0018      	movs	r0, r3
 8008266:	46bd      	mov	sp, r7
 8008268:	b002      	add	sp, #8
 800826a:	bd80      	pop	{r7, pc}

0800826c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008274:	4b02      	ldr	r3, [pc, #8]	; (8008280 <USBD_static_malloc+0x14>)
}
 8008276:	0018      	movs	r0, r3
 8008278:	46bd      	mov	sp, r7
 800827a:	b002      	add	sp, #8
 800827c:	bd80      	pop	{r7, pc}
 800827e:	46c0      	nop			; (mov r8, r8)
 8008280:	200001a0 	.word	0x200001a0

08008284 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]

}
 800828c:	46c0      	nop			; (mov r8, r8)
 800828e:	46bd      	mov	sp, r7
 8008290:	b002      	add	sp, #8
 8008292:	bd80      	pop	{r7, pc}

08008294 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008298:	f7f8 f848 	bl	800032c <SystemClock_Config>
}
 800829c:	46c0      	nop			; (mov r8, r8)
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b084      	sub	sp, #16
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	0002      	movs	r2, r0
 80082aa:	1dfb      	adds	r3, r7, #7
 80082ac:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082ae:	230f      	movs	r3, #15
 80082b0:	18fb      	adds	r3, r7, r3
 80082b2:	2200      	movs	r2, #0
 80082b4:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 80082b6:	1dfb      	adds	r3, r7, #7
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d00d      	beq.n	80082da <USBD_Get_USB_Status+0x38>
 80082be:	dc02      	bgt.n	80082c6 <USBD_Get_USB_Status+0x24>
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d005      	beq.n	80082d0 <USBD_Get_USB_Status+0x2e>
 80082c4:	e018      	b.n	80082f8 <USBD_Get_USB_Status+0x56>
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d00c      	beq.n	80082e4 <USBD_Get_USB_Status+0x42>
 80082ca:	2b03      	cmp	r3, #3
 80082cc:	d00f      	beq.n	80082ee <USBD_Get_USB_Status+0x4c>
 80082ce:	e013      	b.n	80082f8 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80082d0:	230f      	movs	r3, #15
 80082d2:	18fb      	adds	r3, r7, r3
 80082d4:	2200      	movs	r2, #0
 80082d6:	701a      	strb	r2, [r3, #0]
    break;
 80082d8:	e013      	b.n	8008302 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80082da:	230f      	movs	r3, #15
 80082dc:	18fb      	adds	r3, r7, r3
 80082de:	2202      	movs	r2, #2
 80082e0:	701a      	strb	r2, [r3, #0]
    break;
 80082e2:	e00e      	b.n	8008302 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80082e4:	230f      	movs	r3, #15
 80082e6:	18fb      	adds	r3, r7, r3
 80082e8:	2201      	movs	r2, #1
 80082ea:	701a      	strb	r2, [r3, #0]
    break;
 80082ec:	e009      	b.n	8008302 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80082ee:	230f      	movs	r3, #15
 80082f0:	18fb      	adds	r3, r7, r3
 80082f2:	2202      	movs	r2, #2
 80082f4:	701a      	strb	r2, [r3, #0]
    break;
 80082f6:	e004      	b.n	8008302 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80082f8:	230f      	movs	r3, #15
 80082fa:	18fb      	adds	r3, r7, r3
 80082fc:	2202      	movs	r2, #2
 80082fe:	701a      	strb	r2, [r3, #0]
    break;
 8008300:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8008302:	230f      	movs	r3, #15
 8008304:	18fb      	adds	r3, r7, r3
 8008306:	781b      	ldrb	r3, [r3, #0]
}
 8008308:	0018      	movs	r0, r3
 800830a:	46bd      	mov	sp, r7
 800830c:	b004      	add	sp, #16
 800830e:	bd80      	pop	{r7, pc}

08008310 <__libc_init_array>:
 8008310:	b570      	push	{r4, r5, r6, lr}
 8008312:	2600      	movs	r6, #0
 8008314:	4d0c      	ldr	r5, [pc, #48]	; (8008348 <__libc_init_array+0x38>)
 8008316:	4c0d      	ldr	r4, [pc, #52]	; (800834c <__libc_init_array+0x3c>)
 8008318:	1b64      	subs	r4, r4, r5
 800831a:	10a4      	asrs	r4, r4, #2
 800831c:	42a6      	cmp	r6, r4
 800831e:	d109      	bne.n	8008334 <__libc_init_array+0x24>
 8008320:	2600      	movs	r6, #0
 8008322:	f000 f821 	bl	8008368 <_init>
 8008326:	4d0a      	ldr	r5, [pc, #40]	; (8008350 <__libc_init_array+0x40>)
 8008328:	4c0a      	ldr	r4, [pc, #40]	; (8008354 <__libc_init_array+0x44>)
 800832a:	1b64      	subs	r4, r4, r5
 800832c:	10a4      	asrs	r4, r4, #2
 800832e:	42a6      	cmp	r6, r4
 8008330:	d105      	bne.n	800833e <__libc_init_array+0x2e>
 8008332:	bd70      	pop	{r4, r5, r6, pc}
 8008334:	00b3      	lsls	r3, r6, #2
 8008336:	58eb      	ldr	r3, [r5, r3]
 8008338:	4798      	blx	r3
 800833a:	3601      	adds	r6, #1
 800833c:	e7ee      	b.n	800831c <__libc_init_array+0xc>
 800833e:	00b3      	lsls	r3, r6, #2
 8008340:	58eb      	ldr	r3, [r5, r3]
 8008342:	4798      	blx	r3
 8008344:	3601      	adds	r6, #1
 8008346:	e7f2      	b.n	800832e <__libc_init_array+0x1e>
 8008348:	080084d4 	.word	0x080084d4
 800834c:	080084d4 	.word	0x080084d4
 8008350:	080084d4 	.word	0x080084d4
 8008354:	080084d8 	.word	0x080084d8

08008358 <memset>:
 8008358:	0003      	movs	r3, r0
 800835a:	1812      	adds	r2, r2, r0
 800835c:	4293      	cmp	r3, r2
 800835e:	d100      	bne.n	8008362 <memset+0xa>
 8008360:	4770      	bx	lr
 8008362:	7019      	strb	r1, [r3, #0]
 8008364:	3301      	adds	r3, #1
 8008366:	e7f9      	b.n	800835c <memset+0x4>

08008368 <_init>:
 8008368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836a:	46c0      	nop			; (mov r8, r8)
 800836c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800836e:	bc08      	pop	{r3}
 8008370:	469e      	mov	lr, r3
 8008372:	4770      	bx	lr

08008374 <_fini>:
 8008374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008376:	46c0      	nop			; (mov r8, r8)
 8008378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800837a:	bc08      	pop	{r3}
 800837c:	469e      	mov	lr, r3
 800837e:	4770      	bx	lr
